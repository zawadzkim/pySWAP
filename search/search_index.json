{"config": {"lang": ["en"], "separator": "[\\s\\-]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Welcome to pyswap documentation", "text": "<p>pyswap is the first comprehensive Python wrapper for the SWAP hydrological model (version 4.2). It allows you to create and interact with these models using Python, including interactive tools like Jupyter notebooks. pyswap integrates HDF5 as stofage for models and a universal exchange file format, facilitating seamless collaboration with R users, who can utilize packages like SWAP Tools to handle SWAP models. Additionally, it integrates with external databases, such as KNMI for Dutch weather data and the WOFOST crop parameter database.</p> <p>The model variables are based on the original input files from SWAP developers, the user manual (Kroes et al., 2017), and other documents available on the SWAP website.</p> <p>Note</p> <p>While pyswap already supports core SWAP functionalities, there's plenty of room for improvement. Contributions are highly encouraged, whether it's opening issues or starting discussions on GitHub. For more details on how to contribute, visit the contribute section and get involved!</p>"}, {"location": "#quick_links", "title": "Quick links", "text": "<ul> <li> <p> Quickstart</p> <p>Learn how to install the package and get you started with your first model.</p> <p> Installation</p> </li> <li> <p> Input validation</p> <p>pySWAP uses Pydantic and Pandera validation frameworks to make sure   SWAP simulations run smoothly</p> </li> <li> <p> Markdown documentation</p> <p>This documentation is written in markdown allowing anyone to contribute</p> <p> See how</p> </li> <li> <p> Open Software - Open Science</p> <p>pySWAP is open-source with MIT license and aims at improving   transparency and sharability of modelling work</p> <p> License</p> </li> </ul>"}, {"location": "#swap_soil-water-atmosphere-plant_model", "title": "SWAP: Soil-Water-Atmosphere-Plant model", "text": ""}, {"location": "contributing/", "title": "Welcome Contributors!", "text": "<p>We are thrilled to have you here! This project is open-source and completely free to use. We believe in the power of community and collaboration, and we are grateful for any contributions you can make. Whether it's reporting bugs, suggesting new features, or submitting pull requests, your efforts help make this software better for everyone.</p>"}, {"location": "contributing/#reporting_bugs", "title": "Reporting Bugs", "text": "<p>If you find a bug, please report it by opening an issue on our GitHub repository. Provide as much detail as possible, including steps to reproduce the issue and any relevant logs or screenshots. Add a respective label to it.</p>"}, {"location": "contributing/#suggesting_features", "title": "Suggesting Features", "text": "<p>We welcome suggestions for new features. Please open an issue on our GitHub repository and describe the feature you would like to see, including any potential use cases. Add \"enhancement\" label to it.</p>"}, {"location": "contributing/#submitting_pull_requests", "title": "Submitting Pull Requests", "text": "<ol> <li>Open an issue to discuss your proposed changes.</li> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>If you've added code that should be tested, add tests.</li> <li>Ensure the test suite passes.</li> <li>Make sure your code lints.</li> <li>Submit a pull request with a clear description of your changes and link to the issue.</li> </ol>"}, {"location": "contributing/#getting_help", "title": "Getting Help", "text": "<p>If you need help or have questions, feel free to reach out by opening an issue or joining our community discussions.</p> <p>Thank you for your support and happy coding!</p>"}, {"location": "contributing/documentation/", "title": "Documentation is critical", "text": "<p>Documentation is one of the most important part of the codebase; afterall, why bother writing and publishing software if no one else but the author knows how to use it.</p> <p>Quite a few times after picking up development of a project after some time I realised that I do not remember myself how to use certain parts of the code. This becomes even more tricky once the codebase and contributors group grows.</p> <p>I need to acknowledge however, that writing the documentation takes as long as coding. And it is not easy to keep up with changes nor it is easy, for the developer, to reaslise what has been explained poorly or not at all. Therefore, user experience and contribution is crutial.</p> <p>Contributing to documentation is very easy, and takes the same step as contributing to code, but you can hardly break things. Moreover, it's a kind gesture, more than 90% of users will ever do.</p> <p>If you'd like to support the project, but you are not quite familiar with Python, please look at the docs and find mistakes and areas to improve. If you have no time to make the fork, edit and submit a PR, please at least create an issue with <code>#docs</code> tag. It will help a lot!.</p>"}, {"location": "contributing/documentation/#where_can_you_contribute", "title": "Where can you contribute", "text": "<p>pySWAP documentation can be split in two parts: API reference, which is generate automatically from docstrings in the code, user guide.</p>"}, {"location": "contributing/documentation/#user_guide_and_wiki", "title": "User guide and Wiki", "text": "<p>In this documentation I also placed a lot of information I thought was important from the perspective of a SWAP user. Even if you do not use pySWAP, you can go to the wiki and check what a particular variable does in the model.</p> <p>That is mostly taken from the sample files provided with SWAP version 4.2.</p>"}, {"location": "contributing/documentation/#api_reference", "title": "API reference", "text": "<p>Contributing to the API reference can take a bit more skill. Over all throughout the project we use Google style documentation. Each component is documented with docstrings.</p>"}, {"location": "contributing/documentation/#module_documentation", "title": "Module documentation", "text": "<p>At the top of each module, there is a docstring which describes what that particular module does and what elements are defined in it. Here is an example:</p> <pre><code>\"\"\"\nIrrigation settings for the SWAP simuluation.\n\nClasses:\n    IrgFile: The irrigation file.\n    FixedIrrigation: Fixed irrigation settings.\n    ScheduledIrrigation: Irrigation scheduling settings.\n    IRRIGATION: Information for each fixed irrigation event.\n\nFunctions:\n    irg_from_csv: Load the irrigation file from a CSV file.\n\"\"\"\n</code></pre> <p>By reading this, we immediatelly know what can we import from this module. This also works in your code editor; when you do <code>from pyswap import irrigation</code> and you hoover over the <code>irrigation</code>, you will see that docstring in a popup window.</p>"}, {"location": "contributing/documentation/#classes_and_functions", "title": "Classes and functions", "text": "<p>Docstrings are defined directly under the class or function definition. They follow the standard Google pattern like so:</p> <pre><code>class Irrigation:\n    \"\"\"Holds the crop settings of the simulation.\n\n    Attributes:\n        swcrop (int): Switch for crop:\n\n            * 0 - Bare soil.\n            * 1 - Simulate crop.\n\n        rds (Optional[float]): Rooting depth of the crop [cm].\n        table_croprotation (Optional[Table]): Table with crop rotation data.\n        cropfiles (Optional[List[CropFile]]): List of crop files.\n\n    Methods:\n        write_crop: Write the crop files.\n\"\"\"\n    # Definition of the class; attributes, etc.\n</code></pre> <p>There are a few twists, though.</p>"}, {"location": "contributing/documentation/#describe_switch_options", "title": "Describe switch options", "text": "<p>To make sure the switch options are displayed as a list, you have to add a new line before and after, write the list in 1 tab indentation and start each line with <code>*</code>.</p>"}, {"location": "contributing/documentation/#other_reusable_elements", "title": "Other reusable elements", "text": "<p>For instance if tyou define a new type of field, the docstring for that goes directly under the definition of the varialbe like so:</p> <pre><code>Arrays = Annotated[\n    DataFrame,\n    PlainSerializer(serialize_arrays, return_type=str, when_used=\"json\")\n]\n\"\"\"Serialize pd.DataFrame without headers to a string with leading variable name.\"\"\"\n</code></pre> <p>That docstring is then used by inpecting tools in code editors, helping users understand what it does and is automatically pulled by mkdocs to generate online documentation.</p>"}, {"location": "contributing/imports/", "title": "Importing", "text": "<p>When it comes to imports, there's a balance between keeping them concise and clearly organized. On one hand, it's convenient to type <code>package.</code> and access anything from that package. However, as the project grows, it can become overwhelming to find what you need. In pySWAP, we've chosen to limit import shortcuts, making module calls more explicit.</p> <p>Note</p> <p>To ensure clarity and maintainability, we have structured our imports thoughtfully.</p>"}, {"location": "contributing/imports/#1_components", "title": "1. Components", "text": "<p>Individual classes from the components library are not exposed directly at the package level. To access them, use the following approach:</p> <pre><code>import pyswap as psp\n\nsimset = psp.components.simsettings.GeneralSettings(...)\n</code></pre> <p>While some modules may contain only one or two classes, others include many tables, which would clutter the hinting.</p>"}, {"location": "contributing/imports/#2_special_modules", "title": "2. Special modules", "text": "<p>Special modules such as <code>model</code>, <code>db</code>, <code>io</code>, <code>gis</code>, and <code>plot</code> can be accessed directly from the package level:</p> <pre><code>import pyswap as psp\n\nlocation = psp.gis.Location(...)\n\nmodel = psp.Model(...)\n\npsp.plot_evapotranspiration(...)\n</code></pre>"}, {"location": "contributing/imports/#3_testcase", "title": "3. Testcase", "text": "<p>Testcases can be imported for training and experimentation like this:</p> <pre><code>from pyswap import testcase\n</code></pre>"}, {"location": "contributing/imports/#third-party_and_non-reexported_imports", "title": "Third-party and non-reexported imports", "text": "<p>To keep third-party imports and other imports that are not meant to be reexported organized, contributors should use aliases with an underscore prefix in modules that users normally call (e.g., <code>pyswap.components</code>). This ensures that important imports appear at the top of IDE hints. Here's an example:</p> <pre><code>import numpy as _np\nimport pandas as _pd\nimport matplotlib.pyplot as _plt\n# internally defined objects that are not meant to be reexported should also be\n# aliased with an underscore\nfrom pyswap.core.basemodel import PySWAPBaseModel as _PySWAPBaseModel\n</code></pre> <p>It is not essential in modules from which the important classes are accessible directly from the package level.</p> <p>Note</p> <p>Note that we also prefer explicit (full) import paths instead of relative imports, so:</p> <pre><code>from .core import db  # Not good\nfrom pyswap.core import db  # Good\n</code></pre>"}, {"location": "contributing/imports/#importing_style", "title": "importing style", "text": "<p>Ruff linting tool is set to force one line imports, and also wrap aliases, so the preferred style is as follows:</p> <pre><code>from pyswap.core.valueranges import UNITRANGE as _UNITRANGE\nfrom pyswap.core.fields import (\n    Decimal2f as _Decimal2f,\n    Decimal3f as _Decimal3f,\n    String as _String,\n    Table as _Table,\n)\n</code></pre>"}, {"location": "contributing/imports/#use_of_all", "title": "use of all", "text": "<p>for consistency, at the top of each module, there should be the all variable defining which objects are meant to be imported with the * wildcard.</p>"}, {"location": "contributing/makefile/", "title": "Makefile", "text": "<p>Make file is particularily useful when a certain workflow, for example for testing code or docs has to be repeatadly executed. It allows you to define a set of tasks that can be run with simple commands, e.g., <code>make &lt;some-command-name&gt;</code>. In this project, the Makefile provides several useful options:</p> <ul> <li>test-hupsel: Installs the poetry environment and pre-commit hooks, then runs a specific test case.</li> <li>testcheck: Runs code quality tools in a test configuration, including checking the Poetry lock file, linting code, performing static type checking, and checking for obsolete dependencies. Saves the results from the QC tools to log files.</li> <li>check: Similar to <code>testcheck</code>, but runs the tools without saving the output to log files.</li> <li>test: Runs the test suite with pytest, including coverage reporting.</li> <li>build: Cleans build artifacts and creates a wheel file using Poetry.</li> <li>clean-build: Removes the <code>dist</code> directory to clean up build artifacts.</li> <li>publish: Publishes a release to PyPI, with a dry run first to ensure everything is set up correctly.</li> <li>build-and-publish: Combines the build and publish steps into one command.</li> <li>docs-test: Tests if the documentation can be built without warnings or errors.</li> <li>docs: Builds and serves the documentation locally.</li> <li>help: Lists all available make commands with descriptions.</li> </ul> <p>These commands are also used to simplify CI workflows in GitHub. You are more than welcome to define more commands when you contribute to the project.</p>"}, {"location": "reference/", "title": "API Reference", "text": "<p>Welcome to the API reference! This section is autogenerated from the docstrings in our codebase. Here you'll find detailed information about the functions, classes, and modules available in our project.</p>"}, {"location": "reference/#for_users", "title": "For Users", "text": "<p>If you're looking to understand all the elements used in model creation, you will be most interested in Model components, Model and Integrations sections. There you will find examples and detailed explanations of the elements exposed to the user, such as model components, tables, and functions, to help you get the most out of our tools.</p>"}, {"location": "reference/#for_contributors", "title": "For Contributors", "text": "<p>Interested in contributing to the project or want to see what's happening under the hood? Check out our Contributor Guide. This guide includes things like internally used functions, classes and other details relevant for developers.</p> <p>Happy coding!</p>"}, {"location": "reference/developer/", "title": "Advanced elements", "text": "<p>Base models inherited by all pySWAP models.</p> <p>A lot of functionality can be abstracted away in the base models. This way, the code is more DRY and easier to maintain. The base models are used to enforce the correct data types and structure of the input data. They also provide methods to convert the data to the format required by the SWAP model.</p> <p>Classes defined here are based on Pydantic BaseModel and Pandera DataFrameModel. Both are meant to ensure the correct data types and structure of the input data, as successful validation means smooth execution of the SWAP model. Particularily important when run as a submitted job on an HPC.</p> <p>Classes:</p> Name Description <code>BaseModel</code> <p>Base class for pySWAP models. Inherits from Pydantic BaseModel.</p> <code>BaseTableModel</code> <p>Base class for pySWAP models that validate pandas DataFrames. Inherits from Pandera DataFrameModel.</p>"}, {"location": "reference/developer/#pyswap.core.basemodel.BaseTableModel", "title": "<code>BaseTableModel</code>", "text": "<p>               Bases: <code>DataFrameModel</code></p> <p>Base model for pandas DataFrames.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create a validated DataFrame from a dictionary.</p> Source code in <code>pyswap/core/basemodel.py</code> <pre><code>class BaseTableModel(pa.DataFrameModel):\n    \"\"\"Base model for pandas DataFrames.\n\n    Methods:\n        create: Create a validated DataFrame from a dictionary.\n    \"\"\"\n\n    class Config:\n        coerce = True\n\n    @classmethod\n    def create(cls, data: dict, columns: list | None = None) -&gt; DataFrame:\n        df = pd.DataFrame(data)\n        if columns:\n            df.columns = columns\n        else:\n            df.columns = df.columns.str.upper()\n        validated_df = cls.validate(df)\n        return validated_df\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.basemodel.PySWAPBaseModel", "title": "<code>PySWAPBaseModel</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Base class for pySWAP models.</p> <p>Methods:</p> Name Description <code>__setattr__</code> <p>Overriden method to silently ignore assignment of frozen fields.</p> <code>update</code> <p>Update the model with new values from a dictionary.</p> Source code in <code>pyswap/core/basemodel.py</code> <pre><code>class PySWAPBaseModel(BaseModel):\n    \"\"\"Base class for pySWAP models.\n\n    Methods:\n        __setattr__: Overriden method to silently ignore assignment of frozen\n            fields.\n        update: Update the model with new values from a dictionary.\n    \"\"\"\n\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True,\n        validate_assignment=True,\n        extra=\"ignore\",\n        populate_by_name=True,\n    )\n\n    def __setattr__(self, name, value):\n        \"\"\"Silently ignore assignment of frozen fields.\n\n        This method is overridden to silently ignore assignment of frozen fields\n        to avoid errors when an old swp files is read.\n        \"\"\"\n\n        if name in self.model_fields and self.model_fields[name].frozen:\n            return\n        super().__setattr__(name, value)\n\n    def update(self, new: dict, inplace: bool = False, no_validate: bool = False):\n        \"\"\"Update the model with new values.\n\n        Given dictionary of values is first filtered to include only the fields\n        that exist in the model. The model is then updated with the new values.\n        The updated model is returned (either new or updated self).\n\n        Parameters:\n            new (dict): Dictionary with new values.\n            inplace (bool): If True, update the model in place.\n        \"\"\"\n\n        # filtered = {k: v for k, v in new.items() if k in self.model_fields}\n\n        # updated_model = self.model_validate(dict(self) | filtered)\n        updated_model = self.model_validate(dict(self) | new)\n\n        if not inplace:\n            # added this for the case when the user loads a model from the\n            # classic ASCII files. Then the .update() method is used, but not\n            # all the attributes will be available immediatelly. Full validation\n            # will still be performed upon model run.\n            if no_validate:\n                updated_model._validation = False\n            else:\n                updated_model._validation = True\n            updated_model.validate_with_yaml() if hasattr(\n                updated_model, \"validate_with_yaml\"\n            ) else None\n            return updated_model\n\n        else:\n            for field, value in updated_model:\n                setattr(self, field, value)\n            if no_validate:\n                updated_model._validation = False\n            else:\n                updated_model._validation = True\n            self.validate_with_yaml() if hasattr(\n                updated_model, \"validate_with_yaml\"\n            ) else None\n\n            return self\n\n    @field_validator(\"*\", mode=\"before\")\n    @classmethod\n    def convert_switches(cls, value: Any, info: Any) -&gt; Any:\n        \"\"\"Convert switch values to integers.\n\n        This method was necessary to ensure that loading models from ASCII files\n        would work. It could be improved to include literals that do not start\n        with \"sw\" as well.\n        \"\"\"\n        if (\n            (info.field_name.startswith(\"sw\") or info.field_name in ADDITIONAL_SWITCHES)\n            and info.field_name != \"swap_ver\"\n            and value\n        ):\n            try:\n                return int(value)\n            except ValueError:\n                return value\n        return value\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.basemodel.PySWAPBaseModel.__setattr__", "title": "<code>__setattr__(name, value)</code>", "text": "<p>Silently ignore assignment of frozen fields.</p> <p>This method is overridden to silently ignore assignment of frozen fields to avoid errors when an old swp files is read.</p> Source code in <code>pyswap/core/basemodel.py</code> <pre><code>def __setattr__(self, name, value):\n    \"\"\"Silently ignore assignment of frozen fields.\n\n    This method is overridden to silently ignore assignment of frozen fields\n    to avoid errors when an old swp files is read.\n    \"\"\"\n\n    if name in self.model_fields and self.model_fields[name].frozen:\n        return\n    super().__setattr__(name, value)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.basemodel.PySWAPBaseModel.convert_switches", "title": "<code>convert_switches(value, info)</code>  <code>classmethod</code>", "text": "<p>Convert switch values to integers.</p> <p>This method was necessary to ensure that loading models from ASCII files would work. It could be improved to include literals that do not start with \"sw\" as well.</p> Source code in <code>pyswap/core/basemodel.py</code> <pre><code>@field_validator(\"*\", mode=\"before\")\n@classmethod\ndef convert_switches(cls, value: Any, info: Any) -&gt; Any:\n    \"\"\"Convert switch values to integers.\n\n    This method was necessary to ensure that loading models from ASCII files\n    would work. It could be improved to include literals that do not start\n    with \"sw\" as well.\n    \"\"\"\n    if (\n        (info.field_name.startswith(\"sw\") or info.field_name in ADDITIONAL_SWITCHES)\n        and info.field_name != \"swap_ver\"\n        and value\n    ):\n        try:\n            return int(value)\n        except ValueError:\n            return value\n    return value\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.basemodel.PySWAPBaseModel.update", "title": "<code>update(new, inplace=False, no_validate=False)</code>", "text": "<p>Update the model with new values.</p> <p>Given dictionary of values is first filtered to include only the fields that exist in the model. The model is then updated with the new values. The updated model is returned (either new or updated self).</p> <p>Parameters:</p> Name Type Description Default <code>new</code> <code>dict</code> <p>Dictionary with new values.</p> required <code>inplace</code> <code>bool</code> <p>If True, update the model in place.</p> <code>False</code> Source code in <code>pyswap/core/basemodel.py</code> <pre><code>def update(self, new: dict, inplace: bool = False, no_validate: bool = False):\n    \"\"\"Update the model with new values.\n\n    Given dictionary of values is first filtered to include only the fields\n    that exist in the model. The model is then updated with the new values.\n    The updated model is returned (either new or updated self).\n\n    Parameters:\n        new (dict): Dictionary with new values.\n        inplace (bool): If True, update the model in place.\n    \"\"\"\n\n    # filtered = {k: v for k, v in new.items() if k in self.model_fields}\n\n    # updated_model = self.model_validate(dict(self) | filtered)\n    updated_model = self.model_validate(dict(self) | new)\n\n    if not inplace:\n        # added this for the case when the user loads a model from the\n        # classic ASCII files. Then the .update() method is used, but not\n        # all the attributes will be available immediatelly. Full validation\n        # will still be performed upon model run.\n        if no_validate:\n            updated_model._validation = False\n        else:\n            updated_model._validation = True\n        updated_model.validate_with_yaml() if hasattr(\n            updated_model, \"validate_with_yaml\"\n        ) else None\n        return updated_model\n\n    else:\n        for field, value in updated_model:\n            setattr(self, field, value)\n        if no_validate:\n            updated_model._validation = False\n        else:\n            updated_model._validation = True\n        self.validate_with_yaml() if hasattr(\n            updated_model, \"validate_with_yaml\"\n        ) else None\n\n        return self\n</code></pre>"}, {"location": "reference/developer/#mixins", "title": "Mixins", "text": "<p>Reusable mixins enhancing functionality of specific PySWAPBaseModel.</p> <p>To keep the main PySWAPBaseModel class and the components library clean and focused, mixins are used to add additional functionality to the classes that need it. The concept of the mixins was inspired by the Django framework and it really helps to keep the code clean and organized.</p> <p>Should more functionality be needed in the future for one or more classes, it should be implemented as a mixin and then inherited by the classes that need it.</p> <p>Classes:</p> <pre><code>FileMixin: Custom saving functionality for models that need file I/O.\nSerializableMixin: Converting a model to a SWAP-formatted string.\nYAMLValidatorMixin: Validating parameters using external YAML rules.\nWOFOSTUpdateMixin: Interface for the WOFOST crop parameters database for\n    pySWAP.\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.FileMixin", "title": "<code>FileMixin</code>", "text": "<p>Custom saving functionality for models that need file I/O.</p> <p>!!! note:</p> <pre><code>The _extension attribute should be set in the class that inherits\nthis mixin. It is recommended that pydantic's PrivateAttr is used to\nhide this attribute from the user.\n</code></pre> <p>Methods:</p> Name Description <code>save_file</code> <p>Saves a string to a file.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>class FileMixin:\n    \"\"\"Custom saving functionality for models that need file I/O.\n\n    !!! note:\n\n        The _extension attribute should be set in the class that inherits\n        this mixin. It is recommended that pydantic's PrivateAttr is used to\n        hide this attribute from the user.\n\n    Methods:\n        save_file: Saves a string to a file.\n    \"\"\"\n\n    def save_file(\n        self,\n        string: str,\n        fname: str,\n        path: Path,\n    ) -&gt; None:\n        \"\"\"Saves a string to a file.\n\n        The extension should now be provided in each class inheriting this\n        mixin as a private attribute.\n\n        Parameters:\n            string: The string to be saved to a file.\n            fname: The name of the file.\n            path: The path where the file should be saved.\n        \"\"\"\n\n        if not hasattr(self, \"_extension\"):\n            msg = \"The _extension attribute should be set.\"\n            raise AttributeError(msg)\n\n        ext = self._extension\n        fname = f\"{fname}.{ext}\" if ext else fname\n\n        with open(f\"{path}/{fname}\", \"w\", encoding=\"ascii\") as f:\n            f.write(string)\n\n        logger.info(f\"{fname} saved successfully.\")\n\n        return None\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.FileMixin.save_file", "title": "<code>save_file(string, fname, path)</code>", "text": "<p>Saves a string to a file.</p> <p>The extension should now be provided in each class inheriting this mixin as a private attribute.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to be saved to a file.</p> required <code>fname</code> <code>str</code> <p>The name of the file.</p> required <code>path</code> <code>Path</code> <p>The path where the file should be saved.</p> required Source code in <code>pyswap/utils/mixins.py</code> <pre><code>def save_file(\n    self,\n    string: str,\n    fname: str,\n    path: Path,\n) -&gt; None:\n    \"\"\"Saves a string to a file.\n\n    The extension should now be provided in each class inheriting this\n    mixin as a private attribute.\n\n    Parameters:\n        string: The string to be saved to a file.\n        fname: The name of the file.\n        path: The path where the file should be saved.\n    \"\"\"\n\n    if not hasattr(self, \"_extension\"):\n        msg = \"The _extension attribute should be set.\"\n        raise AttributeError(msg)\n\n    ext = self._extension\n    fname = f\"{fname}.{ext}\" if ext else fname\n\n    with open(f\"{path}/{fname}\", \"w\", encoding=\"ascii\") as f:\n        f.write(string)\n\n    logger.info(f\"{fname} saved successfully.\")\n\n    return None\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.SerializableMixin", "title": "<code>SerializableMixin</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Converting a model to a SWAP-formatted string.</p> <p>This mixin is only inherited by classes that directly serialize to a SWAP-formatted string. The assumptions are that the inheriting classes:</p> <ul> <li>do not contain nested classes.</li> <li>if the class contains nested classes it should either use Subsection field     types or override the <code>model_string()</code> method.</li> </ul> <p>Methods:</p> Name Description <code>if_is_union_type</code> <p>Check if the field type is a Union type.</p> <code>is_annotated_exception_type</code> <p>Check if the attribute type is Table, Arrays, or ObjectList.</p> <code>serialize_model</code> <p>Override the default serialization method.</p> <code>model_string</code> <p>Concatenate the formatted strings from dictionary to one string.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>class SerializableMixin(BaseModel):\n    \"\"\"Converting a model to a SWAP-formatted string.\n\n    This mixin is only inherited by classes that directly serialize to a\n    SWAP-formatted string. The assumptions are that the inheriting classes:\n\n    - do not contain nested classes.\n    - if the class contains nested classes it should either use Subsection field\n        types or override the `model_string()` method.\n\n    Methods:\n        if_is_union_type: Check if the field type is a Union type.\n        is_annotated_exception_type: Check if the attribute type is Table,\n            Arrays, or ObjectList.\n        serialize_model: Override the default serialization method.\n        model_string: Concatenate the formatted strings from dictionary to\n            one string.\n    \"\"\"\n\n    def if_is_union_type(self, field_info: FieldInfo) -&gt; dict | None:\n        \"\"\"Check if the field type is a Union type.\n\n        If it is, look for the json_schema_extra attribute in the field_info\n        of the first argument of the Union type. If it is not found, return\n        None. It was necessary in cases of, for example, optional classes like\n        Union[Table, None].\n\n        Parameters:\n            field_info (FieldInfo): The FieldInfo object of the field.\n        \"\"\"\n\n        field_type = field_info.annotation\n\n        if get_origin(field_type) is Union:\n            union_args = get_args(field_type)\n            args = get_args(union_args[0])\n\n            field_info = [item for item in args if isinstance(item, FieldInfo)]\n\n            if not field_info:\n                return None\n\n            # Only return the json_schema_extra attribute. This is used in some\n            # cases to pass addotional information from the serializer in\n            # pyswap.core.fields module to the model_dump.\n            return field_info[0].json_schema_extra\n        return None\n\n    def is_annotated_exception_type(self, field_name: str) -&gt; bool:\n        \"\"\"Check if the attribute type is Table, Arrays, or ObjectList.\n\n        For Table, Arrays, and ObjectList types True is returned, ensuring a\n        separate serialization path.\n\n        First try to assign the json_schema_extra from a Union type. If that\n        fails, assign the json_schema_extra from the field_info. If the\n        json_schema_extra is None, return False.\n        \"\"\"\n        # Every special field will have a FieldInfo object\n        field_info = self.model_fields.get(field_name, None)\n\n        if field_info is None:\n            return False\n\n        json_schema_extra = (\n            self.if_is_union_type(field_info) or field_info.json_schema_extra\n        )\n\n        if json_schema_extra is None:\n            return False\n\n        return json_schema_extra.get(\"is_annotated_exception_type\", False)\n\n    @model_serializer(when_used=\"json\", mode=\"wrap\")\n    def serialize_model(self, handler: Any):\n        \"\"\"Override the default serialization method.\n\n        In the intermediate step, a dictionary is created with SWAP formatted\n        strings.\n        \"\"\"\n        result = {}\n        validated_self = handler(self)\n        for field_name, field_value in validated_self.items():\n            if self.is_annotated_exception_type(field_name):\n                result[field_name] = field_value\n            else:\n                result[field_name] = f\"{field_name.upper()} = {field_value}\"\n        return result\n\n    def model_string(\n        self, mode: Literal[\"str\", \"list\"] = \"string\", **kwargs\n    ) -&gt; str | list[str]:\n        \"\"\"Concatenate the formatted strings from dictionary to one string.\n\n\n        !!! note:\n            By alias is True, because in some cases, particularily in the case\n            of CropSettings, the WOFOST names of parameters in the database were\n            different from those used in SWAP. This allows those parameters to\n            be properly matched, yet serialized properly in SWAP input files.\n\n        Parameters:\n            mode (Literal[\"str\", \"list]): The output format.\n            kwargs (dict): Additional keyword arguments passed to `model_dump()`.\n        \"\"\"\n        dump = self.model_dump(\n            mode=\"json\", exclude_none=True, by_alias=True, **kwargs\n        ).values()\n\n        if mode == \"list\":\n            return list(dump)\n        else:\n            return \"\\n\".join(dump)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.SerializableMixin.if_is_union_type", "title": "<code>if_is_union_type(field_info)</code>", "text": "<p>Check if the field type is a Union type.</p> <p>If it is, look for the json_schema_extra attribute in the field_info of the first argument of the Union type. If it is not found, return None. It was necessary in cases of, for example, optional classes like Union[Table, None].</p> <p>Parameters:</p> Name Type Description Default <code>field_info</code> <code>FieldInfo</code> <p>The FieldInfo object of the field.</p> required Source code in <code>pyswap/utils/mixins.py</code> <pre><code>def if_is_union_type(self, field_info: FieldInfo) -&gt; dict | None:\n    \"\"\"Check if the field type is a Union type.\n\n    If it is, look for the json_schema_extra attribute in the field_info\n    of the first argument of the Union type. If it is not found, return\n    None. It was necessary in cases of, for example, optional classes like\n    Union[Table, None].\n\n    Parameters:\n        field_info (FieldInfo): The FieldInfo object of the field.\n    \"\"\"\n\n    field_type = field_info.annotation\n\n    if get_origin(field_type) is Union:\n        union_args = get_args(field_type)\n        args = get_args(union_args[0])\n\n        field_info = [item for item in args if isinstance(item, FieldInfo)]\n\n        if not field_info:\n            return None\n\n        # Only return the json_schema_extra attribute. This is used in some\n        # cases to pass addotional information from the serializer in\n        # pyswap.core.fields module to the model_dump.\n        return field_info[0].json_schema_extra\n    return None\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.SerializableMixin.is_annotated_exception_type", "title": "<code>is_annotated_exception_type(field_name)</code>", "text": "<p>Check if the attribute type is Table, Arrays, or ObjectList.</p> <p>For Table, Arrays, and ObjectList types True is returned, ensuring a separate serialization path.</p> <p>First try to assign the json_schema_extra from a Union type. If that fails, assign the json_schema_extra from the field_info. If the json_schema_extra is None, return False.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>def is_annotated_exception_type(self, field_name: str) -&gt; bool:\n    \"\"\"Check if the attribute type is Table, Arrays, or ObjectList.\n\n    For Table, Arrays, and ObjectList types True is returned, ensuring a\n    separate serialization path.\n\n    First try to assign the json_schema_extra from a Union type. If that\n    fails, assign the json_schema_extra from the field_info. If the\n    json_schema_extra is None, return False.\n    \"\"\"\n    # Every special field will have a FieldInfo object\n    field_info = self.model_fields.get(field_name, None)\n\n    if field_info is None:\n        return False\n\n    json_schema_extra = (\n        self.if_is_union_type(field_info) or field_info.json_schema_extra\n    )\n\n    if json_schema_extra is None:\n        return False\n\n    return json_schema_extra.get(\"is_annotated_exception_type\", False)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.SerializableMixin.model_string", "title": "<code>model_string(mode='string', **kwargs)</code>", "text": "<p>Concatenate the formatted strings from dictionary to one string.</p> <p>!!! note:     By alias is True, because in some cases, particularily in the case     of CropSettings, the WOFOST names of parameters in the database were     different from those used in SWAP. This allows those parameters to     be properly matched, yet serialized properly in SWAP input files.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Literal[\"str\", \"list]</code> <p>The output format.</p> <code>'string'</code> <code>kwargs</code> <code>dict</code> <p>Additional keyword arguments passed to <code>model_dump()</code>.</p> <code>{}</code> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>def model_string(\n    self, mode: Literal[\"str\", \"list\"] = \"string\", **kwargs\n) -&gt; str | list[str]:\n    \"\"\"Concatenate the formatted strings from dictionary to one string.\n\n\n    !!! note:\n        By alias is True, because in some cases, particularily in the case\n        of CropSettings, the WOFOST names of parameters in the database were\n        different from those used in SWAP. This allows those parameters to\n        be properly matched, yet serialized properly in SWAP input files.\n\n    Parameters:\n        mode (Literal[\"str\", \"list]): The output format.\n        kwargs (dict): Additional keyword arguments passed to `model_dump()`.\n    \"\"\"\n    dump = self.model_dump(\n        mode=\"json\", exclude_none=True, by_alias=True, **kwargs\n    ).values()\n\n    if mode == \"list\":\n        return list(dump)\n    else:\n        return \"\\n\".join(dump)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.SerializableMixin.serialize_model", "title": "<code>serialize_model(handler)</code>", "text": "<p>Override the default serialization method.</p> <p>In the intermediate step, a dictionary is created with SWAP formatted strings.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>@model_serializer(when_used=\"json\", mode=\"wrap\")\ndef serialize_model(self, handler: Any):\n    \"\"\"Override the default serialization method.\n\n    In the intermediate step, a dictionary is created with SWAP formatted\n    strings.\n    \"\"\"\n    result = {}\n    validated_self = handler(self)\n    for field_name, field_value in validated_self.items():\n        if self.is_annotated_exception_type(field_name):\n            result[field_name] = field_value\n        else:\n            result[field_name] = f\"{field_name.upper()} = {field_value}\"\n    return result\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.WOFOSTUpdateMixin", "title": "<code>WOFOSTUpdateMixin</code>", "text": "<p>Interface for the WOFOST crop parameters database for pySWAP.</p> <p>This mixin should be inherited by classes that share parameters with the WOFOST crop database.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>class WOFOSTUpdateMixin:\n    \"\"\"Interface for the WOFOST crop parameters database for pySWAP.\n\n    This mixin should be inherited by classes that share parameters with the\n    WOFOST crop database.\n    \"\"\"\n\n    def update_from_wofost(self) -&gt; None:\n        \"\"\"Update the model with the WOFOST variety settings.\"\"\"\n        from pyswap.utils.old_swap import create_array_objects\n\n        # parameters attribute returns a dictionary with the key-value pairs and\n        # tables as list of lists. Before updating, the tables should be\n        # created.\n        if not hasattr(self, \"wofost_variety\"):\n            msg = \"The model does not have the WOFOST variety settings.\"\n            raise AttributeError(msg)\n\n        variety_params = self.wofost_variety.parameters\n        new_arrays = create_array_objects(variety_params)\n        new = variety_params | new_arrays\n        self.update(new, inplace=True)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.WOFOSTUpdateMixin.update_from_wofost", "title": "<code>update_from_wofost()</code>", "text": "<p>Update the model with the WOFOST variety settings.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>def update_from_wofost(self) -&gt; None:\n    \"\"\"Update the model with the WOFOST variety settings.\"\"\"\n    from pyswap.utils.old_swap import create_array_objects\n\n    # parameters attribute returns a dictionary with the key-value pairs and\n    # tables as list of lists. Before updating, the tables should be\n    # created.\n    if not hasattr(self, \"wofost_variety\"):\n        msg = \"The model does not have the WOFOST variety settings.\"\n        raise AttributeError(msg)\n\n    variety_params = self.wofost_variety.parameters\n    new_arrays = create_array_objects(variety_params)\n    new = variety_params | new_arrays\n    self.update(new, inplace=True)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.YAMLValidatorMixin", "title": "<code>YAMLValidatorMixin</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>A mixin class that provides YAML-based validation for models.</p> <p>Initially, pySWAP had model serializers on each model component class which had a number of assertions to validate the parameters (i.e., require parameters rlwtb and wrtmax if swrd = 3). This created chaos in the code, and since none of it was used by inspection tools anyways, it was decided to leave the validation logic in the code and move the rules to a separate YAML file.</p> <p>Methods:</p> Name Description <code>validate_parameters</code> <p>Validate parameters against required rules.</p> <code>validate_with_yaml</code> <p>Pydantic validator executing validation logic.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>class YAMLValidatorMixin(BaseModel):\n    \"\"\"A mixin class that provides YAML-based validation for models.\n\n    Initially, pySWAP had model serializers on each model component class which\n    had a number of assertions to validate the parameters (i.e., require\n    parameters rlwtb and wrtmax if swrd = 3). This created chaos\n    in the code, and since none of it was used by inspection tools anyways, it\n    was decided to leave the validation logic in the code and move the rules to\n    a separate YAML file.\n\n    Methods:\n        validate_parameters: Validate parameters against required rules.\n        validate_with_yaml: Pydantic validator executing validation logic.\n    \"\"\"\n\n    _validation: bool = PrivateAttr(default=False)\n\n    @staticmethod\n    def validate_parameters(\n        switch_name: str, switch_value: str, params: dict, rules: dict\n    ):\n        \"\"\"Validate parameters against required rules.\n\n        This method reads the rules for the model from the YAML file and checks\n        if the required parameters are present. If not, it raises a ValueError.\n\n        ```yaml\n        SaltStress: # &lt;--- Model name\n            swsalinity:  # &lt;--- Switch name (switch_name)\n                1:  # &lt;--- Switch value (switch_value)\n                - saltmax  # &lt;---| Required parameters\n                - saltslope  # &lt;--|\n                2:\n                - salthead\n        ```\n\n        Parameters:\n            switch_name (str): The name of the switch (e.g., 'swcf').\n            switch_value (Any): The value of the switch (e.g., 1 or 2).\n            params (dict): Dictionary of parameters to check.\n            rules (dict): Dictionary with validation rules.\n\n        Raises:\n            ValueError: If required parameters are missing.\n        \"\"\"\n\n        required_params = rules.get(switch_name, {}).get(switch_value, [])\n\n        if not required_params:\n            return  # No rules for this switch value\n\n        missing_params = [\n            param for param in required_params if params.get(param) is None\n        ]\n\n        if missing_params:\n            msg = f\"The following parameters are required for {switch_name}={switch_value}: {', '.join(missing_params)}\"\n            raise ValueError(msg)\n\n    @model_validator(mode=\"after\")\n    def validate_with_yaml(self) -&gt; Self:\n        \"\"\"Pydantic validator executing validation logic.\n\n        All validators defined on a model run on model instantiation. This\n        method makes sure that YAML validation is postponed until the\n        _validation parameter (required on all classes inheriting this mixin) is\n        set to True. This state is done when all the required parameters are\n        presumed to be set, e.g., when the user tries to run the model.\n        \"\"\"\n\n        if not self._validation:\n            return self\n\n        rules = VALIDATIONRULES.get(self.__class__.__name__, {})\n\n        for switch_name in rules:\n            switch_value = getattr(self, switch_name, None)\n            if switch_value is not None:  # Only validate if the switch is set\n                self.validate_parameters(\n                    switch_name, switch_value, self.__dict__, rules\n                )\n\n        self._validation = False\n        return self\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.YAMLValidatorMixin.validate_parameters", "title": "<code>validate_parameters(switch_name, switch_value, params, rules)</code>  <code>staticmethod</code>", "text": "<p>Validate parameters against required rules.</p> <p>This method reads the rules for the model from the YAML file and checks if the required parameters are present. If not, it raises a ValueError.</p> <pre><code>SaltStress: # &lt;--- Model name\n    swsalinity:  # &lt;--- Switch name (switch_name)\n        1:  # &lt;--- Switch value (switch_value)\n        - saltmax  # &lt;---| Required parameters\n        - saltslope  # &lt;--|\n        2:\n        - salthead\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>switch_name</code> <code>str</code> <p>The name of the switch (e.g., 'swcf').</p> required <code>switch_value</code> <code>Any</code> <p>The value of the switch (e.g., 1 or 2).</p> required <code>params</code> <code>dict</code> <p>Dictionary of parameters to check.</p> required <code>rules</code> <code>dict</code> <p>Dictionary with validation rules.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If required parameters are missing.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>@staticmethod\ndef validate_parameters(\n    switch_name: str, switch_value: str, params: dict, rules: dict\n):\n    \"\"\"Validate parameters against required rules.\n\n    This method reads the rules for the model from the YAML file and checks\n    if the required parameters are present. If not, it raises a ValueError.\n\n    ```yaml\n    SaltStress: # &lt;--- Model name\n        swsalinity:  # &lt;--- Switch name (switch_name)\n            1:  # &lt;--- Switch value (switch_value)\n            - saltmax  # &lt;---| Required parameters\n            - saltslope  # &lt;--|\n            2:\n            - salthead\n    ```\n\n    Parameters:\n        switch_name (str): The name of the switch (e.g., 'swcf').\n        switch_value (Any): The value of the switch (e.g., 1 or 2).\n        params (dict): Dictionary of parameters to check.\n        rules (dict): Dictionary with validation rules.\n\n    Raises:\n        ValueError: If required parameters are missing.\n    \"\"\"\n\n    required_params = rules.get(switch_name, {}).get(switch_value, [])\n\n    if not required_params:\n        return  # No rules for this switch value\n\n    missing_params = [\n        param for param in required_params if params.get(param) is None\n    ]\n\n    if missing_params:\n        msg = f\"The following parameters are required for {switch_name}={switch_value}: {', '.join(missing_params)}\"\n        raise ValueError(msg)\n</code></pre>"}, {"location": "reference/developer/#pyswap.utils.mixins.YAMLValidatorMixin.validate_with_yaml", "title": "<code>validate_with_yaml()</code>", "text": "<p>Pydantic validator executing validation logic.</p> <p>All validators defined on a model run on model instantiation. This method makes sure that YAML validation is postponed until the _validation parameter (required on all classes inheriting this mixin) is set to True. This state is done when all the required parameters are presumed to be set, e.g., when the user tries to run the model.</p> Source code in <code>pyswap/utils/mixins.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_with_yaml(self) -&gt; Self:\n    \"\"\"Pydantic validator executing validation logic.\n\n    All validators defined on a model run on model instantiation. This\n    method makes sure that YAML validation is postponed until the\n    _validation parameter (required on all classes inheriting this mixin) is\n    set to True. This state is done when all the required parameters are\n    presumed to be set, e.g., when the user tries to run the model.\n    \"\"\"\n\n    if not self._validation:\n        return self\n\n    rules = VALIDATIONRULES.get(self.__class__.__name__, {})\n\n    for switch_name in rules:\n        switch_value = getattr(self, switch_name, None)\n        if switch_value is not None:  # Only validate if the switch is set\n            self.validate_parameters(\n                switch_name, switch_value, self.__dict__, rules\n            )\n\n    self._validation = False\n    return self\n</code></pre>"}, {"location": "reference/developer/#validation_and_serialization", "title": "Validation and serialization", "text": "<p>Functions to parse SWAP formatted ascii files into pySWAP objects.</p> <p>pySWAP has the ability to interact directly with the classic SWAP input files. Parsers defined in this module are used for the custom field validators defined in the <code>pyswap.core.fields</code> module. These functions convert (or deserialize) the SWAP formatted ascii files into pySWAP objects.</p> Parsers in this module <p>parse_string_list: Convert a SWAP string list to a list of strings. parse_quoted_string: Make sure to remove unnecessary quotes from source. parse_day_month: Convert a string to a date object with just the day and     month.</p> <p>Functions to fine tune the serializatino of pySWAP objects to SWAP formatted ASCII.</p> <p>More complex serialization logic which would be unwieldy to implement directly in the Annotated field definitions (pyswap.core.fields module) as lambda functions are defined in the serializers module (pyswap.core.serializers). These are functions that convert objects to strings in the valid SWAP format.</p> Serializers in this module <p>serialize_table: Convert a DataFrame to a string. serialize_arrays: Convert a DataFrame to a string without headers and     newline in front. serialize_csv_table: Convert a DataFrame to a string in CSV format. serialize_object_list: Convert a list of objects to a string. serialize_day_month: Convert a date object to a string with just the day     and month.</p>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_day_month", "title": "<code>parse_day_month(value)</code>", "text": "<p>Convert a string to a date object with just the day and month.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_day_month(value: str | date) -&gt; date:\n    \"\"\"Convert a string to a date object with just the day and month.\"\"\"\n    msg = \"Invalid day-month format. Expected 'DD MM'\"\n    if isinstance(value, date):\n        return value\n    if isinstance(value, str):\n        try:\n            day, month = map(int, value.split())\n            return date(date.today().year, month, day)\n        except (ValueError, TypeError):\n            raise ValueError(msg) from None\n    raise ValueError(msg)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_decimal", "title": "<code>parse_decimal(value)</code>", "text": "<p>remove fortan style decimal point.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_decimal(value: str) -&gt; str:\n    \"\"\"remove fortan style decimal point.\"\"\"\n    if isinstance(value, str):\n        value = value.lower().replace(\"d\", \"e\")\n    return float(value)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_float_list", "title": "<code>parse_float_list(value)</code>", "text": "<p>Convert a SWAP string list to a list of strings.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_float_list(value: str) -&gt; str:\n    \"\"\"Convert a SWAP string list to a list of strings.\"\"\"\n    if isinstance(value, list):\n        return value\n    if isinstance(value, str):\n        return value.strip(\"'\").split(\" \")\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_int_list", "title": "<code>parse_int_list(value)</code>", "text": "<p>Convert a SWAP string list to a list of strings.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_int_list(value: str) -&gt; str:\n    \"\"\"Convert a SWAP string list to a list of strings.\"\"\"\n    if isinstance(value, list):\n        return value\n    if isinstance(value, str):\n        return value.strip(\"'\").split(\" \")\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_quoted_string", "title": "<code>parse_quoted_string(value)</code>", "text": "<p>Make sure to remove unnecessary quotes from source.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_quoted_string(value: str) -&gt; str:\n    \"\"\"Make sure to remove unnecessary quotes from source.\"\"\"\n    if isinstance(value, str):\n        return value.strip(\"'\")\n    msg = \"Invalid type. Expected string\"\n    raise ValueError(msg)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.parsers.parse_string_list", "title": "<code>parse_string_list(value)</code>", "text": "<p>Convert a SWAP string list to a list of strings.</p> Source code in <code>pyswap/core/parsers.py</code> <pre><code>def parse_string_list(value: str) -&gt; str:\n    \"\"\"Convert a SWAP string list to a list of strings.\"\"\"\n    if isinstance(value, list):\n        return value\n    if isinstance(value, str):\n        return value.strip(\"'\").split(\",\")\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.serializers.serialize_arrays", "title": "<code>serialize_arrays(table)</code>", "text": "<p>Convert the DataFrame to a string without headers and newline in front.</p> <pre><code>Arguments:\n    table: The DataFrame to be serialized.\n\nResult:\n    &gt;&gt;&gt; 'ARRAYS =\n</code></pre> <p>1 4 2 5 3 6</p> <p>'</p> Source code in <code>pyswap/core/serializers.py</code> <pre><code>def serialize_arrays(table: DataFrame) -&gt; str:\n    \"\"\"Convert the DataFrame to a string without headers and newline in front.\n\n    Arguments:\n        table: The DataFrame to be serialized.\n\n    Result:\n        &gt;&gt;&gt; 'ARRAYS = \\n1 4\\n2 5\\n3 6\\n\\n'\n    \"\"\"\n    return f\"\\n{table.to_string(index=False, header=False)}\\n\"\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.serializers.serialize_csv_table", "title": "<code>serialize_csv_table(table)</code>", "text": "<p>Convert the DataFrame to a string in CSV format.</p> <p>This serializer is specifically tailored to output the data in the format of the ,met files used in SWAP.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>DataFrame</code> <p>The DataFrame to be serialized.</p> required Source code in <code>pyswap/core/serializers.py</code> <pre><code>def serialize_csv_table(table: DataFrame) -&gt; str:\n    \"\"\"Convert the DataFrame to a string in CSV format.\n\n    This serializer is specifically tailored to output the data in the\n    format of the ,met files used in SWAP.\n\n    Arguments:\n        table: The DataFrame to be serialized.\n    \"\"\"\n    if isinstance(table.index, DatetimeIndex):\n        table[\"DD\"] = table.index.day\n        table[\"MM\"] = table.index.month\n        table[\"YYYY\"] = table.index.year\n        required_order = [\n            \"Station\",\n            \"DD\",\n            \"MM\",\n            \"YYYY\",\n            \"RAD\",\n            \"Tmin\",\n            \"Tmax\",\n            \"HUM\",\n            \"WIND\",\n            \"RAIN\",\n            \"ETref\",\n            \"WET\",\n        ]\n        table = table[required_order]\n\n    table.loc[:, \"Station\"] = table.Station.apply(\n        lambda x: f\"'{x}'\" if not str(x).startswith(\"'\") else x\n    )\n    return table.to_csv(index=False, lineterminator=\"\\n\")\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.serializers.serialize_day_month", "title": "<code>serialize_day_month(value)</code>", "text": "<p>Serialize a date object to a string with just the day and month.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>date</code> <p>The date object to be serialized.</p> required Result <p>'01 01'</p> Source code in <code>pyswap/core/serializers.py</code> <pre><code>def serialize_day_month(value: date) -&gt; str:\n    \"\"\"Serialize a date object to a string with just the day and month.\n\n    Arguments:\n        value: The date object to be serialized.\n\n    Result:\n        &gt;&gt;&gt; '01 01'\n    \"\"\"\n    return value.strftime(\"%d %m\")\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.serializers.serialize_table", "title": "<code>serialize_table(table)</code>", "text": "<p>Convert the DataFrame to a string.</p> <pre><code>Arguments:\n    table: The DataFrame to be serialized.\n\nResult:\n    &gt;&gt;&gt; ' A  B\n</code></pre> <p>1  4  2  5  3  6 '</p> Source code in <code>pyswap/core/serializers.py</code> <pre><code>def serialize_table(table: DataFrame) -&gt; str:\n    \"\"\"Convert the DataFrame to a string.\n\n    Arguments:\n        table: The DataFrame to be serialized.\n\n    Result:\n        &gt;&gt;&gt; ' A  B\\n 1  4\\n 2  5\\n 3  6\\n'\n    \"\"\"\n    return f\"{table.to_string(index=False)}\\n\"\n</code></pre>"}, {"location": "reference/developer/#io", "title": "I/O", "text": "<p>Interact with the filesystem</p> <p>All functions that interact with the filesystem are located in this subpackage.</p> <p>Modules:</p> Name Description <code>io_ascii</code> <p>Functions to interact with ASCII files.</p> <code>io_yaml</code> <p>Functions to interact with YAML files.</p> <code>classic_swap</code> <p>Functions to load with classic SWAP input files.</p>"}, {"location": "reference/developer/#pyswap.core.io.io_ascii", "title": "<code>io_ascii</code>", "text": "<p>Interact with ASCII files.</p> <p>Functions:</p> Name Description <code>open_ascii</code> <p>Open an ASCII file and detect its encoding.</p> <code>save_ascii</code> <p>Save a string to an ASCII file.</p>"}, {"location": "reference/developer/#pyswap.core.io.io_ascii.open_ascii", "title": "<code>open_ascii(file_path)</code>", "text": "<p>Open file and detect encoding.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the file to be opened.</p> required Source code in <code>pyswap/core/io/io_ascii.py</code> <pre><code>def open_ascii(file_path: Path) -&gt; str:\n    \"\"\"Open file and detect encoding.\n\n    Arguments:\n        file_path (str): Path to the file to be opened.\n    \"\"\"\n    with open(file_path, \"rb\") as f:\n        raw_data = f.read()\n    encoding = chardet.detect(raw_data)[\"encoding\"]\n\n    return raw_data.decode(encoding)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.io.io_ascii.save_ascii", "title": "<code>save_ascii(string, fname, path, mode='w', extension=None, encoding='ascii')</code>", "text": "<p>Saves a string to a file with a given extension.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to be saved to a file.</p> required <code>extension</code> <code>str</code> <p>The extension that the file should have (e.g. 'txt', 'csv', etc.).</p> <code>None</code> <code>fname</code> <code>str</code> <p>The name of the file.</p> required <code>path</code> <code>str</code> <p>The path where the file should be saved.</p> required <code>mode</code> <code>str</code> <p>The mode in which the file should be opened (e.g. 'w' for write, 'a' for append, etc.).</p> <code>'w'</code> <code>encoding</code> <code>str</code> <p>The encoding to use for the file (default is 'ascii').</p> <code>'ascii'</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>pyswap/core/io/io_ascii.py</code> <pre><code>def save_ascii(\n    string: str,\n    fname: str,\n    path: str,\n    mode: str = \"w\",\n    extension: str | None = None,\n    encoding: str = \"ascii\",\n) -&gt; None:\n    \"\"\"\n    Saves a string to a file with a given extension.\n\n    Parameters:\n        string (str): The string to be saved to a file.\n        extension (str): The extension that the file should have (e.g. 'txt', 'csv', etc.).\n        fname (str): The name of the file.\n        path (str): The path where the file should be saved.\n        mode (str): The mode in which the file should be opened (e.g. 'w' for write, 'a' for append, etc.).\n        encoding (str): The encoding to use for the file (default is 'ascii').\n\n    Returns:\n        None\n    \"\"\"\n\n    if extension is not None:\n        fname = f\"{fname}.{extension}\"\n\n    with open(f\"{path}/{fname}\", f\"{mode}\", encoding=f\"{encoding}\") as f:\n        f.write(string)\n</code></pre>"}, {"location": "reference/developer/#pyswap.core.io.io_yaml", "title": "<code>io_yaml</code>", "text": "<p>Interact with YAML files.</p> <p>Functions:</p> Name Description <code>load_yaml</code> <p>Load a YAML file.</p>"}, {"location": "reference/developer/#pyswap.core.io.io_yaml.load_yaml", "title": "<code>load_yaml(file)</code>", "text": "<p>Load a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>file</code> <code>Path</code> <p>Path to the YAML file.</p> required Source code in <code>pyswap/core/io/io_yaml.py</code> <pre><code>def load_yaml(file: Path) -&gt; dict:\n    \"\"\"Load a YAML file.\n\n    Arguments:\n        file: Path to the YAML file.\n    \"\"\"\n    with open(file) as file:\n        content: dict = yaml.safe_load(file)\n\n    return content\n</code></pre>"}, {"location": "reference/developer/#cli", "title": "CLI", "text": "<p>Command Line Interface for pySWAP.</p> <p>This is a prototype subpackage for potential enhancement of pyswap's functionality. CLI tools can be very helpful in automating some tasks, like loading databases or classic SWAP models.</p> <p>Note</p> <p>At the moment only creating project structure was prototyped. More functionality will be added in the future if users express such need.</p> <p>Example:</p> <pre><code>```cmd\npyswap init --notebook  # creates the project structure with a template .ipynb file.\npyswap init --script  # creates the project structure with a .py file.\n```\n</code></pre> <p>After running the script, you will see the following folder created:</p> <pre><code>test project\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 data\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 main.ipynb\n\u2514\u2500\u2500 scripts\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>The <code>__init__.py files are added to create a module structure. Now when you create a python file in scripts with some helper functions, you can import those functions to the main model script or notebook and use it there.</code></p> <pre><code>from ..scripts.helper_module import helper_function\n\nvar = helper_function(**kwargs)\n</code></pre> <p>By default, a git repository is also created along with the project structure.</p>"}, {"location": "reference/developer/#pyswap.core.cli.cli", "title": "<code>cli</code>", "text": "<p>The cli module is supposed to help in structuring the direcotries of created models and enforce best practices in documenting. It creates a modular structure (with init.py files) what can be helpful when writing scripts. This way, modules from the scripts can be directly imported into the main.py or main.ipynb</p>"}, {"location": "reference/developer/#pyswap.core.cli.cli.init", "title": "<code>init(script=False, notebook=True)</code>", "text": "<p>Prompt the user to enter their information and create a User class.</p> Source code in <code>pyswap/core/cli/cli.py</code> <pre><code>@app.command()\ndef init(script: bool = False, notebook: bool = True):\n    \"\"\"Prompt the user to enter their information and create a User class.\"\"\"\n    attrs = {\n        \"project\": typer.prompt(\"Project name\"),\n        \"swap_ver\": typer.prompt(\"SWAP version used\"),\n        \"author\": typer.prompt(\"Author first/last name\"),\n        \"institution\": typer.prompt(\"Your last institution\"),\n        \"email\": typer.prompt(\"Your email address\"),\n        \"comment\": typer.prompt(\"Any comments?\", default=None),\n    }\n\n    folder_name = typer.prompt(\"Choose a folder name\", default=attrs.get(\"project\"))\n\n    # Defining paths and creating folders.\n    templates_path = Path(__file__).resolve().parent / \"templates\"\n    project_root = Path.cwd() / folder_name\n\n    basic_code_to_write_path = templates_path / \"script.txt\"\n    basic_code_to_write = dict_to_custom_string(attrs)\n\n    folders_to_create = [\"models\", \"scripts\", \"data\"]\n    folders_to_create_paths = [project_root / folder for folder in folders_to_create]\n\n    [folder.mkdir(parents=True, exist_ok=True) for folder in folders_to_create_paths]\n\n    # Dealing with files.\n    copy_readme(templates_path, project_root)\n    create_inits(\n        project_root=project_root,\n        models_dir=folders_to_create_paths[0],\n        scripts_dir=folders_to_create_paths[1],\n    )\n\n    if script:\n        make_script(\n            folders_to_create_paths[0], basic_code_to_write_path, basic_code_to_write\n        )\n\n    if notebook:\n        make_notebook(\n            folders_to_create_paths[0], basic_code_to_write, templates_path, attrs\n        )\n\n    init_git_repo(project_root)\n</code></pre>"}, {"location": "reference/integrations/", "title": "Integrations", "text": ""}, {"location": "reference/integrations/#hdf5", "title": "HDF5", "text": "<p>Interacting with HDF5 files.</p> <p>HDF5 database is meant to store pySWAP models and results in a structured way. The class allows users to save and load multiple models and results to a single .h5 file.</p> <p>Classes:</p> Name Description <code>HDF5</code> <p>Class for interacting with HDF5 files.</p>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5", "title": "<code>HDF5</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Class for interacting with HDF5 files.</p> <p>The pySWAP models and results are stored in the HDF5 file as pickled objects. These are complete representations of the models and results that can be loaded back into memory. They also have some metadata attached to them which are stored as atrributes in the HDF5 file. Users can view the models in an HDF5 file viewer.</p> <p>Attributes:</p> Name Type Description <code>filename</code> <code>str</code> <p>Path to the HDF5 file.</p> <code>models</code> <code>dict</code> <p>Dictionary containing the loaded models.</p> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>class HDF5(BaseModel):\n    \"\"\"Class for interacting with HDF5 files.\n\n    The pySWAP models and results are stored in the HDF5 file as pickled\n    objects. These are complete representations of the models and results\n    that can be loaded back into memory. They also have some metadata attached\n    to them which are stored as atrributes in the HDF5 file. Users can view the\n    models in an HDF5 file viewer.\n\n    Attributes:\n        filename (str): Path to the HDF5 file.\n        models (dict): Dictionary containing the loaded models.\n    \"\"\"\n\n    filename: str\n    models: dict | None = Field(default_factory=dict)\n\n    @computed_field(return_type=dict)\n    def list_projects(self):\n        \"\"\"List all the projects in the HDF5 file.\"\"\"\n        with h5py.File(self.filename, \"r\") as f:\n            projects = list(f.keys())\n        return projects\n\n    @computed_field(return_type=dict)\n    def list_models(self):\n        \"\"\"List all the models in the HDF5 file.\"\"\"\n        with h5py.File(self.filename, \"r\") as f:\n            # Use the visititems method to traverse the file structure\n            models = {project: list(f[project].keys()) for project in f}\n        return models\n\n    @staticmethod\n    def _get_or_create_group(f, group_name):\n        \"\"\"Get a group from an HDF5 file or create it if it does not exist.\"\"\"\n        return f.require_group(group_name)\n\n    def save_model(\n        self,\n        model: \"Model\",\n        result: Union[\"Result\", None] = None,\n        overwrite_datasets: bool = False,\n        overwrite_project: bool = False,\n        mode: Literal[\"python\", \"json\", \"yaml\", \"plain\"] = \"python\",\n    ):\n        \"\"\"\n        Save a model and its results to an HDF5 file.\n\n        Parameters:\n            model (Model): The model to be saved.\n            result (Result, optional): The result to be saved.\n            overwrite_datasets (bool): If True, overwrite datasets if they exist.\n            overwrite_project (bool): If True, overwrite the project if it exists.\n            mode (Literal[\"python\", \"json\", \"yaml\"]): The format in which to save the data.\n                Only 'python' is currently supported.\n\n        Raises:\n            NotImplementedError: If 'json' or 'yaml' modes are selected.\n        \"\"\"\n        with h5py.File(self.filename, \"a\") as f:\n            # Handle project overwriting\n            if overwrite_project:\n                self._overwrite_project(f, model.metadata.project)\n\n            # Create or retrieve project group\n            project_group = self._get_or_create_group(f, model.metadata.project)\n            self._update_attributes(project_group, model.metadata.__dict__)\n\n            # Create or retrieve model group\n            model_group = self._get_or_create_group(project_group, model.version)\n\n            # Handle dataset overwriting\n            if overwrite_datasets:\n                self._overwrite_datasets(model_group)\n\n            # Save data based on the mode\n            if mode == \"python\":\n                self._save_pickled(model_group, \"input\", model)\n                if result:\n                    self._save_pickled(model_group, \"output\", result)\n            else:\n                raise NotImplementedError(f\"Mode '{mode}' is not yet implemented.\")\n\n    def load(\n        self,\n        project: str,\n        model: str | None = None,\n        load_results: bool = False,\n        mode: Literal[\"python\", \"json\", \"yaml\"] = \"python\",\n    ) -&gt; dict[str, tuple[\"Model\", Union[\"Result\", None]]]:\n        \"\"\"\n        Load a single model or all models within a specific project.\n\n        Parameters:\n            project (str): The project name.\n            model (str, optional): The model name. If None, loads all models in the project.\n            load_results (bool): Whether to load results along with the model.\n            mode (Literal[\"python\", \"json\", \"yaml\"]): The format in which to load the data.\n                Only 'python' is currently supported.\n\n        Returns:\n            dict[str, tuple[Model, Union[Result, None]]]: A dictionary of loaded models and their results.\n\n        Raises:\n            NotImplementedError: If 'json' or 'yaml' modes are selected.\n        \"\"\"\n        loaded_models = {}\n\n        with h5py.File(self.filename, \"r\") as f:\n            # Validate that the project exists\n            if project not in f:\n                msg = f\"Project '{project}' does not exist in the HDF5 file.\"\n                raise KeyError(msg)\n\n            # Get all models in the project\n            all_models = self.list_models[project]\n\n            if mode == \"python\":\n                # Load all models if no specific model is provided\n                if model is None:\n                    for item in all_models:\n                        loaded_models[item] = self._load_pickled(\n                            group=f[project], name=item, load_results=load_results\n                        )\n                else:\n                    # Validate that the specific model exists\n                    if model not in all_models:\n                        msg = f\"Model '{model}' does not exist in project '{project}'.\"\n                        raise KeyError(msg)\n                    loaded_models[model] = self._load_pickled(\n                        group=f[project], name=model, load_results=load_results\n                    )\n            else:\n                msg = f\"Mode '{mode}' is not yet implemented.\"\n                raise NotImplementedError(msg)\n\n        # Update internal models dictionary and return loaded models\n        self.models.update(loaded_models)\n        return loaded_models\n\n    def delete(self, project: str, model: str | None = None):\n        \"\"\"Delete a single model or all models within a specific project.\n\n        !!! warning\n\n            Use this method only for small deletions, as for now it does not\n            perform repacking of the HDF5 file (the objects are deleted but the\n            disk space is not freed). For large deletions, consider creating a\n            new HDF5 file and saving only the models you want to keep.\n\n        Parameters:\n            project (str): The project name.\n            model (str): The model name.\n        \"\"\"\n        with h5py.File(self.filename, \"a\") as f:\n            if model is None:\n                try:\n                    del f[project]\n                except KeyError:\n                    logger.warning(f\"Project {project} does not exist.\")\n            else:\n                try:\n                    del f[project][model]\n                except KeyError:\n                    logger.warning(\n                        f\"Model {model} does not exist in project {project}.\"\n                    )\n\n    def _overwrite_datasets(self, group):\n        \"\"\"Delete all datasets within a group.\"\"\"\n        for key in list(group.keys()):\n            try:\n                del group[key]\n                logger.info(f\"Deleted dataset {key} in group {group.name}\")\n            except KeyError:\n                logger.warning(f\"Failed to delete dataset {key} in group {group.name}\")\n\n    def _overwrite_project(self, file, project_name):\n        \"\"\"Delete a project group from the HDF5 file.\"\"\"\n        try:\n            del file[project_name]\n            logger.info(f\"Deleted project {project_name}\")\n        except KeyError:\n            logger.warning(f\"Project {project_name} does not exist.\")\n\n    def _save_plain_string(self, group, name, data):\n        \"\"\"Save data as a plain string dataset.\"\"\"\n\n    def _save_pickled(self, group, name, data):\n        \"\"\"Save data as a pickled dataset.\"\"\"\n        try:\n            pickle_data = pickle.dumps(data)\n            group.create_dataset(name, data=np.void(pickle_data))\n            logger.info(f\"Saved {name} to {group.name}\")\n        except ValueError as e:\n            logger.warning(\n                f\"Failed to create dataset {name} in {group.name}. Error: {e}\"\n            )\n\n    def _update_attributes(self, group, attributes):\n        \"\"\"Update attributes of an HDF5 group.\"\"\"\n        sanitized_attrs = {k: v for k, v in attributes.items() if v is not None}\n        group.attrs.update(sanitized_attrs)\n\n    def _load_pickled(\n        self, group: h5py.Group, name: str, load_results: bool\n    ) -&gt; tuple[\"Model\", Union[\"Result\", None]]:\n        \"\"\"\n        Load a pickled model and optionally its results from an HDF5 group.\n\n        Parameters:\n            group (h5py.Group): The HDF5 group containing the model data.\n            name (str): The name of the model to load.\n            load_results (bool): Whether to load results along with the model.\n\n        Returns:\n            tuple[Model, Union[Result, None]]: The loaded model and its results (if applicable).\n        \"\"\"\n        try:\n            # Load pickled input data\n            pickle_in = group[name][\"input\"][()].tobytes()\n            model: Model = pickle.loads(pickle_in)\n\n            # Optionally load pickled output data\n            result: Result = None\n\n            if load_results and \"output\" in group[name]:\n                pickle_out = group[name][\"output\"][()].tobytes()\n                result = pickle.loads(pickle_out)\n\n            logger.info(f\"Loaded model '{name}' from group '{group.name}'.\")\n            return model, result\n        except Exception:\n            logger.exception(f\"Failed to load model '{name}' from group '{group.name}'\")\n            return None, None\n</code></pre>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5.delete", "title": "<code>delete(project, model=None)</code>", "text": "<p>Delete a single model or all models within a specific project.</p> <p>Warning</p> <p>Use this method only for small deletions, as for now it does not perform repacking of the HDF5 file (the objects are deleted but the disk space is not freed). For large deletions, consider creating a new HDF5 file and saving only the models you want to keep.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>The project name.</p> required <code>model</code> <code>str</code> <p>The model name.</p> <code>None</code> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>def delete(self, project: str, model: str | None = None):\n    \"\"\"Delete a single model or all models within a specific project.\n\n    !!! warning\n\n        Use this method only for small deletions, as for now it does not\n        perform repacking of the HDF5 file (the objects are deleted but the\n        disk space is not freed). For large deletions, consider creating a\n        new HDF5 file and saving only the models you want to keep.\n\n    Parameters:\n        project (str): The project name.\n        model (str): The model name.\n    \"\"\"\n    with h5py.File(self.filename, \"a\") as f:\n        if model is None:\n            try:\n                del f[project]\n            except KeyError:\n                logger.warning(f\"Project {project} does not exist.\")\n        else:\n            try:\n                del f[project][model]\n            except KeyError:\n                logger.warning(\n                    f\"Model {model} does not exist in project {project}.\"\n                )\n</code></pre>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5.list_models", "title": "<code>list_models()</code>", "text": "<p>List all the models in the HDF5 file.</p> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>@computed_field(return_type=dict)\ndef list_models(self):\n    \"\"\"List all the models in the HDF5 file.\"\"\"\n    with h5py.File(self.filename, \"r\") as f:\n        # Use the visititems method to traverse the file structure\n        models = {project: list(f[project].keys()) for project in f}\n    return models\n</code></pre>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5.list_projects", "title": "<code>list_projects()</code>", "text": "<p>List all the projects in the HDF5 file.</p> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>@computed_field(return_type=dict)\ndef list_projects(self):\n    \"\"\"List all the projects in the HDF5 file.\"\"\"\n    with h5py.File(self.filename, \"r\") as f:\n        projects = list(f.keys())\n    return projects\n</code></pre>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5.load", "title": "<code>load(project, model=None, load_results=False, mode='python')</code>", "text": "<p>Load a single model or all models within a specific project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>str</code> <p>The project name.</p> required <code>model</code> <code>str</code> <p>The model name. If None, loads all models in the project.</p> <code>None</code> <code>load_results</code> <code>bool</code> <p>Whether to load results along with the model.</p> <code>False</code> <code>mode</code> <code>Literal['python', 'json', 'yaml']</code> <p>The format in which to load the data. Only 'python' is currently supported.</p> <code>'python'</code> <p>Returns:</p> Type Description <code>dict[str, tuple[Model, Union[Result, None]]]</code> <p>dict[str, tuple[Model, Union[Result, None]]]: A dictionary of loaded models and their results.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If 'json' or 'yaml' modes are selected.</p> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>def load(\n    self,\n    project: str,\n    model: str | None = None,\n    load_results: bool = False,\n    mode: Literal[\"python\", \"json\", \"yaml\"] = \"python\",\n) -&gt; dict[str, tuple[\"Model\", Union[\"Result\", None]]]:\n    \"\"\"\n    Load a single model or all models within a specific project.\n\n    Parameters:\n        project (str): The project name.\n        model (str, optional): The model name. If None, loads all models in the project.\n        load_results (bool): Whether to load results along with the model.\n        mode (Literal[\"python\", \"json\", \"yaml\"]): The format in which to load the data.\n            Only 'python' is currently supported.\n\n    Returns:\n        dict[str, tuple[Model, Union[Result, None]]]: A dictionary of loaded models and their results.\n\n    Raises:\n        NotImplementedError: If 'json' or 'yaml' modes are selected.\n    \"\"\"\n    loaded_models = {}\n\n    with h5py.File(self.filename, \"r\") as f:\n        # Validate that the project exists\n        if project not in f:\n            msg = f\"Project '{project}' does not exist in the HDF5 file.\"\n            raise KeyError(msg)\n\n        # Get all models in the project\n        all_models = self.list_models[project]\n\n        if mode == \"python\":\n            # Load all models if no specific model is provided\n            if model is None:\n                for item in all_models:\n                    loaded_models[item] = self._load_pickled(\n                        group=f[project], name=item, load_results=load_results\n                    )\n            else:\n                # Validate that the specific model exists\n                if model not in all_models:\n                    msg = f\"Model '{model}' does not exist in project '{project}'.\"\n                    raise KeyError(msg)\n                loaded_models[model] = self._load_pickled(\n                    group=f[project], name=model, load_results=load_results\n                )\n        else:\n            msg = f\"Mode '{mode}' is not yet implemented.\"\n            raise NotImplementedError(msg)\n\n    # Update internal models dictionary and return loaded models\n    self.models.update(loaded_models)\n    return loaded_models\n</code></pre>"}, {"location": "reference/integrations/#pyswap.db.hdf5.HDF5.save_model", "title": "<code>save_model(model, result=None, overwrite_datasets=False, overwrite_project=False, mode='python')</code>", "text": "<p>Save a model and its results to an HDF5 file.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Model</code> <p>The model to be saved.</p> required <code>result</code> <code>Result</code> <p>The result to be saved.</p> <code>None</code> <code>overwrite_datasets</code> <code>bool</code> <p>If True, overwrite datasets if they exist.</p> <code>False</code> <code>overwrite_project</code> <code>bool</code> <p>If True, overwrite the project if it exists.</p> <code>False</code> <code>mode</code> <code>Literal['python', 'json', 'yaml']</code> <p>The format in which to save the data. Only 'python' is currently supported.</p> <code>'python'</code> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If 'json' or 'yaml' modes are selected.</p> Source code in <code>pyswap/db/hdf5.py</code> <pre><code>def save_model(\n    self,\n    model: \"Model\",\n    result: Union[\"Result\", None] = None,\n    overwrite_datasets: bool = False,\n    overwrite_project: bool = False,\n    mode: Literal[\"python\", \"json\", \"yaml\", \"plain\"] = \"python\",\n):\n    \"\"\"\n    Save a model and its results to an HDF5 file.\n\n    Parameters:\n        model (Model): The model to be saved.\n        result (Result, optional): The result to be saved.\n        overwrite_datasets (bool): If True, overwrite datasets if they exist.\n        overwrite_project (bool): If True, overwrite the project if it exists.\n        mode (Literal[\"python\", \"json\", \"yaml\"]): The format in which to save the data.\n            Only 'python' is currently supported.\n\n    Raises:\n        NotImplementedError: If 'json' or 'yaml' modes are selected.\n    \"\"\"\n    with h5py.File(self.filename, \"a\") as f:\n        # Handle project overwriting\n        if overwrite_project:\n            self._overwrite_project(f, model.metadata.project)\n\n        # Create or retrieve project group\n        project_group = self._get_or_create_group(f, model.metadata.project)\n        self._update_attributes(project_group, model.metadata.__dict__)\n\n        # Create or retrieve model group\n        model_group = self._get_or_create_group(project_group, model.version)\n\n        # Handle dataset overwriting\n        if overwrite_datasets:\n            self._overwrite_datasets(model_group)\n\n        # Save data based on the mode\n        if mode == \"python\":\n            self._save_pickled(model_group, \"input\", model)\n            if result:\n                self._save_pickled(model_group, \"output\", result)\n        else:\n            raise NotImplementedError(f\"Mode '{mode}' is not yet implemented.\")\n</code></pre>"}, {"location": "reference/integrations/#knmi", "title": "KNMI", "text": "<p>Dutch Meteorological Institute</p>"}, {"location": "reference/model-components/", "title": "Model components", "text": "<p>Each SWAP model is composed of components like lego blocks. This module defines all the components that can be used to build a SWAP model.</p>"}, {"location": "reference/model-components/#general_settings", "title": "General settings", "text": "<p>Model metadata.</p> <p>Classes:</p> Name Description <code>Metadata</code> <p>Metadata of a SWAP model.</p> <p>General settings for the simulation and settings for the Richards' equation.</p> <p>Classes:</p> Name Description <code>GeneralSettings</code> <p>General settings of the simulation.</p> <code>RichardsSettings</code> <p>Settings for the Richards' equation.</p>"}, {"location": "reference/model-components/#pyswap.components.metadata.Metadata", "title": "<code>Metadata</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code></p> <p>Metadata of a SWAP model.</p> <p>Metadata is intended more as a modelling exercise metadata than a model metadata. You should create one Metadata object at the beginning of your model script and pass it to all Model objects you create in between. It is used to describe model runs if they are stored in a database. Only <code>project</code> is passed to the swap file.</p> <p>Attributes:</p> Name Type Description <code>author</code> <code>str</code> <p>Author of the model.</p> <code>institution</code> <code>str</code> <p>Institution of the author.</p> <code>email</code> <code>str</code> <p>Email of the author.</p> <code>project</code> <code>str</code> <p>Name of the project.</p> <code>swap_ver</code> <code>str</code> <p>Version of SWAP used.</p> <code>comment</code> <code>Optional[str]</code> <p>Comment about the model.</p> Source code in <code>pyswap/components/metadata.py</code> <pre><code>class Metadata(PySWAPBaseModel, SerializableMixin):\n    \"\"\"Metadata of a SWAP model.\n\n    Metadata is intended more as a modelling exercise metadata than a model\n    metadata. You should create one Metadata object at the beginning of your\n    model script and pass it to all Model objects you create in between. It is\n    used to describe model runs if they are stored in a database. Only `project`\n    is passed to the swap file.\n\n    Attributes:\n        author (str): Author of the model.\n        institution (str): Institution of the author.\n        email (str): Email of the author.\n        project (str): Name of the project.\n        swap_ver (str): Version of SWAP used.\n        comment (Optional[str]): Comment about the model.\n    \"\"\"\n\n    author: String = Field(exclude=True)\n    institution: String = Field(exclude=True)\n    email: String = Field(exclude=True)\n    project: String\n    swap_ver: String = Field(exclude=True)\n    comment: String | None = Field(default=None, exclude=True)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.simsettings.GeneralSettings", "title": "<code>GeneralSettings</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>General settings of the simulation.</p> <p>Attributes:</p> Name Type Description <code>pathwork</code> <code>str</code> <p>Path to the working directory. Immutable attribute.</p> <code>pathatm</code> <code>str</code> <p>Path to folder with weather files. Immutable attribute.</p> <code>pathcrop</code> <code>str</code> <p>Path to folder with crop files. Immutable attribute.</p> <code>pathdrain</code> <code>str</code> <p>Path to folder with drainage files. Immutable attribute.</p> <code>swscre</code> <code>Literal[0, 1, 3]</code> <p>Switch, display progression of simulation run to screen</p> <code>swerror</code> <code>Literal[0, 1]</code> <p>Switch for printing errors to screen</p> <code>tstart</code> <code>d</code> <p>Start date of simulation run, give day-month-year</p> <code>tend</code> <code>d</code> <p>End date of simulation run, give day-month-year</p> <code>nprintday</code> <code>int</code> <p>Number of output times during a day</p> <code>swmonth</code> <code>Literal[0, 1]</code> <p>Switch, output each month</p> <code>swyrvar</code> <code>Literal[0, 1]</code> <p>Output times for overall water and solute balances in .BAL and .BLC file: choose output at a fixed date each year or at different dates</p> <code>period</code> <code>Optional[int]</code> <p>Fixed output interval</p> <code>swres</code> <code>Optional[Literal[0, 1]]</code> <p>Switch, reset output interval counter each year</p> <code>swodat</code> <code>Optional[Literal[0, 1]]</code> <p>Switch, extra output dates are given in table below</p> <code>outdatin</code> <code>Optional[DateList]</code> <p>list of specific dates</p> <code>datefix</code> <code>Optional[DayMonth]</code> <p>fixed date for output</p> <code>outdat</code> <code>Optional[DateList]</code> <p>specify all output dates</p> <code>outfil</code> <code>str</code> <p>Generic file name of output files. Immutable attribute.</p> <code>swheader</code> <code>Literal[0, 1]</code> <p>Print header at the start of each balance period</p> <code>extensions</code> <code>list</code> <p>list of file extensions SWAP should return. Available options are: [\"wba\", \"end\", \"vap\", \"bal\", \"blc\", \"sba\", \"ate\", \"bma\", \"drf\", \"swb\", \"ini\", \"inc\", \"crp\", \"str\", \"irg\", \"csv\", \"csv_tz\"]</p> <code>inlist_csv</code> <code>Optional[StringList]</code> <p>list of</p> <code>inlist_csv_tz</code> <code>Optional[StringList]</code> <p>list of variables for the csv tz output</p> <code>swafo</code> <code>Literal[0, 1, 2]</code> <p>Switch, output file with formatted hydrological data</p> <code>swaun</code> <code>Literal[0, 1, 2]</code> <p>Switch, output file with unformatted hydrological data</p> <code>critdevmasbal</code> <code>Optional[float]</code> <p>Critical Deviation in water balance during PERIOD</p> <code>swdiscrvert</code> <code>Literal[0, 1]</code> <p>Switch to convert vertical discretization</p> <code>numnodnew</code> <code>Optional[int]</code> <p>New number of nodes</p> <code>dznew</code> <code>Optional[FloatList]</code> <p>Thickness of compartments</p> Source code in <code>pyswap/components/simsettings.py</code> <pre><code>class GeneralSettings(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"General settings of the simulation.\n\n    Attributes:\n        pathwork (str): Path to the working directory. Immutable attribute.\n        pathatm (str): Path to folder with weather files. Immutable attribute.\n        pathcrop (str): Path to folder with crop files. Immutable attribute.\n        pathdrain (str): Path to folder with drainage files. Immutable attribute.\n        swscre (Literal[0, 1, 3]): Switch, display progression of simulation\n            run to screen\n        swerror (Literal[0, 1]): Switch for printing errors to screen\n        tstart (d): Start date of simulation run, give day-month-year\n        tend (d): End date of simulation run, give day-month-year\n        nprintday (int): Number of output times during a day\n        swmonth (Literal[0, 1]): Switch, output each month\n        swyrvar (Literal[0, 1]): Output times for overall water and solute\n            balances in *.BAL and *.BLC file: choose output at a fixed date\n            each year or at different dates\n        period (Optional[int]): Fixed output interval\n        swres (Optional[Literal[0, 1]]): Switch, reset output interval counter\n            each year\n        swodat (Optional[Literal[0, 1]]): Switch, extra output dates are given\n            in table below\n        outdatin (Optional[DateList]): list of specific dates\n        datefix (Optional[DayMonth]): fixed date for output\n        outdat (Optional[DateList]): specify all output dates\n        outfil (str): Generic file name of output files. Immutable attribute.\n        swheader (Literal[0, 1]): Print header at the start of each\n            balance period\n        extensions (list): list of file extensions SWAP should return.\n            Available options are: [\"wba\", \"end\", \"vap\", \"bal\", \"blc\", \"sba\", \"ate\",\n            \"bma\", \"drf\", \"swb\", \"ini\", \"inc\", \"crp\", \"str\", \"irg\", \"csv\", \"csv_tz\"]\n        inlist_csv (Optional[StringList]): list of\n        inlist_csv_tz (Optional[StringList]): list of variables for\n            the csv tz output\n        swafo (Literal[0, 1, 2]): Switch, output file with\n            formatted hydrological data\n        swaun (Literal[0, 1, 2]): Switch, output file with\n            unformatted hydrological data\n        critdevmasbal (Optional[float]): Critical Deviation in\n            water balance during PERIOD\n        swdiscrvert (Literal[0, 1]): Switch to convert vertical discretization\n        numnodnew (Optional[int]): New number of nodes\n        dznew (Optional[FloatList]): Thickness of compartments\n    \"\"\"\n\n    model_config = _ConfigDict(\n        validate_assignment=True, use_enum_values=True, extra=\"ignore\"\n    )\n    _all_extensions: _ClassVar[list[str]] = _EXTENSIONS\n    extensions: list[str] = _Field(default_factory=list, exclude=True)\n    exts: _Subsection[_ExtensionMixin] | None = None\n\n    pathwork: _String = _Field(default=_BASE_PATH, frozen=True)\n    pathatm: _String = _Field(default=_BASE_PATH, frozen=True)\n    pathcrop: _String = _Field(default=_BASE_PATH, frozen=True)\n    pathdrain: _String = _Field(default=_BASE_PATH, frozen=True)\n    swscre: _Literal[0, 1, 3] = 0\n    swerror: _Literal[0, 1] = 0\n\n    tstart: _date | None = None\n    tend: _date | None = None\n\n    nprintday: int = _Field(default=1, ge=1, le=1440)\n    swmonth: _Literal[0, 1] | None = None  # 1\n    swyrvar: _Literal[0, 1] | None = None  # 0\n    period: int | None = _Field(default=None, **_YEARRANGE)\n    swres: _Literal[0, 1] | None = None\n    swodat: _Literal[0, 1] | None = None\n    outdatin: _Arrays | None = None\n    datefix: _DayMonth | None = None\n    outdat: _Arrays | None = None\n\n    outfil: _String = _Field(default=_FNAME_OUT, frozen=True)\n    swheader: _Literal[0, 1] = 0\n\n    inlist_csv: _StringList | None = None\n    inlist_csv_tz: _StringList | None = None\n    swafo: _Literal[0, 1, 2] = 0\n    swaun: _Literal[0, 1, 2] = 0\n    critdevmasbal: float | None = _Field(default=None, **_UNITRANGE)\n    swdiscrvert: _Literal[0, 1] = 0\n    numnodnew: int | None = None\n    dznew: _Arrays | None = None\n\n    @_model_validator(mode=\"after\")\n    def validate_extensions(self):\n        invalid_extensions = [\n            ext for ext in self.extensions if ext not in self._all_extensions\n        ]\n        if invalid_extensions:\n            msg = f\"Invalid extensions: {', '.join(invalid_extensions)}\"\n            raise ValueError(msg)\n\n        # Create the _ExtensionMixin object without triggering validation\n        object.__setattr__(\n            self,\n            \"exts\",\n            _ExtensionMixin(**{\n                ext: 1 if ext in self.extensions else 0 for ext in self._all_extensions\n            }),\n        )\n        return self\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.simsettings.RichardsSettings", "title": "<code>RichardsSettings</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Settings for the Richards' equation.</p> <p>Attributes:</p> Name Type Description <code>swkmean</code> <code>Literal[1, 2, 3, 4, 5, 6]</code> <p>Switch for averaging method of hydraulic conductivity</p> <code>swkimpl</code> <code>Literal[0, 1]</code> <p>Switch for updating hydraulic conductivity during iteration</p> <code>dtmin</code> <code>float</code> <p>Minimum timestep [1.d-7..0.1 d]</p> <code>dtmax</code> <code>float</code> <p>Maximum timestep [dtmin..1 d]</p> <code>gwlconv</code> <code>float</code> <p>Maximum difference of groundwater level between time steps [1.d-5..1000 cm]</p> <code>critdevh1cp</code> <code>float</code> <p>Maximum relative difference in pressure heads per compartment [1.0d-10..1.d3]</p> <code>critdevh2cp</code> <code>float</code> <p>Maximum absolute difference in pressure heads per compartment [1.0d-10..1.d3 cm]</p> <code>critdevponddt</code> <code>float</code> <p>Maximum water balance error of ponding layer [1.0d-6..0.1 cm]</p> <code>maxit</code> <code>int</code> <p>Maximum number of iteration cycles [5..100]</p> <code>maxbacktr</code> <code>int</code> <p>Maximum number of back track cycles within an iteration cycle [1..10]</p> Source code in <code>pyswap/components/simsettings.py</code> <pre><code>class RichardsSettings(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Settings for the Richards' equation.\n\n    Attributes:\n        swkmean (Literal[1, 2, 3, 4, 5, 6]): Switch for averaging method of hydraulic conductivity\n        swkimpl (Literal[0, 1]): Switch for updating hydraulic conductivity during iteration\n        dtmin (float): Minimum timestep [1.d-7..0.1 d]\n        dtmax (float): Maximum timestep [dtmin..1 d]\n        gwlconv (float): Maximum difference of groundwater level between time steps [1.d-5..1000 cm]\n        critdevh1cp (float): Maximum relative difference in pressure heads per compartment [1.0d-10..1.d3]\n        critdevh2cp (float): Maximum absolute difference in pressure heads per compartment [1.0d-10..1.d3 cm]\n        critdevponddt (float): Maximum water balance error of ponding layer [1.0d-6..0.1 cm]\n        maxit (int): Maximum number of iteration cycles [5..100]\n        maxbacktr (int): Maximum number of back track cycles within an iteration cycle [1..10]\n    \"\"\"\n\n    swkmean: _Literal[1, 2, 3, 4, 5, 6] | None = None\n    swkimpl: _Literal[0, 1] | None = None\n    dtmin: float | None = _Field(default=0.000001, ge=1e-7, le=0.1)\n    dtmax: float | None = _Field(default=0.04, ge=0.000001, le=1.0)\n    gwlconv: float | None = _Field(default=100.0, ge=1e-5, le=1000.0)\n    critdevh1cp: float | None = _Field(default=0.01, ge=1e-10, le=1e3)\n    critdevh2cp: float | None = _Field(default=0.1, ge=1e-10, le=1e3)\n    critdevponddt: float | None = _Field(default=0.0001, ge=1e-6, le=0.1)\n    maxit: int | None = _Field(default=30, ge=5, le=100)\n    maxbacktr: int | None = _Field(default=3, ge=1, le=10)\n</code></pre>"}, {"location": "reference/model-components/#meteorological_settings", "title": "Meteorological settings", "text": "<p>Meteorology settings and data.</p> <p>This module contains the classes and functions to handle meteorological settings and data for simulations.</p> <p>Classes:</p> Name Description <code>MetFile</code> <p>Meteorological data for the .met file.</p> <code>Meteorology</code> <p>Meteorological settings of the simulation.</p> <p>Functions:</p> Name Description <code>load_from_csv</code> <p>Load meteorological data from a CSV file.</p> <code>load_from_knmi</code> <p>Load meteorological data from KNMI API.</p>"}, {"location": "reference/model-components/#pyswap.components.meteorology.MetFile", "title": "<code>MetFile</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>FileMixin</code>, <code>SerializableMixin</code></p> <p>Meteorological data for the .met file.</p> <p>This object is created by functions fetching or loading meteorological data from various sources. The data is stored as a pandas.DataFrame, but is formatted with a custom field serializer of the CSVTable field type.</p> <p>Attributes:</p> Name Type Description <code>metfil</code> <code>str</code> <p>name of the .met file</p> <code>content</code> <code>CSVTable</code> <p>meteorological data file</p> Source code in <code>pyswap/components/meteorology.py</code> <pre><code>class MetFile(_PySWAPBaseModel, _FileMixin, _SerializableMixin):\n    \"\"\"Meteorological data for the .met file.\n\n    This object is created by functions fetching or loading meteorological data\n    from various sources. The data is stored as a pandas.DataFrame, but\n    is formatted with a custom field serializer of the CSVTable field type.\n\n    Attributes:\n        metfil (str): name of the .met file\n        content (CSVTable): meteorological data file\n    \"\"\"\n\n    # None, because the extension has to be added to metfil\n    _extension: bool = _PrivateAttr(default=None)\n\n    metfil: _String\n    content: _CSVTable | None = _Field(default=None, exclude=True)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.meteorology.Meteorology", "title": "<code>Meteorology</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Meteorological settings of the simulation.</p> <p>Note</p> <p>SWRAIN and SWETSINE should be optional, but Fortran code evaluates its presence anyway. They are set to 0 by default.</p> <p>Attributes:</p> Name Type Description <code>meteo_location</code> <code>Location</code> <p>a point GIS object. If provided, lat and alt must not be provided. By default they are overwritten.</p> <code>lat</code> <code>Decimal</code> <p>latitude of the meteo station [degrees].</p> <code>swetr</code> <code>int</code> <p>Switch type of weather data for potential evapotranspiration:</p> <ul> <li>0 - Use basic weather data and apply Penman-Monteith equation.</li> <li>1 - Use reference evapotranspiration data in combination with     crop factors.</li> </ul> <code>swdivide</code> <code>int</code> <p>Switch for distribution of E and T. Defaults to 0:</p> <ul> <li>0 - Based on crop and soil factors.</li> <li>1 - Based on direct application of Penman-Monteith.</li> </ul> <code>swmetdetail</code> <code>int</code> <p>Switch for time interval of evapotranspiration and rainfall weather data:</p> <ul> <li>0 - Daily data.</li> <li>1 - Subdaily data.</li> </ul> <code>swrain</code> <code>int</code> <p>Switch for use of actual rainfall intensity, defaults to 0:</p> <ul> <li>0 - Use daily rainfall amounts.</li> <li>1 - Use daily rainfall amounts + mean intensity.</li> <li>2 - Use daily rainfall amounts + duration.</li> <li>3 - Use detailed rainfall records (dt &lt; 1 day), as supplied in     separate file.</li> </ul> <code>swetsine</code> <code>int</code> <p>Switch, distribute daily Tp and Ep according to sinus wave, default to 0:</p> <ul> <li>0 - No distribution.</li> <li>1 - Distribute Tp and Ep according to sinus wave.</li> </ul> <code>metfile</code> <code>MetFile</code> <p>MetFile model containing meteorological data to be saved to .met file.</p> <code>alt</code> <code>Decimal</code> <p>Altitude of the meteo station [m].</p> <code>altw</code> <code>Decimal</code> <p>Altitude of the wind [m].</p> <code>angstroma</code> <code>Decimal</code> <p>Fraction of extraterrestrial radiation reaching the earth on overcast days.</p> <code>angstromb</code> <code>Decimal</code> <p>Additional fraction of extraterrestrial radiation reaching the earth on clear days.</p> <code>table_rainflux</code> <code>Table</code> <p>rainfall intensity RAINFLUX as function of time TIME.</p> <code>rainfil</code> <code>str</code> <p>file name of file with detailed rainfall data.</p> <code>nmetdetail</code> <code>int</code> <p>Number of weather data records each day.</p> Properties <p>met: Returns the string representation of the met file.</p> <p>Methods:</p> Name Description <code>write_met</code> <p>Writes the .met file.</p> Source code in <code>pyswap/components/meteorology.py</code> <pre><code>class Meteorology(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Meteorological settings of the simulation.\n\n    !!! note\n        SWRAIN and SWETSINE should be optional,\n        but Fortran code evaluates its presence anyway. They are set to\n        0 by default.\n\n\n    Attributes:\n        meteo_location (Location): a point GIS object. If provided, lat\n            and alt must not be provided. By default they are overwritten.\n        lat (Decimal): latitude of the meteo station [degrees].\n        swetr (int): Switch type of weather data for\n            potential evapotranspiration:\n\n            * 0 - Use basic weather data and apply Penman-Monteith equation.\n            * 1 - Use reference evapotranspiration data in combination with\n                crop factors.\n\n        swdivide (int): Switch for distribution of E and T. Defaults to 0:\n\n            * 0 - Based on crop and soil factors.\n            * 1 - Based on direct application of Penman-Monteith.\n\n        swmetdetail (int): Switch for time interval of evapotranspiration and\n            rainfall weather data:\n\n            * 0 - Daily data.\n            * 1 - Subdaily data.\n\n        swrain (int): Switch for use of actual rainfall intensity,\n            defaults to 0:\n\n            * 0 - Use daily rainfall amounts.\n            * 1 - Use daily rainfall amounts + mean intensity.\n            * 2 - Use daily rainfall amounts + duration.\n            * 3 - Use detailed rainfall records (dt &lt; 1 day), as supplied in\n                separate file.\n\n        swetsine (int): Switch, distribute daily Tp and Ep according to\n            sinus wave, default to 0:\n\n            * 0 - No distribution.\n            * 1 - Distribute Tp and Ep according to sinus wave.\n\n        metfile (MetFile): MetFile model containing meteorological data to\n            be saved to .met file.\n        alt (Decimal): Altitude of the meteo station [m].\n        altw (Decimal): Altitude of the wind [m].\n        angstroma (Decimal): Fraction of extraterrestrial radiation reaching\n            the earth on overcast days.\n        angstromb (Decimal): Additional fraction of extraterrestrial radiation\n            reaching the earth on clear days.\n        table_rainflux (Table): rainfall intensity RAINFLUX as function\n            of time TIME.\n        rainfil (str): file name of file with detailed rainfall data.\n        nmetdetail (int): Number of weather data records each day.\n\n    Properties:\n        met: Returns the string representation of the met file.\n\n    Methods:\n        write_met: Writes the .met file.\n    \"\"\"\n\n    lat: _Decimal2f | None = _Field(default=None, ge=-90, le=90)\n    meteo_location: _Location | None = _Field(default=None, exclude=True)\n    swetr: _Literal[0, 1] | None = None\n    swdivide: _Literal[0, 1] | None = None\n    swrain: _Literal[0, 1, 2, 3] | None = 0\n    swetsine: _Literal[0, 1] = 0\n    metfile: _File | None = _Field(default=None, repr=False)\n    alt: _Decimal2f | None = _Field(default=None, ge=-400.0, le=3000.0)\n    altw: _Decimal2f = _Field(default=None, ge=0.0, le=99.0)\n    angstroma: _Decimal2f = _Field(default=None, **_UNITRANGE)\n    angstromb: _Decimal2f = _Field(default=None, **_UNITRANGE)\n    swmetdetail: _Literal[0, 1] | None = None\n    table_rainflux: _Table | None = None\n    rainfil: _String | None = None\n    nmetdetail: int | None = _Field(default=None, ge=1, le=96)\n\n    @property\n    def met(self):\n        return self.metfile.content.to_csv(index=False, lineterminator=\"\\n\")\n\n    def model_post_init(self, __context=None):\n        \"\"\"Set lat, and alt from `meteo_location` if Location object is provided.\"\"\"\n        if self.meteo_location:\n            self.lat = self.meteo_location.lat\n            self.alt = self.meteo_location.alt\n\n        self._validation = True\n        self.validate_with_yaml()\n        self._validation = False\n\n    def write_met(self, path: str):\n        \"\"\"Write the .met file.\n\n        !!! note\n\n            in this function the extension is not passed because\n            swp file requires the metfile parameter to be passed already with\n            the extension.\n\n        Parameters:\n            path (str): Path to the file.\n        \"\"\"\n\n        self.metfile.save_file(string=self.met, fname=self.metfile.metfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.meteorology.Meteorology.model_post_init", "title": "<code>model_post_init(__context=None)</code>", "text": "<p>Set lat, and alt from <code>meteo_location</code> if Location object is provided.</p> Source code in <code>pyswap/components/meteorology.py</code> <pre><code>def model_post_init(self, __context=None):\n    \"\"\"Set lat, and alt from `meteo_location` if Location object is provided.\"\"\"\n    if self.meteo_location:\n        self.lat = self.meteo_location.lat\n        self.alt = self.meteo_location.alt\n\n    self._validation = True\n    self.validate_with_yaml()\n    self._validation = False\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.meteorology.Meteorology.write_met", "title": "<code>write_met(path)</code>", "text": "<p>Write the .met file.</p> <p>Note</p> <p>in this function the extension is not passed because swp file requires the metfile parameter to be passed already with the extension.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Path to the file.</p> required Source code in <code>pyswap/components/meteorology.py</code> <pre><code>def write_met(self, path: str):\n    \"\"\"Write the .met file.\n\n    !!! note\n\n        in this function the extension is not passed because\n        swp file requires the metfile parameter to be passed already with\n        the extension.\n\n    Parameters:\n        path (str): Path to the file.\n    \"\"\"\n\n    self.metfile.save_file(string=self.met, fname=self.metfile.metfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.meteorology.metfile_from_csv", "title": "<code>metfile_from_csv(metfil, csv_path, **kwargs)</code>", "text": "<p>Method for loading meteorological data from a CSV file.</p> <p>Parameters:</p> Name Type Description Default <code>metfil</code> <code>str</code> <p>name of the .met file</p> required <code>csv_path</code> <code>str</code> <p>path to the CSV file</p> required <code>**kwargs</code> <code>dict</code> <p>keyword arguments for pandas.read_csv</p> <code>{}</code> <p>Returns:</p> Type Description <code>MetFile</code> <p>MetFile object.</p> Source code in <code>pyswap/components/meteorology.py</code> <pre><code>def metfile_from_csv(metfil: str, csv_path: str, **kwargs) -&gt; MetFile:\n    \"\"\"Method for loading meteorological data from a CSV file.\n\n    Parameters:\n        metfil (str): name of the .met file\n        csv_path (str): path to the CSV file\n        **kwargs (dict): keyword arguments for pandas.read_csv\n\n    Returns:\n        MetFile object.\n    \"\"\"\n\n    return MetFile(metfil=metfil, content=_read_csv(csv_path, **kwargs))\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.meteorology.metfile_from_knmi", "title": "<code>metfile_from_knmi(metfil, stations, variables, start='20000101', end='20200101', frequency='day', inseason=False)</code>", "text": "<p>Retrieves the meteorological data from KNMI API using knmi-py and enforces SWAP required format.</p> <p>Parameters:</p> Name Type Description Default <code>metfil</code> <code>str</code> <p>name of the .met file</p> required <code>stations</code> <code>str | list</code> <p>station number(s) to retrieve data from</p> required <code>variables</code> <code>str | list</code> <p>variables to retrieve</p> required <code>start</code> <code>str | dt</code> <p>start date of the data</p> <code>'20000101'</code> <code>end</code> <code>str | dt</code> <p>end date of the data</p> <code>'20200101'</code> <code>frequency</code> <code>Literal[day, hour]</code> <p>frequency of the data (day or hour)</p> <code>'day'</code> <code>inseason</code> <code>bool</code> <p>whether to retrieve in-season data</p> <code>False</code> <p>Returns:</p> Type Description <code>MetFile</code> <p>MetFile object.</p> Source code in <code>pyswap/components/meteorology.py</code> <pre><code>def metfile_from_knmi(\n    metfil: str,\n    stations: str | list,\n    variables: list[\n        _Literal[\n            \"WIND\",\n            \"TEMP\",\n            \"SUNR\",\n            \"PRCP\",\n            \"VICL\",\n            \"WEER\",\n            \"DD\",\n            \"FH\",\n            \"FF\",\n            \"FX\",\n            \"T\",\n            \"T10N\",\n            \"TD\",\n            \"SQ\",\n            \"Q\",\n            \"DR\",\n            \"RH\",\n            \"P\",\n            \"VV\",\n            \"N\",\n            \"U\",\n            \"WW\",\n            \"IX\",\n            \"M\",\n            \"R\",\n            \"S\",\n            \"O\",\n            \"Y\",\n            \"UG\",\n            \"FG\",\n            \"UX\",\n            \"UN\",\n        ]\n    ],\n    start: str | _datetime = \"20000101\",\n    end: str | _datetime = \"20200101\",\n    frequency: _Literal[\"day\", \"hour\"] = \"day\",\n    inseason: bool = False,\n) -&gt; MetFile:\n    \"\"\"Retrieves the meteorological data from KNMI API using knmi-py and\n    enforces SWAP required format.\n\n    Parameters:\n        metfil (str): name of the .met file\n        stations (str | list): station number(s) to retrieve data from\n        variables (str | list): variables to retrieve\n        start (str | dt): start date of the data\n        end (str | dt): end date of the data\n        frequency (Literal['day', 'hour']): frequency of the data (day or hour)\n        inseason (bool): whether to retrieve in-season data\n\n    Returns:\n        MetFile object.\n    \"\"\"\n\n    if isinstance(stations, str):\n        stations = [stations]\n    if isinstance(variables, str):\n        variables = [variables]\n\n    if not variables:\n        variables = [\"TEMP\", \"PRCP\", \"Q\", \"UG\", \"FG\", \"UX\", \"UN\"]\n\n    get_func = (\n        _get_day_data_dataframe if frequency == \"day\" else _get_hour_data_dataframe\n    )\n\n    df = get_func(\n        stations=stations, start=start, end=end, variables=variables, inseason=inseason\n    )\n\n    # rename some columns\n    required_column_names = {\n        \"STN\": \"Station\",\n        \"TN\": \"Tmin\",\n        \"TX\": \"Tmax\",\n        \"UG\": \"HUM\",\n        \"DR\": \"WET\",\n        \"FG\": \"WIND\",\n        \"RH\": \"RAIN\",\n        \"EV24\": \"ETref\",\n        \"Q\": \"RAD\",\n    }\n\n    df = df.rename(columns=required_column_names)\n\n    # recalculation of the parameters, the original unit is 0.1 Unit\n    df[[\"Tmin\", \"Tmax\", \"ETref\", \"RAIN\", \"WIND\"]] = df[\n        [\"Tmin\", \"Tmax\", \"ETref\", \"RAIN\", \"WIND\"]\n    ].multiply(0.1)\n\n    # The required unit is days\n    df[\"WET\"] = df[\"WET\"].multiply(0.1).multiply(24)\n\n    return MetFile(metfil=metfil, content=df)\n</code></pre>"}, {"location": "reference/model-components/#crop_settings", "title": "Crop settings", "text": "<p>Crop settings and crop files for SWAP model.</p> <p>Similar to the .dra or .swp files, the .crp file is a configuration file for the SWAP model. The classes in this module represent distincs sections of the .crp file. The main class is the <code>CropFile</code> class which holds the settings for the crop simulation.</p> <p>SWAP has three modes for crop simulations which users define in the CROPROTATION _table in the .swp file:</p> <pre><code>* 1 - simple crop settings - use CropDevelopmentSettingsFixed\n* 2 - detailed, WOFOST general settings - use CropDevelopmentSettingsWOFOST\n* 3 - dynamic grass growth model - use CropDevelopmentSettingsGrass\n</code></pre> <p>For each choice, the .crp file will look different. Therefore, multiple classes are defined in this module to deal with thos different settings.</p> <p>Classes:</p> Name Description <code>CropFile</code> <p>Class for the .crp file.</p> <code>CropDevelopmentSettingsWOFOST</code> <p>Class for the crop development settings in WOFOST.</p> <code>CropDevelopmentSettingsFixed</code> <p>Class for the fixed crop development settings.</p> <code>CropDevelopmentSettingsGrass</code> <p>Class for the grass crop development settings.</p> <code>OxygenStress</code> <p>Class for the oxygen stress settings.</p> <code>DroughtStress</code> <p>Class for the drought stress settings.</p> <code>SaltStress</code> <p>Class for the salt stress settings.</p> <code>CompensateRWUStress</code> <p>Class for the compensate root water uptake stress settings.</p> <code>Interception</code> <p>Class for the interception settings.</p> <code>CO2Correction</code> <p>Class for the CO2 correction settings.</p> <code>ScheduledIrrigation</code> <p>Class for the scheduled irrigation settings.</p> <code>Preparation</code> <p>Class for the preparation settings.</p>"}, {"location": "reference/model-components/#pyswap.components.crop.AMAXTB", "title": "<code>AMAXTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>maximum CO2 assimilation rate [0..100 kg/ha/hr, R] as function of development stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>AMAX</code> <code>Series[float]</code> <p>Maximum CO2 assimilation rate.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class AMAXTB(BaseTableModel):\n    \"\"\"maximum CO2 assimilation rate [0..100 kg/ha/hr, R] as function of development stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        AMAX (Series[float]): Maximum CO2 assimilation rate.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    AMAX: Series[float] = pa.Field(ge=0.0, le=100.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CFTB", "title": "<code>CFTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Crop Height [0..1.d4 cm, R], as function of dev. stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>CF</code> <code>Series[float]</code> <p>Crop factor.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class CFTB(BaseTableModel):\n    \"\"\"Crop Height [0..1.d4 cm, R], as function of dev. stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        CF (Series[float]): Crop factor.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    CH: Series[float] | None\n    CF: Series[float] | None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CO2Correction", "title": "<code>CO2Correction</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code>, <code>WOFOSTUpdateMixin</code></p> <p>CO2 correction settings for WOFOST-type .crp file.</p> <p>Attributes:</p> Name Type Description <code>swco2</code> <code>Literal[0, 1]</code> <p>Switch for assimilation correction due to CO2 impact</p> <ul> <li>0 - No CO2 assimilation correction</li> <li>1 - CO2 assimilation correction</li> </ul> <code>atmofil</code> <code>Optional[str]</code> <p>alternative filename for atmosphere.co2</p> <code>co2amaxtb</code> <code>Optional _Arrays]</code> <p>Correction of photosynthesis as a function of atmospheric CO2 concentration</p> <code>co2efftb</code> <code>Optional _Arrays]</code> <p>orrection of radiation use efficiency as a function of atmospheric CO2 concentration</p> <code>co2tratb</code> <code>Optional _Arrays]</code> <p>Correction of transpiration as a function of atmospheric CO2 concentration</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CO2Correction(\n    _PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin, _WOFOSTUpdateMixin\n):\n    \"\"\"CO2 correction settings for WOFOST-type .crp file.\n\n    Attributes:\n        swco2 (Literal[0, 1]): Switch for assimilation correction due to CO2 impact\n\n            * 0 - No CO2 assimilation correction\n            * 1 - CO2 assimilation correction\n\n        atmofil (Optional[str]): alternative filename for atmosphere.co2\n        co2amaxtb (Optional _Arrays]): Correction of photosynthesis as a function of atmospheric CO2 concentration\n        co2efftb (Optional _Arrays]): orrection of radiation use efficiency as a function of atmospheric CO2 concentration\n        co2tratb (Optional _Arrays]): Correction of transpiration as a function of atmospheric CO2 concentration\n    \"\"\"\n\n    _validation: bool = _PrivateAttr(default=False)\n    wofost_variety: _CropVariety | None = _Field(default=None, exclude=True)\n\n    swco2: _Literal[0, 1] | None = None\n    atmofil: str | None = None\n    co2amaxtb: _Arrays | None = None\n    co2efftb: _Arrays | None = None\n    co2tratb: _Arrays | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CROPROTATION", "title": "<code>CROPROTATION</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Crop rotation settings</p> <p>Attributes:</p> Name Type Description <code>CROPSTART</code> <code>Series[DateTime]</code> <p>Start date of the crop.</p> <code>CROPEND</code> <code>Series[DateTime]</code> <p>End date of the crop.</p> <code>CROPFIL</code> <code>Series[str]</code> <p>Crop file name.</p> <code>CROPTYPE</code> <code>Series[int]</code> <p>Crop module type</p> <ul> <li>1 - simple</li> <li>2 - detailed, WOFOST general</li> <li>3 - detailed, WOFOST grass</li> </ul> Source code in <code>pyswap/components/tables.py</code> <pre><code>class CROPROTATION(BaseTableModel):\n    \"\"\"Crop rotation settings\n\n    Attributes:\n        CROPSTART (Series[pa.DateTime]): Start date of the crop.\n        CROPEND (Series[pa.DateTime]): End date of the crop.\n        CROPFIL (Series[str]): Crop file name.\n        CROPTYPE (Series[int]): Crop module type\n\n            * 1 - simple\n            * 2 - detailed, WOFOST general\n            * 3 - detailed, WOFOST grass\n    \"\"\"\n\n    CROPSTART: Series[pa.DateTime]\n    CROPEND: Series[pa.DateTime]\n    CROPFIL: Series[str]\n    CROPTYPE: Series[int] = pa.Field(ge=1, le=3)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CompensateRWUStress", "title": "<code>CompensateRWUStress</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Compensate root water uptake stress settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swcompensate</code> <code>Literal[0, 1, 2]</code> <p>Switch for compensate root water uptake stress</p> <ul> <li>0 - No compensation</li> <li>1 - Compensation according to Jarvis (1989)</li> <li>2 - Compensation according to Walsum (2019)</li> </ul> <code>swstressor</code> <code>Optional[Literal[1, 2, 3, 4, 5]]</code> <p>Switch for stressor</p> <ul> <li>1 - Compensation of all stressors</li> <li>2 - Compensation of drought stress</li> <li>3 - Compensation of oxygen stress</li> <li>4 - Compensation of salinity stress</li> <li>5 - Compensation of frost stress</li> </ul> <code>alphacrit</code> <code>Optional[float]</code> <p>Critical stress index for compensation of root water uptake</p> <code>dcritrtz</code> <code>Optional[float]</code> <p>Threshold of rootzone thickness after which compensation occurs</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CompensateRWUStress(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Compensate root water uptake stress settings for .crp file.\n\n    Attributes:\n        swcompensate (Literal[0, 1, 2]): Switch for compensate root water uptake stress\n\n            * 0 - No compensation\n            * 1 - Compensation according to Jarvis (1989)\n            * 2 - Compensation according to Walsum (2019)\n\n        swstressor (Optional[Literal[1, 2, 3, 4, 5]]): Switch for stressor\n\n            * 1 - Compensation of all stressors\n            * 2 - Compensation of drought stress\n            * 3 - Compensation of oxygen stress\n            * 4 - Compensation of salinity stress\n            * 5 - Compensation of frost stress\n\n        alphacrit (Optional[float]): Critical stress index for compensation of root water uptake\n        dcritrtz (Optional[float]): Threshold of rootzone thickness after which compensation occurs\n    \"\"\"\n\n    swcompensate: _Literal[0, 1, 2] | None = None\n    swstressor: _Literal[1, 2, 3, 4, 5] | None = None\n    alphacrit: float | None = _Field(default=None, ge=0.2, le=1.0)\n    dcritrtz: float | None = _Field(default=None, ge=0.02, le=100.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.Crop", "title": "<code>Crop</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>FileMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Crop settings of the simulation.</p> <p>Attributes:</p> Name Type Description <code>swcrop</code> <code>int</code> <p>Switch for crop:</p> <ul> <li>0 - Bare soil.</li> <li>1 - Simulate crop.</li> </ul> <code>rds</code> <code>Optional[float]</code> <p>Rooting depth of the crop [cm].</p> <code>_table_croprotation</code> <code>Optional[Table]</code> <p>_Table with crop rotation data.</p> <code>cropfiles</code> <code>Optional[List[CropFile]]</code> <p>List of crop files.</p> <p>Methods:</p> Name Description <code>write_crop</code> <p>Write the crop files.</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class Crop(_PySWAPBaseModel, _SerializableMixin, _FileMixin, _YAMLValidatorMixin):\n    \"\"\"Crop settings of the simulation.\n\n    Attributes:\n        swcrop (int): Switch for crop:\n\n            * 0 - Bare soil.\n            * 1 - Simulate crop.\n\n        rds (Optional[float]): Rooting depth of the crop [cm].\n        _table_croprotation (Optional[_Table]): _Table with crop rotation data.\n        cropfiles (Optional[List[CropFile]]): List of crop files.\n\n    Methods:\n        write_crop: Write the crop files.\n    \"\"\"\n\n    swcrop: _Literal[0, 1, None] = None\n    rds: float | None = _Field(default=None, ge=1, le=5000)\n    croprotation: _Table | None = None\n    cropfiles: dict[str, CropFile] = _Field(default_factory=dict, exclude=True)\n\n    def write_crop(self, path: str):\n        for name, cropfile in self.cropfiles.items():\n            cropfile.save_file(string=cropfile.crp, fname=name, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CropDevelopmentSettingsFixed", "title": "<code>CropDevelopmentSettingsFixed</code>", "text": "<p>               Bases: <code>_CropDevelopmentSettings</code></p> <p>Fixed crop development settings (Additionaly to CropDevelopmentSettings).</p> <p>Attributes:</p> Name Type Description <code>idev</code> <code>Literal[1, 2]</code> <p>Duration of crop growing period</p> <ul> <li>1 - Duration is fixed</li> <li>2 - Duration is variable</li> </ul> <code>lcc</code> <code>Optional[int]</code> <p>Duration of the crop growing period</p> <code>swgc</code> <code>Literal[1, 2]</code> <p>Choose between Leaf Area Index or Soil Cover Fraction</p> <ul> <li>1 - LAI</li> <li>2 - SCF</li> </ul> <code>gctb</code> <code> _Arrays</code> <p>Soil Cover Fraction as a function of development stage</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CropDevelopmentSettingsFixed(_CropDevelopmentSettings):\n    \"\"\"Fixed crop development settings (Additionaly to CropDevelopmentSettings).\n\n    Attributes:\n        idev (Literal[1, 2]): Duration of crop growing period\n\n            * 1 - Duration is fixed\n            * 2 - Duration is variable\n\n        lcc (Optional[int]): Duration of the crop growing period\n        swgc (Literal[1, 2]): Choose between Leaf Area Index or Soil Cover Fraction\n\n            * 1 - LAI\n            * 2 - SCF\n\n        gctb  _Arrays): Soil Cover Fraction as a function of development stage\n    \"\"\"\n\n    idev: _Literal[1, 2] | None = None\n    lcc: int | None = _Field(default=None, **_YEARRANGE)\n    swgc: _Literal[1, 2] | None = None\n    gctb: _Arrays | None = None\n    kytb: _Arrays | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CropDevelopmentSettingsGrass", "title": "<code>CropDevelopmentSettingsGrass</code>", "text": "<p>               Bases: <code>CropDevelopmentSettingsWOFOST</code></p> <p>Crop development settings specific to grass growth.</p> <p>Attributes:</p> Name Type Description <code>swtsum</code> <code>Literal[0, 1, 2]</code> <p>Select either sum air temperatures or soil temperature at particular depth</p> <ul> <li>0 - no delay of start grass growth</li> <li>1 - start of grass growth based on sum air temperatures &gt; 200 degree C</li> <li>2 - start of grass growth based on soil temperature at particular depth</li> </ul> <code>tsumtemp</code> <code>Optional[float]</code> <p>Specific stem area [0..1 ha/kg, R]</p> <code>tsumdepth</code> <code>Optional[float]</code> <p>Life span under leaves under optimum conditions [0..366 d, R]</p> <code>tsumtime</code> <code>Optional[float]</code> <p>Lower threshold temperature for ageing of leaves [-10..30 degree C, R]</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CropDevelopmentSettingsGrass(CropDevelopmentSettingsWOFOST):\n    \"\"\"Crop development settings specific to grass growth.\n\n    Attributes:\n        swtsum (Literal[0, 1, 2]): Select either sum air temperatures or soil temperature at particular depth\n\n            * 0 - no delay of start grass growth\n            * 1 - start of grass growth based on sum air temperatures &gt; 200 degree C\n            * 2 - start of grass growth based on soil temperature at particular depth\n\n        tsumtemp (Optional[float]): Specific stem area [0..1 ha/kg, R]\n        tsumdepth (Optional[float]): Life span under leaves under optimum conditions [0..366 d, R]\n        tsumtime (Optional[float]): Lower threshold temperature for ageing of leaves [-10..30 degree C, R]\n    \"\"\"\n\n    swtsum: _Literal[0, 1, 2] | None = None\n    tsumtemp: float | None = None\n    tsumdepth: float | None = None\n    tsumtime: float | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CropDevelopmentSettingsWOFOST", "title": "<code>CropDevelopmentSettingsWOFOST</code>", "text": "<p>               Bases: <code>_CropDevelopmentSettings</code></p> <p>Additional settings as defined for the WOFOST model.</p> <p>idsl (Literal[0, 1, 2]): Switch for crop development. dtsmtb  _Arrays): List increase in temperature sum as function of daily average temperature. dlo (Optional[float]): Optimum day length for crop development. dlc (Optional[float]): Minimum day length. vernsat (Optional[float]): Saturated vernalisation requirement. vernbase (Optional[float]): Base vernalisation requirement. verndvs (Optional[float]): Critical development stage after which the effect of vernalisation is halted. verntb (Optional _Arrays]): _Table with rate of vernalisation as function of average air temperature. tdwi (float): Initial total crop dry weight. laiem (float): Leaf area index at emergence. rgrlai (float): Maximum relative increase in LAI. spa (float): Specific pod area. ssa (float): Specific stem area. span (float): Life span under leaves under optimum conditions. slatb  _Arrays): List specific leaf area as function of crop development stage. eff (float): Light use efficiency for real leaf. amaxtb  _Arrays): List maximum CO2 assimilation rate as function of development stage. tmpftb  _Arrays): List reduction factor of AMAX as function of average day temperature. tmnftb  _Arrays): List reduction factor of AMAX as function of minimum day temperature. cvo (float): Efficiency of conversion into storage organs. cvl (float): Efficiency of conversion into leaves. cvr (float): Efficiency of conversion into roots. cvs (float): Efficiency of conversion into stems. q10 (float): Increase in respiration rate with temperature. rml (float): Maintenance respiration rate of leaves. rmo (float): Maintenance respiration rate of storage organs. rmr (float): Maintenance respiration rate of roots. rms (float): Maintenance respiration rate of stems. rfsetb  _Arrays): List reduction factor of senescence as function of development stage. frtb  _Arrays): List fraction of total dry matter increase partitioned to the roots as function of development stage. fltb  _Arrays): List fraction of total above ground dry matter increase partitioned to the leaves as function of development stage. fstb  _Arrays): List fraction of total above ground dry matter increase partitioned to the stems as function of development stage. fotb  _Arrays): List fraction of total above ground dry matter increase partitioned to the storage organs as function of development stage. perdl (float): Maximum relative death rate of leaves due to water stress. rdrrtb  _Arrays): List relative death rates of roots as function of development stage. rdrstb  _Arrays): List relative death rates of stems as function of development stage.</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CropDevelopmentSettingsWOFOST(_CropDevelopmentSettings):\n    \"\"\"Additional settings as defined for the WOFOST model.\n\n    idsl (Literal[0, 1, 2]): Switch for crop development.\n    dtsmtb  _Arrays): List increase in temperature sum as function of daily average temperature.\n    dlo (Optional[float]): Optimum day length for crop development.\n    dlc (Optional[float]): Minimum day length.\n    vernsat (Optional[float]): Saturated vernalisation requirement.\n    vernbase (Optional[float]): Base vernalisation requirement.\n    verndvs (Optional[float]): Critical development stage after which the effect of vernalisation is halted.\n    verntb (Optional _Arrays]): _Table with rate of vernalisation as function of average air temperature.\n    tdwi (float): Initial total crop dry weight.\n    laiem (float): Leaf area index at emergence.\n    rgrlai (float): Maximum relative increase in LAI.\n    spa (float): Specific pod area.\n    ssa (float): Specific stem area.\n    span (float): Life span under leaves under optimum conditions.\n    slatb  _Arrays): List specific leaf area as function of crop development stage.\n    eff (float): Light use efficiency for real leaf.\n    amaxtb  _Arrays): List maximum CO2 assimilation rate as function of development stage.\n    tmpftb  _Arrays): List reduction factor of AMAX as function of average day temperature.\n    tmnftb  _Arrays): List reduction factor of AMAX as function of minimum day temperature.\n    cvo (float): Efficiency of conversion into storage organs.\n    cvl (float): Efficiency of conversion into leaves.\n    cvr (float): Efficiency of conversion into roots.\n    cvs (float): Efficiency of conversion into stems.\n    q10 (float): Increase in respiration rate with temperature.\n    rml (float): Maintenance respiration rate of leaves.\n    rmo (float): Maintenance respiration rate of storage organs.\n    rmr (float): Maintenance respiration rate of roots.\n    rms (float): Maintenance respiration rate of stems.\n    rfsetb  _Arrays): List reduction factor of senescence as function of development stage.\n    frtb  _Arrays): List fraction of total dry matter increase partitioned to the roots as function of development stage.\n    fltb  _Arrays): List fraction of total above ground dry matter increase partitioned to the leaves as function of development stage.\n    fstb  _Arrays): List fraction of total above ground dry matter increase partitioned to the stems as function of development stage.\n    fotb  _Arrays): List fraction of total above ground dry matter increase partitioned to the storage organs as function of development stage.\n    perdl (float): Maximum relative death rate of leaves due to water stress.\n    rdrrtb  _Arrays): List relative death rates of roots as function of development stage.\n    rdrstb  _Arrays): List relative death rates of stems as function of development stage.\n    \"\"\"\n\n    idsl: _Literal[0, 1, 2] | None = None\n    dtsmtb: _Arrays | None = None\n    dlo: float | None = _Field(default=None, ge=0.0, le=24.0)\n    dlc: float | None = _Field(default=None, ge=0.0, le=24.0)\n    vernsat: float | None = _Field(default=None, ge=0.0, le=100.0)\n    vernbase: float | None = _Field(default=None, ge=0.0, le=100.0)\n    verndvs: float | None = _Field(default=None, ge=0.0, le=0.3)\n    verntb: _Arrays | None = None\n    tdwi: float | None = _Field(default=None, ge=0.0, le=10_000)\n    laiem: float | None = _Field(default=None, ge=0.0, le=10)\n    rgrlai: float | None = _Field(default=None, **_UNITRANGE)\n    spa: float | None = _Field(**_UNITRANGE, default=None)\n    ssa: float | None = _Field(default=None, **_UNITRANGE)\n    span: float | None = _Field(default=None, **_YEARRANGE)\n    slatb: _Arrays | None = None\n    eff: float | None = _Field(default=None, ge=0.0, le=10.0)\n    amaxtb: _Arrays | None = None\n    tmpftb: _Arrays | None = None\n    tmnftb: _Arrays | None = None\n    cvo: float | None = _Field(default=None, **_UNITRANGE)\n    cvl: float | None = _Field(default=None, **_UNITRANGE)\n    cvr: float | None = _Field(default=None, **_UNITRANGE)\n    cvs: float | None = _Field(default=None, **_UNITRANGE)\n    q10: float | None = _Field(default=None, ge=0.0, le=5.0)\n    rml: float | None = _Field(default=None, **_UNITRANGE)\n    rmo: float | None | None = _Field(**_UNITRANGE, default=None)\n    rmr: float | None = _Field(default=None, **_UNITRANGE)\n    rms: float | None = _Field(default=None, **_UNITRANGE)\n    rfsetb: _Arrays | None = None\n    frtb: _Arrays | None = None\n    fltb: _Arrays | None = None\n    fstb: _Arrays | None = None\n    fotb: _Arrays | None = None\n    perdl: float | None = _Field(default=None, ge=0.0, le=3.0)\n    rdrrtb: _Arrays | None = None\n    rdrstb: _Arrays | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CropFile", "title": "<code>CropFile</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>FileMixin</code>, <code>SerializableMixin</code></p> <p>Main class for the .crp file.</p> <p>This class collects all the settings for the crop file. Currently the types of the attributes are set to Any because the validation is not yet implemented.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the crop</p> <code>path</code> <code>Optional[str]</code> <p>Path to the .crp file</p> <code>prep</code> <code>Optional[Preparation]</code> <p>Preparation settings</p> <code>cropdev_settings</code> <code>Optional[CropDevelopmentSettings]</code> <p>Crop development settings</p> <code>oxygenstress</code> <code>Optional[OxygenStress]</code> <p>Oxygen stress settings</p> <code>droughtstress</code> <code>Optional[DroughtStress]</code> <p>Drought stress settings</p> <code>saltstress</code> <code>Optional[SaltStress]</code> <p>Salt stress settings</p> <code>compensaterwu</code> <code>Optional[CompensateRWUStress]</code> <p>Compensate root water uptake stress settings</p> <code>interception</code> <code>Optional[Interception]</code> <p>Interception settings</p> <code>scheduledirrigation</code> <code>Optional[ScheduledIrrigation]</code> <p>Scheduled irrigation settings</p> <code>grassland_management</code> <code>Optional[GrasslandManagement]</code> <p>Grassland management settings</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class CropFile(_PySWAPBaseModel, _FileMixin, _SerializableMixin):\n    \"\"\"Main class for the .crp file.\n\n    This class collects all the settings for the crop file. Currently the types of the\n    attributes are set to Any because the validation is not yet implemented.\n\n    Attributes:\n        name (str): Name of the crop\n        path (Optional[str]): Path to the .crp file\n        prep (Optional[Preparation]): Preparation settings\n        cropdev_settings (Optional[CropDevelopmentSettings]): Crop development settings\n        oxygenstress (Optional[OxygenStress]): Oxygen stress settings\n        droughtstress (Optional[DroughtStress]): Drought stress settings\n        saltstress (Optional[SaltStress]): Salt stress settings\n        compensaterwu (Optional[CompensateRWUStress]): Compensate root water uptake stress settings\n        interception (Optional[Interception]): Interception settings\n        scheduledirrigation (Optional[ScheduledIrrigation]): Scheduled irrigation settings\n        grassland_management (Optional[GrasslandManagement]): Grassland management settings\n    \"\"\"\n\n    _extension: bool = _PrivateAttr(default=\"crp\")\n\n    name: str = _Field(exclude=True)\n    path: str | None = None\n    prep: _Subsection[Preparation] | None = None\n    cropdev_settings: (\n        _Subsection[\n            CropDevelopmentSettingsFixed\n            | CropDevelopmentSettingsWOFOST\n            | CropDevelopmentSettingsGrass\n        ]\n        | None\n    ) = None\n    oxygenstress: _Subsection[OxygenStress] | None = None\n    droughtstress: _Subsection[DroughtStress] | None = None\n    saltstress: _Subsection[SaltStress] | None = SaltStress(swsalinity=0)\n    compensaterwu: _Subsection[CompensateRWUStress] | None = CompensateRWUStress(\n        swcompensate=0\n    )\n    interception: _Subsection[Interception] | None = None\n    scheduledirrigation: _Subsection[_ScheduledIrrigation] | None = (\n        _ScheduledIrrigation(schedule=0)\n    )\n    grasslandmanagement: _Subsection[GrasslandManagement] | None = None\n    co2correction: _Subsection[CO2Correction] | None = None\n\n    @property\n    def crp(self) -&gt; str:\n        \"\"\"Return the model string of the .crp file.\"\"\"\n        return self.model_string()\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.CropFile.crp", "title": "<code>crp: str</code>  <code>property</code>", "text": "<p>Return the model string of the .crp file.</p>"}, {"location": "reference/model-components/#pyswap.components.crop.DMGRZTB", "title": "<code>DMGRZTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger grazing as function of daynumber [1..366 d, R]</p> <p>Attributes:</p> Name Type Description <code>DNR</code> <code>Series[float]</code> <p>Day number.</p> <code>DMGRZ</code> <code>Series[float]</code> <p>Dry matter growth rate of roots.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class DMGRZTB(BaseTableModel):\n    \"\"\"threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger grazing as function of daynumber [1..366 d, R]\n\n    Attributes:\n        DNR (Series[float]): Day number.\n        DMGRZ (Series[float]): Dry matter growth rate of roots.\n    \"\"\"\n\n    DNR: Series[float] = pa.Field(**YEARRANGE)\n    DMGRZ: Series[float] = pa.Field(ge=0.0, le=1.0e6)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.DMMOWDELAY", "title": "<code>DMMOWDELAY</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Relation between dry matter harvest [0..1d6 kg/ha, R] and days of delay in regrowth [0..366 d, I] after mowing</p> <p>Attributes:</p> Name Type Description <code>DMMOWDELAY</code> <code>Series[float]</code> <p>Dry matter harvest [0..1d6 kg/ha, R]</p> <code>DAYDELAY</code> <code>Series[int]</code> <p>days of delay in regrowth [0..366 d, I]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class DMMOWDELAY(BaseTableModel):\n    \"\"\"Relation between dry matter harvest [0..1d6 kg/ha, R] and days of delay in regrowth [0..366 d, I] after mowing\n\n    Attributes:\n        DMMOWDELAY (Series[float]): Dry matter harvest [0..1d6 kg/ha, R]\n        DAYDELAY (Series[int]): days of delay in regrowth [0..366 d, I]\n    \"\"\"\n\n    DMMOWDELAY: Series[float] = pa.Field(ge=0.0, le=1.0e6)\n    DAYDELAY: Series[int] = pa.Field(**YEARRANGE)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.DMMOWTB", "title": "<code>DMMOWTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>List threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger mowing as function of daynumber [1..366 d, R]</p> <p>Note</p> <p>maximum 20 records</p> <p>Attributes:</p> Name Type Description <code>DNR</code> <code>Series[float]</code> <p>Day number.</p> <code>DMMOW</code> <code>Series[float]</code> <p>threshold of above ground dry matter [0..1d6 kg DM/ha, R]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class DMMOWTB(BaseTableModel):\n    \"\"\"List threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger mowing as function of daynumber [1..366 d, R]\n\n    !!! note\n\n        maximum 20 records\n\n\n    Attributes:\n        DNR (Series[float]): Day number.\n        DMMOW (Series[float]): threshold of above ground dry matter [0..1d6 kg DM/ha, R]\n    \"\"\"\n\n    DNR: Series[float] = pa.Field(**YEARRANGE)\n    DMMOW: Series[float] = pa.Field(ge=0.0, le=1.0e6)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.DTSMTB", "title": "<code>DTSMTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>increase in temperature sum [0..60 oC, R] as function of daily average temperature [0..100 oC, R]</p> <p>Attributes:</p> Name Type Description <code>TAV</code> <code>Series[float]</code> <p>Daily average temperature.</p> <code>DTSM</code> <code>Series[float]</code> <p>Increase in temperature sum.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class DTSMTB(BaseTableModel):\n    \"\"\"increase in temperature sum [0..60 oC, R] as function of daily average temperature [0..100 oC, R]\n\n    Attributes:\n        TAV (Series[float]): Daily average temperature.\n        DTSM (Series[float]): Increase in temperature sum.\n    \"\"\"\n\n    TAV: Series[float] = pa.Field(ge=0.0, le=100.0)\n    DTSM: Series[float] = pa.Field(ge=0.0, le=60.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.DroughtStress", "title": "<code>DroughtStress</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Drought stress settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swdrought</code> <code>Literal[1, 2]</code> <p>Switch for drought stress</p> <ul> <li>1 - Drought stress according to Feddes et al. (1978)</li> <li>2 - rought stress according to De Jong van Lier et al. (2008)</li> </ul> <code>swjarvis</code> <code>Optional[Literal[0, 1, 2, 3, 4]]</code> <p>DEPRECATED Switch for Jarvis model for water uptake reduction</p> <code>alphcrit</code> <code>float | None</code> <p>Optional[float] = DEPRECATED Critical stress index (Jarvis, 1989) for compensation of root water uptake [0.2..1 -, R]</p> <code>hlim3h</code> <code>Optional[float]</code> <p>Pressure head below which water uptake reduction starts at high Tpot</p> <code>hlim3l</code> <code>Optional[float]</code> <p>Pressure head below which water uptake reduction starts at low Tpot</p> <code>hlim4</code> <code>Optional[float]</code> <p>No water extraction at lower soil water pressure heads</p> <code>adcrh</code> <code>Optional[float]</code> <p>Level of high atmospheric demand, corresponding to HLIM3H</p> <code>adcrl</code> <code>Optional[float]</code> <p>Level of low atmospheric demand, corresponding to HLIM3L</p> <code>wiltpoint</code> <code>Optional[float]</code> <p>Minimum pressure head in leaves</p> <code>kstem</code> <code>Optional[float]</code> <p>Hydraulic conductance between leaf and root xylem</p> <code>rxylem</code> <code>Optional[float]</code> <p>Xylem radius</p> <code>rootradius</code> <code>Optional[float]</code> <p>Root radius</p> <code>kroot</code> <code>Optional[float]</code> <p>Radial hydraulic conductivity of root tissue</p> <code>rootcoefa</code> <code>Optional[float]</code> <p>Defines relative distance between roots at which mean soil water content occurs</p> <code>swhydrlift</code> <code>Optional[Literal[0, 1]]</code> <p>Switch for possibility hydraulic lift in root system</p> <code>rooteff</code> <code>Optional[float]</code> <p>Root system efficiency factor</p> <code>stephr</code> <code>Optional[float]</code> <p>Step between values of hroot and hxylem in iteration cycle</p> <code>criterhr</code> <code>Optional[float]</code> <p>Maximum difference of Hroot between iterations; convergence criterium</p> <code>taccur</code> <code>Optional[float]</code> <p>Maximum absolute difference between simulated and calculated potential transpiration rate</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class DroughtStress(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Drought stress settings for .crp file.\n\n    Attributes:\n        swdrought (Literal[1, 2]): Switch for drought stress\n\n            * 1 - Drought stress according to Feddes et al. (1978)\n            * 2 - rought stress according to De Jong van Lier et al. (2008)\n\n        swjarvis (Optional[Literal[0, 1, 2, 3, 4]]): _DEPRECATED_ Switch for Jarvis model for water uptake reduction\n        alphcrit: Optional[float] = _DEPRECATED_ Critical stress index (Jarvis, 1989) for compensation of root water uptake [0.2..1 -, R]\n        hlim3h (Optional[float]): Pressure head below which water uptake reduction starts at high Tpot\n        hlim3l (Optional[float]): Pressure head below which water uptake reduction starts at low Tpot\n        hlim4 (Optional[float]): No water extraction at lower soil water pressure heads\n        adcrh (Optional[float]): Level of high atmospheric demand, corresponding to HLIM3H\n        adcrl (Optional[float]): Level of low atmospheric demand, corresponding to HLIM3L\n        wiltpoint (Optional[float]): Minimum pressure head in leaves\n        kstem (Optional[float]): Hydraulic conductance between leaf and root xylem\n        rxylem (Optional[float]): Xylem radius\n        rootradius (Optional[float]): Root radius\n        kroot (Optional[float]): Radial hydraulic conductivity of root tissue\n        rootcoefa (Optional[float]): Defines relative distance between roots at which mean soil water content occurs\n        swhydrlift (Optional[Literal[0, 1]]): Switch for possibility hydraulic lift in root system\n        rooteff (Optional[float]): Root system efficiency factor\n        stephr (Optional[float]): Step between values of hroot and hxylem in iteration cycle\n        criterhr (Optional[float]): Maximum difference of Hroot between iterations; convergence criterium\n        taccur (Optional[float]): Maximum absolute difference between simulated and calculated potential transpiration rate\n    \"\"\"\n\n    swdrought: _Literal[1, 2] | None = None\n    swjarvis: _Literal[0, 1, 2, 3, 4] | None = None\n    alphcrit: float | None = _Field(default=None, ge=0.2, le=1.0)\n    hlim3h: float | None = _Field(default=None, ge=-1.0e4, le=100.0)\n    hlim3l: float | None = _Field(default=None, ge=-1.0e4, le=100.0)\n    hlim4: float | None = _Field(default=None, ge=-1.6e4, le=100.0)\n    adcrh: float | None = _Field(default=None, ge=0.0, le=5.0)\n    adcrl: float | None = _Field(default=None, ge=0.0, le=5.0)\n    wiltpoint: float | None = _Field(default=None, ge=-1.0e8, le=-1.0e2)\n    kstem: float | None = _Field(default=None, ge=1.0e-10, le=10.0)\n    rxylem: float | None = _Field(default=None, ge=1.0e-4, le=1.0)\n    rootradius: float | None = _Field(default=None, ge=1.0e-4, le=1.0)\n    kroot: float | None = _Field(default=None, ge=1.0e-10, le=1.0e10)\n    rootcoefa: float | None = _Field(default=None, **_UNITRANGE)\n    swhydrlift: _Literal[0, 1] | None = None\n    rooteff: float | None = _Field(default=None, **_UNITRANGE)\n    stephr: float | None = _Field(default=None, ge=0.0, le=10.0)\n    criterhr: float | None = _Field(default=None, ge=0.0, le=10.0)\n    taccur: float | None = _Field(default=None, ge=1.0e-5, le=1.0e-2)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.FLTB", "title": "<code>FLTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>fraction of total above ground dry matter increase partitioned to the leaves [kg/kg, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>FL</code> <code>Series[float]</code> <p>Fraction of total above ground dry matter increase partitioned to the leaves.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class FLTB(BaseTableModel):\n    \"\"\"fraction of total above ground dry matter increase partitioned to the leaves [kg/kg, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        FL (Series[float]): Fraction of total above ground dry matter increase partitioned to the leaves.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    FL: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.FOTB", "title": "<code>FOTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>fraction of total above ground dry matter increase partitioned to the storage organs [kg/kg, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>FO</code> <code>Series[float]</code> <p>Fraction of total above ground dry matter increase partitioned to the storage organs.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class FOTB(BaseTableModel):\n    \"\"\"fraction of total above ground dry matter increase partitioned to the storage organs [kg/kg, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        FO (Series[float]): Fraction of total above ground dry matter increase partitioned to the storage organs.\n    \"\"\"\n\n    DVS: Series[float] = pa.Field(**DVSRANGE)\n    FO: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.FRTB", "title": "<code>FRTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>fraction of total dry matter increase partitioned to the roots [kg/kg, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>FR</code> <code>Series[float]</code> <p>Fraction of total dry matter increase partitioned to the roots.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class FRTB(BaseTableModel):\n    \"\"\"fraction of total dry matter increase partitioned to the roots [kg/kg, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        FR (Series[float]): Fraction of total dry matter increase partitioned to the roots.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    FR: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.FSTB", "title": "<code>FSTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>fraction of total above ground dry matter increase partitioned to the stems [kg/kg, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>FS</code> <code>Series[float]</code> <p>Fraction of total above ground dry matter increase partitioned to the stems.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class FSTB(BaseTableModel):\n    \"\"\"fraction of total above ground dry matter increase partitioned to the stems [kg/kg, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        FS (Series[float]): Fraction of total above ground dry matter increase partitioned to the stems.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    FS: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.GCTB", "title": "<code>GCTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Leaf Area Index [0..12 (m2 leaf)/(m2 soil), R], as function of dev. stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>LAI</code> <code>Series[float]</code> <p>Leaf Area Index of the crop.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class GCTB(BaseTableModel):\n    \"\"\"Leaf Area Index [0..12 (m2 leaf)/(m2 soil), R], as function of dev. stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        LAI (Series[float]): Leaf Area Index of the crop.\n    \"\"\"\n\n    DVS: Series[float] = pa.Field(**DVSRANGE)\n    LAI: Series[float] = pa.Field(ge=0.0, le=12.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.GrasslandManagement", "title": "<code>GrasslandManagement</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Settings specific to the dynamic grass growth module.</p> <p>Attributes:</p> Name Type Description <code>seqgrazmow</code> <code>IntList</code> <p>sequence of periods with different practices within calender year. Available options:</p> <ul> <li>1 - Grazing</li> <li>2 - Mowing</li> <li>3 - Grazing with dewooling</li> </ul> <code>swharvest</code> <code>Literal[1, 2]</code> <p>Switch for timing harvest, either for mowing or grazing</p> <ul> <li>1 - Use dry matter threshold</li> <li>2 - Use fixed dates</li> </ul> <code>dateharvest</code> <code>Optional[_DateList]</code> <p>harvest dates (maximum 999)</p> <code>swdmgrz</code> <code>Optional[Literal[1, 2]]</code> <p>Switch for dry matter threshold to trigger harvest by grazing</p> <ul> <li>1 - Use fixed threshold</li> <li>2 - Use flexible threshold</li> </ul> <code>dmgrazing</code> <code>Optional[ _Arrays)]</code> <p>Minimum dry matter amount for cattle to enter the field [0..1d6 kg DM/ha, R]</p> <code>dmgrztb</code> <code>Optional[int]</code> <p>List threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger grazing as function of daynumber [1..366 d, R]</p> <code>maxdaygrz</code> <code>Optional[int]</code> <p>Maximum growing period after harvest [1..366 -, I]</p> <code>swlossgrz</code> <code>Optional[Literal[0, 1]]</code> <p>Switch for losses due to insufficient pressure head during grazing</p> <ul> <li>0 - No loss</li> <li>1 - Losses due to treading</li> </ul> <code>tagprest</code> <code>Optional[float]</code> <p>Minimum amount of above ground DM after grazing [0..1d6 kg DM/ha, R]</p> <code>dewrest</code> <code>Optional[float]</code> <p>Remaining yield above ground after dewooling event [0..1d6 kg DM/ha, R]</p> <code>_table_lsda</code> <code>Optional[Table]</code> <p>Actual livestock density of each grazing period</p> <code>_table_lsdb</code> <code>Optional[Table]</code> <p>Relation between livestock density, number of grazing days and dry matter uptake</p> <code>swdmmow</code> <code>Optional[int]</code> <p>Switch for dry matter threshold to trigger harvest by mowing</p> <ul> <li>1 - Use fixed threshold</li> <li>2 - Use flexible threshold</li> </ul> <code>dmharvest</code> <code>Optional[float]</code> <p>Threshold of above ground dry matter to trigger mowing [0..1d6 kg DM/ha, R]</p> <code>daylastharvest</code> <code>Optional[int]</code> <p>Last calendar day on which mowing may occur [1..366 -, I]</p> <code>dmlastharvest</code> <code>Optional[float]</code> <p>Minimum above ground dry matter for mowing on last date [0..1d6 kg DM/ha, R]</p> <code>dmmowtb</code> <code>Optional[int]</code> <p>Dry matter mowing threshold</p> <code>maxdaymow</code> <code>Optional[int]</code> <p>Maximum growing period after harvest [1..366 -, I]</p> <code>swlossmow</code> <code>Optional[int]</code> <p>Switch for losses due to insufficient pressure head during mowing</p> <ul> <li>0 - No loss</li> <li>1 - Losses due to treading</li> </ul> <code>mowrest</code> <code>Optional[float]</code> <p>Remaining yield above ground after mowing event [0..1d6 kg DM/ha, R]</p> <code>_table_dmmowdelay</code> <code>Optional[Optional[Table]]</code> <p>Relation between dry matter harvest [0..1d6 kg/ha, R] and days of delay in regrowth [0..366 d, I] after mowing</p> <code>swpotrelmf</code> <code>int</code> <p>Switch for calculation of potential yield</p> <ul> <li>1 - theoretical potential yield</li> <li>2 - attainable yield</li> </ul> <code>relmf</code> <code>float</code> <p>Relative management factor to reduce theoretical potential yield to attainable yield [0..1 -, R]</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class GrasslandManagement(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Settings specific to the dynamic grass growth module.\n\n    Attributes:\n        seqgrazmow (_IntList): sequence of periods with different practices within calender year. Available options:\n\n            * 1 - Grazing\n            * 2 - Mowing\n            * 3 - Grazing with dewooling\n\n        swharvest (Literal[1, 2]): Switch for timing harvest, either for mowing or grazing\n\n            * 1 - Use dry matter threshold\n            * 2 - Use fixed dates\n\n        dateharvest Optional[(_DateList)]: harvest dates (maximum 999)\n        swdmgrz Optional[(Literal[1, 2])]: Switch for dry matter threshold to trigger harvest by grazing\n\n            * 1 - Use fixed threshold\n            * 2 - Use flexible threshold\n\n        dmgrazing Optional[ _Arrays)]: Minimum dry matter amount for cattle to enter the field [0..1d6 kg DM/ha, R]\n        dmgrztb Optional[(int)]: List threshold of above ground dry matter [0..1d6 kg DM/ha, R] to trigger grazing as function of daynumber [1..366 d, R]\n        maxdaygrz Optional[(int)]: Maximum growing period after harvest [1..366 -, I]\n        swlossgrz Optional[(Literal[0, 1])]: Switch for losses due to insufficient pressure head during grazing\n\n            * 0 - No loss\n            * 1 - Losses due to treading\n\n        tagprest Optional[(float)]: Minimum amount of above ground DM after grazing [0..1d6 kg DM/ha, R]\n        dewrest Optional[(float)]: Remaining yield above ground after dewooling event [0..1d6 kg DM/ha, R]\n        _table_lsda (Optional[_Table]): Actual livestock density of each grazing period\n        _table_lsdb (Optional[_Table]): Relation between livestock density, number of grazing days and dry matter uptake\n        swdmmow Optional[(int)]: Switch for dry matter threshold to trigger harvest by mowing\n\n            * 1 - Use fixed threshold\n            * 2 - Use flexible threshold\n\n        dmharvest Optional[(float)]: Threshold of above ground dry matter to trigger mowing [0..1d6 kg DM/ha, R]\n        daylastharvest Optional[(int)]: Last calendar day on which mowing may occur [1..366 -, I]\n        dmlastharvest Optional[(float)]: Minimum above ground dry matter for mowing on last date [0..1d6 kg DM/ha, R]\n        dmmowtb Optional[(int)]: Dry matter mowing threshold\n        maxdaymow Optional[(int)]:Maximum growing period after harvest [1..366 -, I]\n        swlossmow Optional[(int)]: Switch for losses due to insufficient pressure head during mowing\n\n            * 0 - No loss\n            * 1 - Losses due to treading\n\n        mowrest Optional[(float)]: Remaining yield above ground after mowing event [0..1d6 kg DM/ha, R]\n        _table_dmmowdelay Optional[(Optional[_Table])]: Relation between dry matter harvest [0..1d6 kg/ha, R] and days of delay in regrowth [0..366 d, I] after mowing\n        swpotrelmf (int): Switch for calculation of potential yield\n\n            * 1 - theoretical potential yield\n            * 2 - attainable yield\n\n        relmf (float): Relative management factor to reduce theoretical potential yield to attainable yield [0..1 -, R]\n    \"\"\"\n\n    seqgrazmow: _IntList | None = None\n    swharvest: _Literal[1, 2] | None = None\n    dateharvest: _Arrays | None = None\n    swdmgrz: _Literal[1, 2] | None = None\n    dmgrazing: _Decimal2f | None = None\n    dmgrztb: _Arrays | None = None\n    maxdaygrz: int | None = None\n    swlossgrz: _Literal[0, 1] | None = None\n    tagprest: _Decimal2f | None = None\n    dewrest: _Decimal2f | None = None\n    lsda: _Table | None = None\n    lsdb: _Table | None = None\n    swdmmow: int | None = None\n    dmharvest: _Decimal2f | None = None\n    daylastharvest: int | None = None\n    dmlastharvest: _Decimal2f | None = None\n    dmmowtb: _Arrays | None = None\n    maxdaymow: int | None = None\n    swlossmow: int | None = None\n    mowrest: _Decimal2f | None = None\n    dmmowdelay: _Table | None = None\n    swpotrelmf: int | None = None\n    relmf: _Decimal2f | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.Interception", "title": "<code>Interception</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Interception settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swinter</code> <code>Literal[0, 1, 2]</code> <p>Switch for rainfall interception method</p> <ul> <li>0 - No interception</li> <li>1 - Agricultural crops (Von Hoyningen-Hune and Braden)</li> <li>2 - Trees and forests (Gash)</li> </ul> <code>cofab</code> <code>Optional[float]</code> <p>Interception coefficient, corresponding to maximum interception amount</p> <code>_table_intertb</code> <code>Optional[Table]</code> <p>_table with the following columns as a function of time T:</p> <ul> <li>PFREE - Free throughfall coefficient</li> <li>PSTEM - Stemflow coefficient</li> <li>SCANOPY - Canopy storage coefficient</li> <li>AVPREC = Average rainfall intensity</li> <li>AVEVAP = Average evaporation intensity during rainfall from a wet canopy</li> </ul> Source code in <code>pyswap/components/crop.py</code> <pre><code>class Interception(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Interception settings for .crp file.\n\n    Attributes:\n        swinter (Literal[0, 1, 2]): Switch for rainfall interception method\n\n            * 0 - No interception\n            * 1 - Agricultural crops (Von Hoyningen-Hune and Braden)\n            * 2 - Trees and forests (Gash)\n\n        cofab (Optional[float]): Interception coefficient, corresponding to maximum interception amount\n        _table_intertb (Optional[_Table]): _table with the following columns as a function of time T:\n\n            * PFREE - Free throughfall coefficient\n            * PSTEM - Stemflow coefficient\n            * SCANOPY - Canopy storage coefficient\n            * AVPREC = Average rainfall intensity\n            * AVEVAP = Average evaporation intensity during rainfall from a wet canopy\n    \"\"\"\n\n    swinter: _Literal[0, 1, 2] | None = None\n    cofab: float | None = _Field(default=None, **_UNITRANGE)\n    intertb: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.KYTB", "title": "<code>KYTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Yield response factor [0..5 -, R], as function of dev. stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>KY</code> <code>Series[float]</code> <p>Yield response factor of the crop.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class KYTB(BaseTableModel):\n    \"\"\"Yield response factor [0..5 -, R], as function of dev. stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        KY (Series[float]): Yield response factor of the crop.\n    \"\"\"\n\n    DVS: Series[float] = pa.Field(**DVSRANGE)\n    KY: Series[float] = pa.Field(ge=0.0, le=5.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.LSDATB", "title": "<code>LSDATB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Actual livestock density of each grazing period</p> <p>Note</p> <p>total number of periods should be equal to number of periods in SEQGRAZMOW</p> <p>Attributes:</p> Name Type Description <code>SEQNR</code> <code>Series[int]</code> <p>number of the sequence period with mowing/grazing [0..366 d, I]</p> <code>LSDA</code> <code>Series[float]</code> <p>Actual Live Stock Density of the grazing period [0.0..1000.0 LS/ha, R]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class LSDATB(BaseTableModel):\n    \"\"\"Actual livestock density of each grazing period\n\n    !!! note\n\n        total number of periods should be equal to number of periods in SEQGRAZMOW\n\n    Attributes:\n        SEQNR (Series[int]): number of the sequence period with mowing/grazing [0..366 d, I]\n        LSDA (Series[float]): Actual Live Stock Density of the grazing period [0.0..1000.0 LS/ha, R]\n    \"\"\"\n\n    SEQNR: Series[int] = pa.Field(**YEARRANGE)\n    LSDA: Series[float] = pa.Field(ge=0.0, le=1000.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.LSDBTB", "title": "<code>LSDBTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Relation between livestock density, number of grazing days and dry matter uptake</p> <p>Attributes:</p> Name Type Description <code>LSDB</code> <code>Series[float]</code> <p>Basic Live Stock Density [0.0..1000.0 LS/ha, R]</p> <code>DAYSGRAZING</code> <code>Series[float]</code> <p>Maximum days of grazing [0.0..366.0 d, R]</p> <code>UPTGRAZING</code> <code>Series[float]</code> <p>Dry matter uptake by grazing [0.0..1000.0 kg/ha, R] (kg/ha DM)</p> <code>LOSSGRAZING</code> <code>Series[float]</code> <p>Dry matter loss during grazing due to droppings and treading [0.0..1000.0 kg/ha, R] (kg/ha DM)</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class LSDBTB(BaseTableModel):\n    \"\"\"Relation between livestock density, number of grazing days and dry matter uptake\n\n    Attributes:\n        LSDB (Series[float]): Basic Live Stock Density [0.0..1000.0 LS/ha, R]\n        DAYSGRAZING (Series[float]): Maximum days of grazing [0.0..366.0 d, R]\n        UPTGRAZING (Series[float]): Dry matter uptake by grazing [0.0..1000.0 kg/ha, R] (kg/ha DM)\n        LOSSGRAZING (Series[float]): Dry matter loss during grazing due to droppings and treading [0.0..1000.0 kg/ha, R] (kg/ha DM)\n    \"\"\"\n\n    LSDb: Series[float] = pa.Field(ge=0.0, le=1000.0)\n    DAYSGRAZING: Series[float] = pa.Field(**YEARRANGE)\n    UPTGRAZING: Series[float] = pa.Field(ge=0.0, le=1000.0)\n    LOSSGRAZING: Series[float] = pa.Field(ge=0.0, le=1000.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.MRFTB", "title": "<code>MRFTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Ratio root total respiration / maintenance respiration [1..5.0 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>MAX_RESP_FACTOR</code> <code>Series[float]</code> <p>Ratio root total respiration / maintenance respiration.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class MRFTB(BaseTableModel):\n    \"\"\"Ratio root total respiration / maintenance respiration [1..5.0 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        MAX_RESP_FACTOR (Series[float]): Ratio root total respiration / maintenance respiration.\n    \"\"\"\n\n    DVS: Series[float] = pa.Field(**DVSRANGE)\n    MAX_RESP_FACTOR: Series[float] = pa.Field(ge=1.0, le=5.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.OxygenStress", "title": "<code>OxygenStress</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Oxygen stress settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swoxygen</code> <code>Literal[0, 1, 2]</code> <p>Switch for oxygen stress</p> <ul> <li>0 - No oxygen stress</li> <li>1 - Oxygen stress according to Feddes et al. (1978)</li> <li>2 - Oxygen stress according to Bartholomeus et al. (2008)</li> </ul> <code>swoxygentype</code> <code>Optional[Literal[1, 2]]</code> <p>switch for physical processes or repro. functions to calculate oxygen stress</p> <ul> <li>1 - physical processes</li> <li>2 - reproduction functions</li> </ul> <code>swwrtnonox</code> <code>Literal[0, 1]</code> <p>Switch for checking aerobic conditions in root zone to stop root(zone) development</p> <code>aeratecrit</code> <code>Optional[float]</code> <p>Threshold to stop root extension in case of oxygenstress; 0.0 maximum oxygen stress</p> <code>hlim1</code> <code>Optional[float]</code> <p>No water extraction at higher pressure heads</p> <code>hlim2u</code> <code>Optional[float]</code> <p>H below which optimum water extr. starts for top layer</p> <code>hlim2l</code> <code>Optional[float]</code> <p>H below which optimum water extr. starts for sub layer</p> <code>q10_microbial</code> <code>Optional[float]</code> <p>Relative increase in microbial respiration at temperature increase of 10 C</p> <code>specific_resp_humus</code> <code>Optional[float]</code> <p>Respiration rate of humus at 25 C</p> <code>srl</code> <code>Optional[float]</code> <p>Specific root length</p> <code>swrootradius</code> <code>Optional[Literal[1, 2]]</code> <p>Switch for calculation of root radius</p> <ul> <li>1 - Calculate root radius</li> <li>2 - Root radius given in an input file</li> </ul> <code>dry_mat_cont_roots</code> <code>Optional[float]</code> <p>Dry matter content of roots</p> <code>air_filled_root_por</code> <code>Optional[float]</code> <p>Air filled root porosity</p> <code>spec_weight_root_tissue</code> <code>Optional[float]</code> <p>Specific weight of non-airfilled root tissue</p> <code>var_a</code> <code>Optional[float]</code> <p>Variance of root radius</p> <code>root_radiuso2</code> <code>Optional[float]</code> <p>Root radius for oxygen stress module</p> <code>q10_root</code> <code>Optional[float]</code> <p>Relative increase in root respiration at temperature increase of 10 oC</p> <code>f_senes</code> <code>Optional[float]</code> <p>Reduction factor for senescence, used for maintenance respiration</p> <code>c_mroot</code> <code>Optional[float]</code> <p>Maintenance coefficient of root</p> <code>_table_max_resp_factor</code> <code>Optional[Table]</code> <p>Ratio root total respiration / maintenance respiration as a function of development stage</p> <code>_table_dvs_w_root_ss</code> <code>Optional[Table]</code> <p>List dry weight of roots at soil surface as a function of development stage</p> <p>TODO: Find a way to validate the parameters that are required when the croptype=1 and swoxygen=2 (currently I cannot access the croptype parameter)</p> <p>move it to the Model class validation at the end, when all the params are available</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class OxygenStress(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Oxygen stress settings for .crp file.\n\n    Attributes:\n        swoxygen (Literal[0, 1, 2]): Switch for oxygen stress\n\n            * 0 - No oxygen stress\n            * 1 - Oxygen stress according to Feddes et al. (1978)\n            * 2 - Oxygen stress according to Bartholomeus et al. (2008)\n\n        swoxygentype (Optional[Literal[1, 2]]): switch for physical processes or repro. functions to calculate oxygen stress\n\n            * 1 - physical processes\n            * 2 - reproduction functions\n\n        swwrtnonox (Literal[0, 1]): Switch for checking aerobic conditions in root zone to stop root(zone) development\n        aeratecrit (Optional[float]): Threshold to stop root extension in case of oxygenstress; 0.0 maximum oxygen stress\n        hlim1 (Optional[float]): No water extraction at higher pressure heads\n        hlim2u (Optional[float]): H below which optimum water extr. starts for top layer\n        hlim2l (Optional[float]): H below which optimum water extr. starts for sub layer\n        q10_microbial (Optional[float]): Relative increase in microbial respiration at temperature increase of 10 C\n        specific_resp_humus (Optional[float]): Respiration rate of humus at 25 C\n        srl (Optional[float]): Specific root length\n        swrootradius (Optional[Literal[1, 2]]): Switch for calculation of root radius\n\n            * 1 - Calculate root radius\n            * 2 - Root radius given in an input file\n\n        dry_mat_cont_roots (Optional[float]): Dry matter content of roots\n        air_filled_root_por (Optional[float]): Air filled root porosity\n        spec_weight_root_tissue (Optional[float]): Specific weight of non-airfilled root tissue\n        var_a (Optional[float]): Variance of root radius\n        root_radiuso2 (Optional[float]): Root radius for oxygen stress module\n        q10_root (Optional[float]): Relative increase in root respiration at temperature increase of 10 oC\n        f_senes (Optional[float]): Reduction factor for senescence, used for maintenance respiration\n        c_mroot (Optional[float]): Maintenance coefficient of root\n        _table_max_resp_factor (Optional[_Table]): Ratio root total respiration / maintenance respiration as a function of development stage\n        _table_dvs_w_root_ss (Optional[_Table]): List dry weight of roots at soil surface as a function of development stage\n\n    TODO: Find a way to validate the parameters that are required when the\n    croptype=1 and swoxygen=2 (currently I cannot access the croptype parameter)\n    &gt;&gt; move it to the Model class validation at the end, when all the params are available\n    \"\"\"\n\n    swoxygen: _Literal[0, 1, 2] | None = None\n    swwrtnonox: _Literal[0, 1] | None = None\n    swoxygentype: _Literal[1, 2] | None = None\n    aeratecrit: float | None = _Field(default=None, ge=0.0001, le=1.0)\n    hlim1: float | None = _Field(default=None, ge=-100.0, le=100.0)\n    hlim2u: float | None = _Field(default=None, ge=-1000.0, le=100.0)\n    hlim2l: float | None = _Field(default=None, ge=-1000.0, le=100.0)\n    q10_microbial: float | None = _Field(default=None, ge=1.0, le=4.0)\n    specific_resp_humus: float | None = _Field(default=None, **_UNITRANGE)\n    srl: float | None = _Field(default=None, ge=0.0, le=1.0e10)\n    swrootradius: _Literal[1, 2] | None = None\n    dry_mat_cont_roots: float | None = _Field(default=None, **_UNITRANGE)\n    air_filled_root_por: float | None = _Field(default=None, **_UNITRANGE)\n    spec_weight_root_tissue: float | None = _Field(default=None, ge=0.0, le=1.0e5)\n    var_a: float | None = _Field(default=None, **_UNITRANGE)\n    root_radiuso2: float | None = _Field(default=None, ge=1.0e-6, le=0.1)\n    q10_root: float | None = _Field(default=None, ge=1.0, le=4.0)\n    f_senes: float | None = _Field(default=None, **_UNITRANGE)\n    c_mroot: float | None = _Field(default=None, **_UNITRANGE)\n    mrftb: _Arrays | None = None\n    wrtb: _Arrays | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.Preparation", "title": "<code>Preparation</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Preparation, sowing and germination settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swprep</code> <code>Literal[0, 1]</code> <p>Switch for preparation</p> <code>swsow</code> <code>Literal[0, 1]</code> <p>Switch for sowing</p> <code>swgerm</code> <code>Literal[0, 1, 2]</code> <p>Switch for germination</p> <ul> <li>0 - No germination</li> <li>1 - Germination with temperature sum</li> <li>2 - Germination with temperature sum and water potential</li> </ul> <code>swharv</code> <code>Literal[0, 1]</code> <p>Switch for harvest</p> <ul> <li>0 - Timing of harvest depends on end of growing period (CROPEND)</li> <li>1 - Timing of harvest depends on development stage (DVSEND)</li> </ul> <code>dvsend</code> <code>Optional[float]</code> <p>Development stage at harvest</p> <code>zprep</code> <code>Optional[float]</code> <p>Z-level for monitoring work-ability for the crop</p> <code>hprep</code> <code>Optional[float]</code> <p>Maximum pressure head during preparation</p> <code>maxprepdelay</code> <code>Optional[int]</code> <p>Maximum delay of preparation from start of growing season</p> <code>zsow</code> <code>Optional[float]</code> <p>Z-level for monitoring work-ability for the crop</p> <code>hsow</code> <code>Optional[float]</code> <p>Maximum pressure head during sowing</p> <code>ztempsow</code> <code>Optional[float]</code> <p>Z-level for monitoring temperature for sowing</p> <code>tempsow</code> <code>Optional[float]</code> <p>Soil temperature needed for sowing</p> <code>maxsowdelay</code> <code>Optional[int]</code> <p>Maximum delay of sowing from start of growing season</p> <code>tsumemeopt</code> <code>Optional[float]</code> <p>Temperature sum needed for crop emergence</p> <code>tbasem</code> <code>Optional[float]</code> <p>Minimum temperature, used for germination trajectory</p> <code>teffmx</code> <code>Optional[float]</code> <p>Maximum temperature, used for germination trajectory</p> <code>hdrygerm</code> <code>Optional[float]</code> <p>Pressure head rootzone for dry germination trajectory</p> <code>hwetgerm</code> <code>Optional[float]</code> <p>Pressure head rootzone for wet germination trajectory</p> <code>zgerm</code> <code>Optional[float]</code> <p>Z-level for monitoring average pressure head</p> <code>agerm</code> <code>Optional[float]</code> <p>A-coefficient Eq. 24/25 Feddes &amp; Van Wijk</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class Preparation(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Preparation, sowing and germination settings for .crp file.\n\n    Attributes:\n        swprep (Literal[0, 1]): Switch for preparation\n        swsow (Literal[0, 1]): Switch for sowing\n        swgerm (Literal[0, 1, 2]): Switch for germination\n\n            * 0 - No germination\n            * 1 - Germination with temperature sum\n            * 2 - Germination with temperature sum and water potential\n\n        swharv (Literal[0, 1]): Switch for harvest\n\n            * 0 - Timing of harvest depends on end of growing period (CROPEND)\n            * 1 - Timing of harvest depends on development stage (DVSEND)\n\n        dvsend (Optional[float]): Development stage at harvest\n        zprep (Optional[float]): Z-level for monitoring work-ability for the crop\n        hprep (Optional[float]): Maximum pressure head during preparation\n        maxprepdelay (Optional[int]): Maximum delay of preparation from start of growing season\n        zsow (Optional[float]): Z-level for monitoring work-ability for the crop\n        hsow (Optional[float]): Maximum pressure head during sowing\n        ztempsow (Optional[float]): Z-level for monitoring temperature for sowing\n        tempsow (Optional[float]): Soil temperature needed for sowing\n        maxsowdelay (Optional[int]): Maximum delay of sowing from start of growing season\n        tsumemeopt (Optional[float]): Temperature sum needed for crop emergence\n        tbasem (Optional[float]): Minimum temperature, used for germination trajectory\n        teffmx (Optional[float]): Maximum temperature, used for germination trajectory\n        hdrygerm (Optional[float]): Pressure head rootzone for dry germination trajectory\n        hwetgerm (Optional[float]): Pressure head rootzone for wet germination trajectory\n        zgerm (Optional[float]): Z-level for monitoring average pressure head\n        agerm (Optional[float]): A-coefficient Eq. 24/25 Feddes &amp; Van Wijk\n    \"\"\"\n\n    swprep: _Literal[0, 1] | None = _Field(default=None)\n    swsow: _Literal[0, 1] | None = None\n    swgerm: _Literal[0, 1, 2] | None = None\n    swharv: _Literal[0, 1] | None = None\n    dvsend: float | None = _Field(default=None, ge=0.0, le=3.0)\n    zprep: float | None = _Field(default=None, ge=-100.0, le=0.0)\n    hprep: float | None = _Field(default=None, ge=-200.0, le=0.0)\n    maxprepdelay: int | None = _Field(default=None, ge=1, le=366)\n    zsow: float | None = _Field(default=None, ge=-100.0, le=0.0)\n    hsow: float | None = _Field(default=None, ge=-200.0, le=0.0)\n    ztempsow: float | None = _Field(default=None, ge=-100.0, le=0.0)\n    tempsow: float | None = _Field(default=None, ge=0.0, le=30.0)\n    maxsowdelay: int | None = _Field(default=None, ge=1, le=366)\n    tsumemeopt: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    tbasem: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    teffmx: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    hdrygerm: float | None = _Field(default=None, ge=-1000.0, le=1000.0)\n    hwetgerm: float | None = _Field(default=None, ge=-100.0, le=1000.0)\n    zgerm: float | None = _Field(default=None, ge=-100.0, le=1000.0)\n    agerm: float | None = _Field(default=None, ge=0.0, le=1000.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RDCTB", "title": "<code>RDCTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>List root density [0..100 cm/cm3, R] as function of relative rooting depth [0..1 -, R]</p> <p>Attributes:</p> Name Type Description <code>RRD</code> <code>Series[float]</code> <p>Relative rooting depth of the crop.</p> <code>RDENS</code> <code>Series[float]</code> <p>Root density of the crop.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RDCTB(BaseTableModel):\n    \"\"\"List root density [0..100 cm/cm3, R] as function of relative rooting depth [0..1 -, R]\n\n    Attributes:\n        RRD (Series[float]): Relative rooting depth of the crop.\n        RDENS (Series[float]): Root density of the crop.\n\n    \"\"\"\n\n    RRD: Series[float] = pa.Field(ge=0.0, le=100.0)\n    RDENS: Series[float] = pa.Field(**UNITRANGE)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RDRRTB", "title": "<code>RDRRTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>relative death rates of roots [kg/kg/d] as function of development stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>RDRR</code> <code>Series[float]</code> <p>Relative death rates of roots.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RDRRTB(BaseTableModel):\n    \"\"\"relative death rates of roots [kg/kg/d] as function of development stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        RDRR (Series[float]): Relative death rates of roots.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    RDRR: Series[float] = pa.Field(ge=0.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RDRSTB", "title": "<code>RDRSTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>relative death rates of stems [kg/kg/d] as function of development stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>RDRS</code> <code>Series[float]</code> <p>Relative death rates of stems.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RDRSTB(BaseTableModel):\n    \"\"\"relative death rates of stems [kg/kg/d] as function of development stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        RDRS (Series[float]): Relative death rates of stems.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    RDRS: Series[float] = pa.Field(ge=0.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RDTB", "title": "<code>RDTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Rooting Depth [0..1000 cm, R], as a function of development stage [0..2 -, R].</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>RD</code> <code>Series[float]</code> <p>Rooting depth of the crop.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RDTB(BaseTableModel):\n    \"\"\"Rooting Depth [0..1000 cm, R], as a function of development stage [0..2 -, R].\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        RD (Series[float]): Rooting depth of the crop.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    RD: Series[float] = pa.Field(ge=0.0, le=100.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RFSETB", "title": "<code>RFSETB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>reduction factor of senescence [-, R] as function of development stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>RFSE</code> <code>Series[float]</code> <p>Reduction factor of senescence.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RFSETB(BaseTableModel):\n    \"\"\"reduction factor of senescence [-, R] as function of development stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        RFSE (Series[float]): Reduction factor of senescence.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    RFSE: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.RLWTB", "title": "<code>RLWTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>rooting depth RL [0..5000 cm, R] as function of root weight RW [0..5000 kg DM/ha, R]</p> <p>Attributes:</p> Name Type Description <code>RW</code> <code>Series[float]</code> <p>rooting depth</p> <code>RL</code> <code>Series[float]</code> <p>root weight</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class RLWTB(BaseTableModel):\n    \"\"\"rooting depth RL [0..5000 cm, R] as function of root weight RW [0..5000 kg DM/ha, R]\n\n    Attributes:\n        RW (Series[float]): rooting depth\n        RL (Series[float]): root weight\n    \"\"\"\n\n    RW: Series[float] = pa.Field(ge=0.0, le=5000.0)\n    RL: Series[float] = pa.Field(ge=0.0, le=5000.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.SLATB", "title": "<code>SLATB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>leaf area [0..1 ha/kg, R] as function of crop development stage [0..2 -, R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>SLA</code> <code>Series[float]</code> <p>Leaf area.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class SLATB(BaseTableModel):\n    \"\"\"leaf area [0..1 ha/kg, R] as function of crop development stage [0..2 -, R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        SLA (Series[float]): Leaf area.\n    \"\"\"\n\n    DVS: Series[float] | None = pa.Field(**DVSRANGE)\n    DNR: Series[float] | None = pa.Field(**YEARRANGE)\n    SLA: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.SaltStress", "title": "<code>SaltStress</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Salt stress settings for .crp file.</p> <p>Attributes:</p> Name Type Description <code>swsalinity</code> <code>Literal[0, 1, 2]</code> <p>Switch for salt stress</p> <ul> <li>0 - No salt stress</li> <li>1 - Maas and Hoffman reduction function</li> <li>2 - Use osmotic head</li> </ul> <code>saltmax</code> <code>Optional[float]</code> <p>Threshold salt concentration in soil water</p> <code>saltslope</code> <code>Optional[float]</code> <p>Decline of root water uptake above threshold</p> <code>salthead</code> <code>Optional[float]</code> <p>Conversion factor salt concentration (mg/cm3) into osmotic head (cm)</p> Source code in <code>pyswap/components/crop.py</code> <pre><code>class SaltStress(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Salt stress settings for .crp file.\n\n    Attributes:\n        swsalinity (Literal[0, 1, 2]): Switch for salt stress\n\n            * 0 - No salt stress\n            * 1 - Maas and Hoffman reduction function\n            * 2 - Use osmotic head\n\n        saltmax (Optional[float]): Threshold salt concentration in soil water\n        saltslope (Optional[float]): Decline of root water uptake above threshold\n        salthead (Optional[float]): Conversion factor salt concentration (mg/cm3) into osmotic head (cm)\n    \"\"\"\n\n    swsalinity: _Literal[0, 1, 2] | None = None\n    saltmax: float | None = _Field(default=None, ge=0.0, le=100.0)\n    saltslope: float | None = _Field(default=None, **_UNITRANGE)\n    salthead: float | None = _Field(default=None, ge=0.0, le=1000.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.TMNFTB", "title": "<code>TMNFTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>reduction factor of AMAX [-, R] as function of minimum day temperature [-10..50 oC, R]</p> <p>Attributes:</p> Name Type Description <code>TMNR</code> <code>Series[float]</code> <p>Minimum temperature.</p> <code>TMNF</code> <code>Series[float]</code> <p>Reduction factor of AMAX.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class TMNFTB(BaseTableModel):\n    \"\"\"reduction factor of AMAX [-, R] as function of minimum day temperature [-10..50 oC, R]\n\n    Attributes:\n        TMNR (Series[float]): Minimum temperature.\n        TMNF (Series[float]): Reduction factor of AMAX.\n    \"\"\"\n\n    TMNR: Series[float] = pa.Field(ge=-10.0, le=50.0)\n    TMNF: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.TMPFTB", "title": "<code>TMPFTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>reduction factor of AMAX [-, R] as function of average day temperature [-10..50 oC, R]</p> <p>Attributes:</p> Name Type Description <code>TAVD</code> <code>Series[float]</code> <p>Minimum temperature.</p> <code>TMPF</code> <code>Series[float]</code> <p>Reduction factor of AMAX.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class TMPFTB(BaseTableModel):\n    \"\"\"reduction factor of AMAX [-, R] as function of average day temperature [-10..50 oC, R]\n\n    Attributes:\n        TAVD (Series[float]): Minimum temperature.\n        TMPF (Series[float]): Reduction factor of AMAX.\n    \"\"\"\n\n    TAVD: Series[float] = pa.Field(ge=-10.0, le=50.0)\n    TMPF: Series[float] = pa.Field(ge=0.0, le=1.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.crop.WRTB", "title": "<code>WRTB</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>dry weight of roots at soil surface [0..10 kg/m3, R], as a function of development stage [0..2 -,R]</p> <p>Attributes:</p> Name Type Description <code>DVS</code> <code>Series[float]</code> <p>Development stage of the crop.</p> <code>W_ROOT_SS</code> <code>Series[float]</code> <p>Dry weight of roots at soil surface.</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class WRTB(BaseTableModel):\n    \"\"\"dry weight of roots at soil surface [0..10 kg/m3, R], as a function of development stage [0..2 -,R]\n\n    Attributes:\n        DVS (Series[float]): Development stage of the crop.\n        W_ROOT_SS (Series[float]): Dry weight of roots at soil surface.\n    \"\"\"\n\n    DVS: Series[float] = pa.Field(**DVSRANGE)\n    W_ROOT_SS: Series[float] = pa.Field(ge=0.0, le=10.0)\n</code></pre>"}, {"location": "reference/model-components/#crop_database", "title": "Crop database", "text": "<p>Classes that wrap the crop parameters database for WOFOST (A. de Wit).</p> <p>From the classes here, only the WOFOSTCropDB is directly accessed by the user, however, the final usable object will be the CropVariety.</p> <p>Classes:</p> Name Description <code>WOFOSTCropFile</code> <p>Manage a single WOFOST crop file content.</p> <code>CropVariety</code> <p>Manage crop variety parameters.</p> <code>WOFOSTCropDB</code> <p>Manage a single WOFOST crop file content.</p>"}, {"location": "reference/model-components/#pyswap.db.cropdb.CropVariety", "title": "<code>CropVariety</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Manage crop variety parameters.</p> <p>Attributes:</p> Name Type Description <code>variety</code> <code>dict</code> <p>Parameters for crop variety from the YAML file (with metadata).</p> Properties <p>parameters: Bare parameters of the variety (all metadata removed). metadata: The metadata of the variety.</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>class CropVariety(BaseModel):\n    \"\"\"Manage crop variety parameters.\n\n    Attributes:\n        variety: Parameters for crop variety from the YAML file (with metadata).\n\n    Properties:\n        parameters: Bare parameters of the variety (all metadata removed).\n        metadata: The metadata of the variety.\n    \"\"\"\n\n    variety: dict\n\n    @computed_field(return_type=dict)\n    def parameters(self):\n        params = {\n            k.lower(): v[0]\n            for k, v in self.variety.items()\n            if k != \"Metadata\" and v[0] != -99.0\n        }\n        return self._format_tables(params)\n\n    @computed_field(return_type=dict)\n    def metadata(self):\n        return self.variety[\"Metadata\"]\n\n    @staticmethod\n    def _format_tables(table: dict) -&gt; dict[str, list[list]]:\n        \"\"\"pre-format tables from YAML to a list of lists.\n\n        In the YAML file, the tables are seem to be formatted\n        in a way where the odd elements in the lists are one\n        column and the even elements are the other. This method\n        converts this format to a dictionary with two lists.\n        \"\"\"\n\n        formatted = {\n            k: [list(row) for row in zip(v[::2], v[1::2], strict=False)]\n            if isinstance(v, list)\n            else v\n            for k, v in table.items()\n        }\n\n        return formatted\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropDB", "title": "<code>WOFOSTCropDB</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Simple class for managing crop parameters files.</p> <p>Initially, it's meant to be used with A. de Wit's WOFOST crop parameters database which is a collection of YAML files. However, it can be easily extended to support other formats and databases when they emerge. All methods should return the content as WOFOSTCropFile instances. This way we ensure that whatever the source format is, the content is always usable in the same way.</p> <p>Attributes:</p> Name Type Description <code>libdir</code> <code>Path</code> <p>Path to the directory with crop parameters</p> Properties <p>croptypes: List all available crop types (files in the directory)</p> <p>Methods:</p> Name Description <code>load_crop_file</code> <p>Load a specific crop file and return the content as a WOFOSTCropFile instance</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>class WOFOSTCropDB(BaseModel):\n    \"\"\"Simple class for managing crop parameters files.\n\n    Initially, it's meant to be used with A. de Wit's WOFOST crop parameters\n    database which is a collection of YAML files. However, it can be easily\n    extended to support other formats and databases when they emerge. All\n    methods should return the content as WOFOSTCropFile instances. This way\n    we ensure that whatever the source format is, the content is always\n    usable in the same way.\n\n    Attributes:\n        libdir: Path to the directory with crop parameters\n\n    Properties:\n        croptypes: List all available crop types (files in the directory)\n\n    Methods:\n        load_crop_file: Load a specific crop file and return the content as a\n            WOFOSTCropFile instance\n    \"\"\"\n\n    libdir: Path = crop_params\n\n    @computed_field(return_type=None)\n    def croptypes(self):\n        \"\"\"Print the list of available files\"\"\"\n        pprint(load_yaml(crop_params / \"crops.yaml\")[\"available_crops\"])\n\n    def load_crop_file(self, crop: str) -&gt; WOFOSTCropFile:\n        \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n        path = (\n            self.libdir / f\"{crop}\"\n            if crop.endswith(\".yaml\")\n            else self.libdir / f\"{crop}.yaml\"\n        )\n        return WOFOSTCropFile(yaml_content=load_yaml(path))\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropDB.croptypes", "title": "<code>croptypes()</code>", "text": "<p>Print the list of available files</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>@computed_field(return_type=None)\ndef croptypes(self):\n    \"\"\"Print the list of available files\"\"\"\n    pprint(load_yaml(crop_params / \"crops.yaml\")[\"available_crops\"])\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropDB.load_crop_file", "title": "<code>load_crop_file(crop)</code>", "text": "<p>Load a specific crop file and return the content as a dictionary</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>def load_crop_file(self, crop: str) -&gt; WOFOSTCropFile:\n    \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    path = (\n        self.libdir / f\"{crop}\"\n        if crop.endswith(\".yaml\")\n        else self.libdir / f\"{crop}.yaml\"\n    )\n    return WOFOSTCropFile(yaml_content=load_yaml(path))\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropFile", "title": "<code>WOFOSTCropFile</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Manage a single WOFOST crop file content.</p> <p>Attributes:</p> Name Type Description <code>yaml_content</code> <code>dict</code> <p>The entire content of the YAML file.</p> Properties <p>metadata: Metadata of the crop file. ecotypes: List of eco-types. genericc3: Generic settings for C3 crop types. genericc4: Generic settings for C4 crop types. varieties: List of available varieties.</p> <p>Methods:</p> Name Description <code>get_variety</code> <p>Get the parameters of a specific variety.</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>class WOFOSTCropFile(BaseModel):\n    \"\"\"Manage a single WOFOST crop file content.\n\n    Attributes:\n        yaml_content: The entire content of the YAML file.\n\n    Properties:\n        metadata: Metadata of the crop file.\n        ecotypes: List of eco-types.\n        genericc3: Generic settings for C3 crop types.\n        genericc4: Generic settings for C4 crop types.\n        varieties: List of available varieties.\n\n    Methods:\n        get_variety: Get the parameters of a specific variety.\n    \"\"\"\n\n    yaml_content: dict\n\n    @computed_field(return_type=dict)\n    def metadata(self):\n        \"\"\"Metadata of the yaml crop file\"\"\"\n        return self.yaml_content[\"Metadata\"]\n\n    @computed_field(return_type=dict)\n    def ecotypes(self):\n        return list(self.yaml_content[\"CropParameters\"][\"EcoTypes\"])\n\n    @computed_field(return_type=dict)\n    def genericc3(self):\n        \"\"\"Get generic settings for C3 crop types - plants that bind CO2 into\n        3-phosphoglycerate having three carbon atoms. E.g., wheat, rice\"\"\"\n        return self.yaml_content[\"CropParameters\"][\"GenericC3\"]\n\n    @computed_field(return_type=dict)\n    def genericc4(self):\n        \"\"\"Get generic settings for C4 crop types - plants that bind CO2 into\n        oxaloacetate having four carbon atoms. E.g., maize, sugarcane\"\"\"\n        return self.yaml_content[\"CropParameters\"][\"GenericC4\"]\n\n    @computed_field(return_type=dict)\n    def varieties(self):\n        return list(self.yaml_content[\"CropParameters\"][\"Varieties\"])\n\n    def get_variety(self, variety: str):\n        return CropVariety(\n            variety=self.yaml_content[\"CropParameters\"][\"Varieties\"][variety]\n        )\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropFile.genericc3", "title": "<code>genericc3()</code>", "text": "<p>Get generic settings for C3 crop types - plants that bind CO2 into 3-phosphoglycerate having three carbon atoms. E.g., wheat, rice</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>@computed_field(return_type=dict)\ndef genericc3(self):\n    \"\"\"Get generic settings for C3 crop types - plants that bind CO2 into\n    3-phosphoglycerate having three carbon atoms. E.g., wheat, rice\"\"\"\n    return self.yaml_content[\"CropParameters\"][\"GenericC3\"]\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropFile.genericc4", "title": "<code>genericc4()</code>", "text": "<p>Get generic settings for C4 crop types - plants that bind CO2 into oxaloacetate having four carbon atoms. E.g., maize, sugarcane</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>@computed_field(return_type=dict)\ndef genericc4(self):\n    \"\"\"Get generic settings for C4 crop types - plants that bind CO2 into\n    oxaloacetate having four carbon atoms. E.g., maize, sugarcane\"\"\"\n    return self.yaml_content[\"CropParameters\"][\"GenericC4\"]\n</code></pre>"}, {"location": "reference/model-components/#pyswap.db.cropdb.WOFOSTCropFile.metadata", "title": "<code>metadata()</code>", "text": "<p>Metadata of the yaml crop file</p> Source code in <code>pyswap/db/cropdb.py</code> <pre><code>@computed_field(return_type=dict)\ndef metadata(self):\n    \"\"\"Metadata of the yaml crop file\"\"\"\n    return self.yaml_content[\"Metadata\"]\n</code></pre>"}, {"location": "reference/model-components/#irrigation", "title": "Irrigation", "text": "<p>Irrigation settings for the SWAP simuluation.</p> <p>Classes:</p> Name Description <code>IrgFile</code> <p>The irrigation file.</p> <code>FixedIrrigation</code> <p>Fixed irrigation settings.</p> <code>ScheduledIrrigation</code> <p>Irrigation scheduling settings.</p> <p>Functions:</p> Name Description <code>irg_from_csv</code> <p>Load the irrigation file from a CSV file.</p>"}, {"location": "reference/model-components/#pyswap.components.irrigation.FixedIrrigation", "title": "<code>FixedIrrigation</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>FileMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Fixed irrigation settings in the .swp file.</p> <p>Attributes:</p> Name Type Description <code>swirfix</code> <code>Literal[0, 1]</code> <p>Switch for fixed irrigation applications</p> <code>swirgfil</code> <code>Literal[0, 1]</code> <p>Switch for separate file with fixed irrigation applications</p> <code>irrigevents</code> <code>Optional[Table]</code> <code>irgfil</code> <code>Optional[str]</code> Source code in <code>pyswap/components/irrigation.py</code> <pre><code>class FixedIrrigation(\n    _PySWAPBaseModel, _SerializableMixin, _FileMixin, _YAMLValidatorMixin\n):\n    \"\"\"Fixed irrigation settings in the .swp file.\n\n    Attributes:\n        swirfix (Literal[0, 1]): Switch for fixed irrigation applications\n        swirgfil (Literal[0, 1]): Switch for separate file with fixed irrigation applications\n        irrigevents (Optional[Table]):\n        irgfil (Optional[str]):\n    \"\"\"\n\n    _extension = _PrivateAttr(default=\"irg\")\n\n    swirfix: _Literal[0, 1] | None = None\n    swirgfil: _Literal[0, 1] | None = None\n    irgfil: _String = _Field(default=_FNAME_IN, frozen=True)\n    irrigevents: _Table | None = None\n\n    def model_string(self, **kwargs) -&gt; str:\n        \"\"\"Override the model_string to handle optional file generation.\n\n        Return the full section if swirgfil is set to 1, otherwise, irrigevents\n        is excluded from the string and saved in a separate .irg file.\n        \"\"\"\n        if self.swirgfil == 1:\n            return super().model_string(exclude={\"irrigevents\"}, **kwargs)\n        else:\n            return super().model_string()\n\n    @property\n    def irg(self):\n        return super().model_string(include={\"irrigevents\"})\n\n    def write_irg(self, path: _Path):\n        \"\"\"Write irrigation data to .irg file.\n\n        This method is only available when the swirgfil attribute is set to 1.\n\n        Parameters:\n            path (Path): Path to the directory where the .irg file will be\n                saved.\n        \"\"\"\n        if self.swirgfil != 1:\n            msg = \"Irrigation data are not set to be written to a .irg file.\"\n            raise ValueError(msg)\n\n        self.save_file(string=self.irg, fname=self.irgfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.irrigation.FixedIrrigation.model_string", "title": "<code>model_string(**kwargs)</code>", "text": "<p>Override the model_string to handle optional file generation.</p> <p>Return the full section if swirgfil is set to 1, otherwise, irrigevents is excluded from the string and saved in a separate .irg file.</p> Source code in <code>pyswap/components/irrigation.py</code> <pre><code>def model_string(self, **kwargs) -&gt; str:\n    \"\"\"Override the model_string to handle optional file generation.\n\n    Return the full section if swirgfil is set to 1, otherwise, irrigevents\n    is excluded from the string and saved in a separate .irg file.\n    \"\"\"\n    if self.swirgfil == 1:\n        return super().model_string(exclude={\"irrigevents\"}, **kwargs)\n    else:\n        return super().model_string()\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.irrigation.FixedIrrigation.write_irg", "title": "<code>write_irg(path)</code>", "text": "<p>Write irrigation data to .irg file.</p> <p>This method is only available when the swirgfil attribute is set to 1.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to the directory where the .irg file will be saved.</p> required Source code in <code>pyswap/components/irrigation.py</code> <pre><code>def write_irg(self, path: _Path):\n    \"\"\"Write irrigation data to .irg file.\n\n    This method is only available when the swirgfil attribute is set to 1.\n\n    Parameters:\n        path (Path): Path to the directory where the .irg file will be\n            saved.\n    \"\"\"\n    if self.swirgfil != 1:\n        msg = \"Irrigation data are not set to be written to a .irg file.\"\n        raise ValueError(msg)\n\n    self.save_file(string=self.irg, fname=self.irgfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.irrigation.IRRIGEVENTS", "title": "<code>IRRIGEVENTS</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>information for each fixed irrigation event.</p> <p>Attributes:</p> Name Type Description <code>IRDATE</code> <code>Series[datetime]</code> <p>date of irrigation.</p> <code>IRDEPTH</code> <code>Series[float]</code> <p>amount of water [0..1000 mm, R].</p> <code>IRCONC</code> <code>Series[float]</code> <p>concentration of irrigation water [0..1000 mg/cm3, R].</p> <code>IRTYPE</code> <code>Series[int]</code> <p>type of irrigation</p> <ul> <li>0 - sprinkling</li> <li>1 - surface</li> </ul> Source code in <code>pyswap/components/tables.py</code> <pre><code>class IRRIGEVENTS(BaseTableModel):\n    \"\"\"information for each fixed irrigation event.\n\n    Attributes:\n        IRDATE (Series[datetime]):date of irrigation.\n        IRDEPTH (Series[float]): amount of water [0..1000 mm, R].\n        IRCONC (Series[float]): concentration of irrigation water [0..1000 mg/cm3, R].\n        IRTYPE (Series[int]): type of irrigation\n\n            * 0 - sprinkling\n            * 1 - surface\n\n    \"\"\"\n\n    IRDATE: Series[pa.DateTime]\n    IRDEPTH: Series[float] | None = pa.Field(default=None, ge=0.0, le=1000.0)\n    IRCONC: Series[float] = pa.Field(ge=0.0, le=1000.0)\n    IRTYPE: Series[int] = pa.Field(ge=0, le=1)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.irrigation.ScheduledIrrigation", "title": "<code>ScheduledIrrigation</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Irrigation scheduling settings in the .crp file.</p> <p>Attributes:</p> Name Type Description <code>schedule</code> <code>Literal[0, 1]</code> <p>Switch for application irrigation scheduling</p> <code>startirr</code> <code>str</code> <p>Specify day and month at which irrigation scheduling starts</p> <code>endirr</code> <code>str</code> <p>Specify day and month at which irrigation scheduling stops</p> <code>cirrs</code> <code>float</code> <p>Solute concentration of irrigation water</p> <code>isuas</code> <code>int</code> <p>Switch for type of irrigation method</p> <ul> <li>0 - Sprinkler irrigation</li> <li>1 - Surface irrigation</li> </ul> <code>tcs</code> <code>int</code> <p>Choose one of the following timing criteria options</p> <ul> <li>1 - Ratio actual/potential transpiration</li> <li>2 - Depletion of Readily Available Water</li> <li>3 - Depletion of Totally Available Water</li> <li>4 - Depletion of absolute Water Amount</li> <li>6 - Fixed weekly irrigation</li> <li>7 - Pressure head</li> <li>8 - Moisture content</li> </ul> <code>phFieldCapacity</code> <code>float</code> <p>Soil water pressure head at field capacity</p> <code>irgthreshold</code> <code>Optional[float]</code> <p>Threshold value for weekly irrigation</p> <code>dcrit</code> <code>Optional[float]</code> <p>Depth of the sensor</p> <code>swcirrthres</code> <code>Optional[bool]</code> <p>Switch for over-irrigation</p> <code>cirrthres</code> <code>Optional[float]</code> <p>Threshold salinity concentration above which over-irrigation occur</p> <code>perirrsurp</code> <code>Optional[float]</code> <p>Over-irrigation of the usually scheduled irrigation depth</p> <code>tcsfix</code> <code>Optional[int]</code> <p>Switch for minimum time interval between irrigation applications</p> <code>irgdayfix</code> <code>Optional[int]</code> <p>Minimum number of days between irrigation applications</p> <code>phormc</code> <code>Optional[int]</code> <p>Switch for the use of pressure head or water content</p> <ul> <li>0 - Pressure head</li> <li>1 - Water content</li> </ul> <code>dvs_tc1</code> <code>Optional[Table]</code> <code>dvs_tc2</code> <code>Optional[Table]</code> <code>dvs_tc3</code> <code>Optional[Table]</code> <code>dvs_tc4</code> <code>Optional[Table]</code> <code>dvs_tc5</code> <code>Optional[Table]</code> Source code in <code>pyswap/components/irrigation.py</code> <pre><code>class ScheduledIrrigation(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Irrigation scheduling settings in the .crp file.\n\n    Attributes:\n        schedule (Literal[0, 1]): Switch for application irrigation scheduling\n        startirr (str): Specify day and month at which irrigation scheduling starts\n        endirr (str): Specify day and month at which irrigation scheduling stops\n        cirrs (float): Solute concentration of irrigation water\n        isuas (int): Switch for type of irrigation method\n\n            * 0 - Sprinkler irrigation\n            * 1 - Surface irrigation\n\n        tcs (int): Choose one of the following timing criteria options\n\n            * 1 - Ratio actual/potential transpiration\n            * 2 - Depletion of Readily Available Water\n            * 3 - Depletion of Totally Available Water\n            * 4 - Depletion of absolute Water Amount\n            * 6 - Fixed weekly irrigation\n            * 7 - Pressure head\n            * 8 - Moisture content\n\n        phFieldCapacity (float): Soil water pressure head at field capacity\n        irgthreshold (Optional[float]): Threshold value for weekly irrigation\n        dcrit (Optional[float]): Depth of the sensor\n        swcirrthres (Optional[bool]): Switch for over-irrigation\n        cirrthres (Optional[float]): Threshold salinity concentration above which over-irrigation occur\n        perirrsurp (Optional[float]): Over-irrigation of the usually scheduled irrigation depth\n        tcsfix (Optional[int]): Switch for minimum time interval between irrigation applications\n        irgdayfix (Optional[int]): Minimum number of days between irrigation applications\n        phormc (Optional[int]): Switch for the use of pressure head or water content\n\n            * 0 - Pressure head\n            * 1 - Water content\n\n        dvs_tc1 (Optional[Table]):\n        dvs_tc2 (Optional[Table]):\n        dvs_tc3 (Optional[Table]):\n        dvs_tc4 (Optional[Table]):\n        dvs_tc5 (Optional[Table]):\n    \"\"\"\n\n    schedule: _Literal[0, 1] | None = None\n    startirr: _DayMonth | None = None\n    endirr: _DayMonth | None = None\n    cirrs: float | None = _Field(default=None, ge=0.0, le=100.0)\n    isuas: _Literal[0, 1] | None = None\n    tcs: _Literal[1, 2, 3, 4, 6, 7, 8] | None = None\n\n    phfieldcapacity: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    irgthreshold: float | None = _Field(default=None, ge=0.0, le=20.0)\n    dcrit: float | None = _Field(default=None, ge=-100.0, le=0.0)\n    swcirrthres: _Literal[0, 1] | None = None\n    cirrthres: float | None = _Field(default=None, ge=0.0, le=100.0)\n    perirrsurp: float | None = _Field(default=None, ge=0.0, le=100.0)\n    tcsfix: _Literal[0, 1] | None = None\n    irgdayfix: int | None = _Field(default=None, **_YEARRANGE)\n    dcs: _Literal[0, 1] | None = None\n    dcslim: _Literal[0, 1] | None = None\n    irgdepmin: float | None = _Field(default=None, ge=0.0, le=100.0)\n    irgdepmax: float | None = _Field(default=None, ge=0.0, le=1.0e7)\n    tc1tb: _Table | None = None\n    tc2tb: _Table | None = None\n    tc3tb: _Table | None = None\n    tc4tb: _Table | None = None\n    tc7tb: _Table | None = None\n    tc8tb: _Table | None = None\n    dc1tb: _Table | None = None\n    dc2tb: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#soil-water", "title": "Soil-water", "text": ""}, {"location": "reference/model-components/#pyswap.components.soilwater.Evaporation", "title": "<code>Evaporation</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Evaporation settings.</p> <p>Attributes:</p> Name Type Description <code>swcfbs</code> <code>Literal[0, 1]</code> <p>Switch for use of soil factor CFBS to calculate Epot from ETref.</p> <code>swredu</code> <code>Literal[0, 1, 2]</code> <p>Switch for the method for reduction of potential soil evaporation:</p> <ul> <li>0 - reduction to maximum Darcy flux.</li> <li>1 - reduction to maximum Darcy flux and to maximum Black (1969).</li> <li>2 - reduction to maximum Darcy flux and to maximum Boesten/Stroosnijder (1986).</li> </ul> <code>cfevappond</code> <code>Optional[Decimal2f]</code> <p>When ETref is used, evaporation coefficient in case of ponding [0..3].</p> <code>cfbs</code> <code>Optional[Decimal2f]</code> <p>Coefficient for potential soil evaporation [0.5..1.5].</p> <code>rsoil</code> <code>Optional[Decimal2f]</code> <p>Soil resistance of wet soil [0..1000.0].</p> <code>cofredbl</code> <code>Optional[Decimal2f]</code> <p>Soil evaporation coefficient of Black [0..1].</p> <code>rsigni</code> <code>Optional[Decimal2f]</code> <p>Minimum rainfall to reset method of Black [0..100].</p> <code>cofredbo</code> <code>Optional[Decimal2f]</code> <p>Soil evaporation coefficient of Boesten/Stroosnijder [0..1].</p> Source code in <code>pyswap/components/soilwater.py</code> <pre><code>class Evaporation(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Evaporation settings.\n\n    Attributes:\n        swcfbs (Literal[0, 1]): Switch for use of soil factor CFBS to calculate Epot from ETref.\n        swredu (Literal[0, 1, 2]): Switch for the method for reduction of potential soil evaporation:\n\n            * 0 - reduction to maximum Darcy flux.\n            * 1 - reduction to maximum Darcy flux and to maximum Black (1969).\n            * 2 - reduction to maximum Darcy flux and to maximum Boesten/Stroosnijder (1986).\n\n        cfevappond (Optional[Decimal2f]): When ETref is used, evaporation coefficient in case of ponding [0..3].\n        cfbs (Optional[Decimal2f]): Coefficient for potential soil evaporation [0.5..1.5].\n        rsoil (Optional[Decimal2f]): Soil resistance of wet soil [0..1000.0].\n        cofredbl (Optional[Decimal2f]): Soil evaporation coefficient of Black [0..1].\n        rsigni (Optional[Decimal2f]): Minimum rainfall to reset method of Black [0..100].\n        cofredbo (Optional[Decimal2f]): Soil evaporation coefficient of Boesten/Stroosnijder [0..1].\n    \"\"\"\n\n    swcfbs: _Literal[0, 1] | None = None\n    swredu: _Literal[0, 1, 2] | None = None\n    cfevappond: _Decimal2f | None = _Field(default=None, ge=0, le=3)\n    cfbs: _Decimal2f | None = _Field(default=None, ge=0.5, le=1.5)\n    rsoil: _Decimal2f | None = _Field(default=None, ge=0, le=1000.0)\n    cofredbl: _Decimal2f | None = _Field(default=None, **_UNITRANGE)\n    rsigni: _Decimal2f | None = _Field(default=None, ge=0, le=100)\n    cofredbo: _Decimal2f | None = _Field(default=None, **_UNITRANGE)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SOILHYDRFUNC", "title": "<code>SOILHYDRFUNC</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Soil hydraulic functions table.</p> <pre><code>!!! warning\n    ALFAW required only when the hysteresis option is set to 1 or 2. This column is set as optional column and (for now) is not checked.\n</code></pre> <p>('ORES', 'OSAT', 'ALFA', 'NPAR', 'KSATFIT', 'LEXP', 'ALFAW', 'H_ENPR', 'KSATEXM', 'BDENS')     Attributes:         ORES (Series[float]): Residual water content [0..1 cm3/cm3, R]         OSAT (Series[float]): Saturated water content [0..1 cm3/cm3, R]         ALFA (Series[float]): Parameter alfa of main drying curve [0.0001..100 /cm, R]         NPAR (Series[float]): Parameter n [1.001..9 -, R]         LEXP (Series[float]): Exponent in hydraulic conductivity function [-25..25 -, R]         KSATFIT (Series[float]): Fitting parameter Ksat of hydraulic conductivity function [1.d-5..1d5 cm/d, R]         H_ENPR (Series[float]): Air entry pressure head [-40.0..0.0 cm, R]         KSATEXM (Series[float]): Measured hydraulic conductivity at saturated conditions [1.d-5..1d5 cm/d, R]         BDENS (Series[float]): Dry soil bulk density [100..1d4 mg/cm3, R]         ALFAW (Optional[Series[float]]): Alfa parameter of main wetting curve in case of hysteresis [0.0001..100 /cm, R]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class SOILHYDRFUNC(BaseTableModel):\n    \"\"\"Soil hydraulic functions table.\n\n        !!! warning\n            ALFAW required only when the hysteresis option is set to 1 or 2. This column is set as optional column and (for now) is not checked.\n    ('ORES', 'OSAT', 'ALFA', 'NPAR', 'KSATFIT', 'LEXP', 'ALFAW', 'H_ENPR', 'KSATEXM', 'BDENS')\n        Attributes:\n            ORES (Series[float]): Residual water content [0..1 cm3/cm3, R]\n            OSAT (Series[float]): Saturated water content [0..1 cm3/cm3, R]\n            ALFA (Series[float]): Parameter alfa of main drying curve [0.0001..100 /cm, R]\n            NPAR (Series[float]): Parameter n [1.001..9 -, R]\n            LEXP (Series[float]): Exponent in hydraulic conductivity function [-25..25 -, R]\n            KSATFIT (Series[float]): Fitting parameter Ksat of hydraulic conductivity function [1.d-5..1d5 cm/d, R]\n            H_ENPR (Series[float]): Air entry pressure head [-40.0..0.0 cm, R]\n            KSATEXM (Series[float]): Measured hydraulic conductivity at saturated conditions [1.d-5..1d5 cm/d, R]\n            BDENS (Series[float]): Dry soil bulk density [100..1d4 mg/cm3, R]\n            ALFAW (Optional[Series[float]]): Alfa parameter of main wetting curve in case of hysteresis [0.0001..100 /cm, R]\n    \"\"\"\n\n    ORES: Series[float] = pa.Field(ge=0.0, le=1.0)\n    OSAT: Series[float] = pa.Field(ge=0.0, le=1.0)\n    ALFA: Series[float] = pa.Field(ge=0.0001, le=100.0)\n    NPAR: Series[float] = pa.Field(ge=1.001, le=9.0)\n    LEXP: Series[float] = pa.Field(ge=-25.0, le=25.0)\n    KSATFIT: Series[float] = pa.Field(ge=1.0e-5, le=1.0e5)\n    H_ENPR: Series[float] = pa.Field(ge=-40.0, le=0.0)\n    KSATEXM: Series[float] = pa.Field(ge=1.0e-5, le=1.0e5)\n    BDENS: Series[float] = pa.Field(ge=100.0, le=1.0e4)\n    ALFAW: Series[float] | None = pa.Field(ge=0.0001, le=100.0)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SOILPROFILE", "title": "<code>SOILPROFILE</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Vertical discretization of soil profile</p> <p>Attributes:</p> Name Type Description <code>ISUBLAY</code> <code>Series[int]</code> <p>Series[int]: number of sub layer, start with 1 at soil surface [1..MACP, I].</p> <code>ISOILLAY</code> <code>Series[int]</code> <p>Series[int]: number of soil physical layer, start with 1 at soil surface [1..MAHO, I].</p> <code>HSUBLAY</code> <code>Series[float]</code> <p>Series[float]: height of sub layer [0..1.d4 cm, R].</p> <code>HCOMP</code> <code>Series[float]</code> <p>Series[float]: height of compartments in the sub layer [0.0..1000.0 cm, R].</p> <code>NCOMP</code> <code>Series[int]</code> <p>Series[int]: number of compartments in the sub layer (Mind NCOMP = HSUBLAY/HCOMP) [1..MACP, I].</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class SOILPROFILE(BaseTableModel):\n    \"\"\"Vertical discretization of soil profile\n\n    Attributes:\n        ISUBLAY: Series[int]: number of sub layer, start with 1 at soil surface [1..MACP, I].\n        ISOILLAY: Series[int]: number of soil physical layer, start with 1 at soil surface [1..MAHO, I].\n        HSUBLAY: Series[float]: height of sub layer [0..1.d4 cm, R].\n        HCOMP: Series[float]: height of compartments in the sub layer [0.0..1000.0 cm, R].\n        NCOMP: Series[int]: number of compartments in the sub layer (Mind NCOMP = HSUBLAY/HCOMP) [1..MACP, I].\n    \"\"\"\n\n    ISOILLAY: Series[int] = pa.Field(ge=1)\n    ISUBLAY: Series[int] = pa.Field(ge=1)\n    HSUBLAY: Series[float] = pa.Field(ge=0.0, le=1.0e4)\n    HCOMP: Series[float] = pa.Field(ge=0.0, le=1.0e3)\n    NCOMP: Series[int] = pa.Field(ge=1)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SnowAndFrost", "title": "<code>SnowAndFrost</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Snow and frost settings for the model.</p> <p>Attributes:</p> Name Type Description <code>swsnow</code> <code>Literal[0, 1]</code> <p>Switch for calculation of snow accumulation and melt.</p> <code>swfrost</code> <code>Literal[0, 1]</code> <p>Switch, in case of frost reduce soil water flow.</p> <code>snowinco</code> <code>Optional[Decimal2f]</code> <p>Initial snow water equivalent [0..1000 cm].</p> <code>teprrain</code> <code>Optional[Decimal2f]</code> <p>Temperature above which all precipitation is rain [0..10 oC].</p> <code>teprsnow</code> <code>Optional[Decimal2f]</code> <p>Temperature below which all precipitation is snow [-10..0 oC].</p> <code>tfroststa</code> <code>Optional[Decimal2f]</code> <p>Soil temperature (oC) where reduction of water fluxes starts [-10.0..5.0 oC].</p> <code>tfrostend</code> <code>Optional[Decimal2f]</code> <p>Soil temperature (oC) where reduction of water fluxes ends [-10.0..5.0 oC].</p> Source code in <code>pyswap/components/soilwater.py</code> <pre><code>class SnowAndFrost(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Snow and frost settings for the model.\n\n    Attributes:\n        swsnow (Literal[0, 1]): Switch for calculation of\n            snow accumulation and melt.\n        swfrost (Literal[0, 1]): Switch, in case of frost reduce\n            soil water flow.\n        snowinco (Optional[Decimal2f]): Initial snow water equivalent [0..1000 cm].\n        teprrain (Optional[Decimal2f]): Temperature above which all\n            precipitation is rain [0..10 oC].\n        teprsnow (Optional[Decimal2f]): Temperature below which all\n            precipitation is snow [-10..0 oC].\n        tfroststa (Optional[Decimal2f]): Soil temperature (oC) where reduction\n            of water fluxes starts [-10.0..5.0 oC].\n        tfrostend (Optional[Decimal2f]): Soil temperature (oC) where reduction\n            of water fluxes ends [-10.0..5.0 oC].\n    \"\"\"\n\n    swsnow: _Literal[0, 1] | None = None\n    swfrost: _Literal[0, 1] | None = None\n    snowinco: _Decimal2f | None = _Field(default=None, ge=0, le=1000)\n    teprrain: _Decimal2f | None = _Field(default=None, ge=0, le=10)\n    teprsnow: _Decimal2f | None = _Field(default=None, ge=-10, le=0)\n    tfroststa: _Decimal2f | None = _Field(default=None, ge=-10, le=5)\n    tfrostend: _Decimal2f | None = _Field(default=None, ge=-10, le=5)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SoilMoisture", "title": "<code>SoilMoisture</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Soil moisture content and water balance.</p> <p>Attributes:</p> Name Type Description <code>swinco</code> <code>Literal[1, 2, 3]</code> <p>Switch for the type of initial soil moisture condition:</p> <ul> <li>1 - pressure head as function of soil depth.</li> <li>2 - pressure head of each compartment is in     hydrostatic equilibrium with initial groundwater level.</li> <li>3 - read final pressure heads from output file of previous     Swap simulation.</li> </ul> <code>head_soildepth</code> <code>Optional[Table]</code> <p>Table with head and soil depth data.</p> <code>gwli</code> <code>Optional[Decimal2f]</code> <p>Initial groundwater level [-10000..100 cm].</p> <code>inifil</code> <code>Optional[str]</code> <p>name of output file *.END which contains initial values.</p> Source code in <code>pyswap/components/soilwater.py</code> <pre><code>class SoilMoisture(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Soil moisture content and water balance.\n\n    Attributes:\n        swinco (Literal[1, 2, 3]): Switch for the type of initial soil moisture condition:\n\n            * 1 - pressure head as function of soil depth.\n            * 2 - pressure head of each compartment is in\n                hydrostatic equilibrium with initial groundwater level.\n            * 3 - read final pressure heads from output file of previous\n                Swap simulation.\n\n        head_soildepth (Optional[Table]): Table with head and\n            soil depth data.\n        gwli (Optional[Decimal2f]): Initial groundwater level [-10000..100 cm].\n        inifil (Optional[str]): name of output file *.END which contains\n            initial values.\n    \"\"\"\n\n    swinco: _Literal[1, 2, 3] | None = None\n    head_soildepth: _Table | None = None\n    gwli: _Decimal2f | None = _Field(default=None, ge=-10000, le=100)\n    inifil: _String | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SoilProfile", "title": "<code>SoilProfile</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Vertical discretization of soil profile, soil hydraulic functions and     hysteresis of soil water retention.</p> <p>Covers parts 4, 5, 6 and 7 of the .swp file.</p> <p>Attributes:</p> Name Type Description <code>swsophy</code> <code>Literal[0, 1]</code> <p>Switch for analytical functions or tabular input</p> <ul> <li>0 - Analytical functions with input of Mualem -     van Genuchten parameters</li> <li>1 - Soil physical tables</li> </ul> <code>swhyst</code> <code>Literal[0, 1, 2]</code> <p>Hysteresis of soil water retention function</p> <ul> <li>0 - No hysteresis</li> <li>1 - Hysteresis, initial conditions wetting</li> <li>2 - Hysteresis, initial conditions drying</li> </ul> <code>filenamesophy</code> <code>Optional[str]</code> <p>Names of input files with soil hydraulic tables for each soil layer</p> <code>tau</code> <code>Optional[Decimal2f]</code> <p>Minimum pressure head difference to change wetting-drying [0..1000].</p> <code>swmacro</code> <code>Literal[0, 1]</code> <p>Switch for preferential flow due to macropores</p> <code>soilprofile</code> <code>Table</code> <p>Table with soil profile data</p> <code>soilhydrfunc</code> <code>Optional[Table]</code> <p>Table with soil hydraulic functions</p> Source code in <code>pyswap/components/soilwater.py</code> <pre><code>class SoilProfile(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Vertical discretization of soil profile, soil hydraulic functions and\n        hysteresis of soil water retention.\n\n    Covers parts 4, 5, 6 and 7 of the .swp file.\n\n    Attributes:\n        swsophy (Literal[0, 1]): Switch for analytical functions or\n            tabular input\n\n            * 0 - Analytical functions with input of Mualem -\n                van Genuchten parameters\n            * 1 - Soil physical tables\n\n        swhyst (Literal[0, 1, 2]): Hysteresis of soil water retention function\n\n            * 0 - No hysteresis\n            * 1 - Hysteresis, initial conditions wetting\n            * 2 - Hysteresis, initial conditions drying\n\n        filenamesophy (Optional[str]): Names of input files with\n            soil hydraulic tables for each soil layer\n        tau (Optional[Decimal2f]): Minimum pressure head difference to change\n            wetting-drying [0..1000].\n        swmacro (Literal[0, 1]): Switch for preferential flow due to macropores\n        soilprofile (Table): Table with soil profile data\n        soilhydrfunc (Optional[Table]): Table with\n            soil hydraulic functions\n    \"\"\"\n\n    _validation: bool = _PrivateAttr(default=False)\n\n    swsophy: _Literal[0, 1] | None = None\n    swhyst: _Literal[0, 1, 2] | None = None\n    swmacro: _Literal[0, 1] | None = None\n    filenamesophy: _String | None = None\n    tau: _Decimal2f | None = _Field(default=None, ge=0, le=1000)\n    soilprofile: _Table | None = None\n    soilhydrfunc: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.soilwater.SurfaceFlow", "title": "<code>SurfaceFlow</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Surface flow settings (ponding, runoff and runon).</p> <p>Attributes:</p> Name Type Description <code>swpondmx</code> <code>Literal[0, 1]</code> <p>Switch for variation ponding threshold for runoff</p> <ul> <li>0 - Ponding threshold for runoff is constant</li> <li>1 - Ponding threshold for runoff varies in time</li> </ul> <code>swrunon</code> <code>Literal[0, 1]</code> <p>Switch for runon</p> <ul> <li>0 - No runon</li> <li>1 - Use runon data</li> </ul> <code>rsro</code> <code>Optional[Decimal2f]</code> <p>Drainage resistance for surface runoff [0.001..1.0].</p> <code>rsroexp</code> <code>Optional[Decimal2f]</code> <p>Exponent for drainage equation of surface runoff [0.01..10.0].</p> <code>pondmx</code> <code>Optional[Decimal2f]</code> <p>In case of ponding, minimum thickness for runoff [0..1000].</p> <code>rufil</code> <code>Optional[str]</code> <p>Name of the runon file.</p> <code>pondmxtb</code> <code>Optional[Table]</code> <p>Minimum thickness for runoff as a function of time.</p> Source code in <code>pyswap/components/soilwater.py</code> <pre><code>class SurfaceFlow(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Surface flow settings (ponding, runoff and runon).\n\n    Attributes:\n        swpondmx (Literal[0, 1]): Switch for variation ponding\n            threshold for runoff\n\n            * 0 - Ponding threshold for runoff is constant\n            * 1 - Ponding threshold for runoff varies in time\n\n        swrunon (Literal[0, 1]): Switch for runon\n\n            * 0 - No runon\n            * 1 - Use runon data\n\n        rsro (Optional[Decimal2f]): Drainage resistance for surface runoff [0.001..1.0].\n        rsroexp (Optional[Decimal2f]): Exponent for drainage equation of surface runoff [0.01..10.0].\n        pondmx (Optional[Decimal2f]): In case of ponding, minimum thickness for runoff [0..1000].\n        rufil (Optional[str]): Name of the runon file.\n        pondmxtb (Optional[Table]): Minimum thickness for runoff as a function of time.\n    \"\"\"\n\n    swpondmx: _Literal[0, 1] | None = None\n    swrunon: _Literal[0, 1] | None = None\n    rsro: _Decimal3f | None = _Field(default=None, ge=0.001, le=1.0)\n    rsroexp: _Decimal2f | None = _Field(default=None, ge=0.01, le=10.0)\n    pondmx: _Decimal2f | None = _Field(default=None, ge=0, le=1000)\n    rufil: _String | None = None\n    pondmxtb: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#drainage", "title": "Drainage", "text": "<p>Lateral drainage settings</p> <p>Settings for the lateral drainage of the .swp file, including the .dra file settings.</p> <p>Classes:</p> Name Description <code>Flux</code> <p>Fluxes between drainage levels in .dra file.</p> <code>DraFile</code> <p>Drainage file (.dra) settings.</p> <code>Drainage</code> <p>The lateral drainage settings of .swp file.</p>"}, {"location": "reference/model-components/#pyswap.components.drainage.DraFile", "title": "<code>DraFile</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>FileMixin</code>, <code>SerializableMixin</code></p> <p>Content of the drainage file (.dra).</p> <p>Attributes:</p> Name Type Description <code>dramet</code> <code>Literal[1, 2, 3]</code> <p>Method of lateral drainage calculation</p> <ul> <li>1 - Use table of drainage flux - groundwater level relation.</li> <li>2 - Use drainage formula of Hooghoudt or Ernst.</li> <li>3 - Use drainage/infiltration resistance, multi-level if needed.</li> </ul> <code>swdivd</code> <code>Literal[1, 2]</code> <p>Calculate vertical distribution of drainage flux in groundwater.</p> <code>cofani</code> <code>Optional[FloatList]</code> <p>specify anisotropy factor COFANI (horizontal/vertical saturated hydraulic conductivity) for each soil layer (maximum MAHO)</p> <code>swdislay</code> <code>Literal[0, 1, 2, 3, '-']</code> <p>Switch to adjust upper boundary of model discharge layer.</p> <ul> <li>0 - No adjustment</li> <li>1 - Adjustment based on depth of top of model discharge</li> <li>2 - Adjustment based on factor of top of model discharge</li> </ul> <code>lm1</code> <code>float</code> <p>Drain spacing</p> <code>table_qdrntb</code> <code>Table</code> <p>Table of drainage flux - groundwater level.</p> <code>lm1</code> <code>float | None</code> <p>float = _Field(ge=1.0, le=1000.0)</p> <code>qdrntb</code> <code>Table | None</code> <p>_Table</p> <code>lm2</code> <code>float</code> <p>Drain spacing.</p> <code>shape</code> <code>float</code> <p>Shape factor to account for actual location between drain and water divide.</p> <code>wetper</code> <code>float</code> <p>Wet perimeter of the drain.</p> <code>zbotdr</code> <code>float</code> <p>Level of drain bottom.</p> <code>entres</code> <code>float</code> <p>Drain entry resistance.</p> <code>ipos</code> <code>Literal[1, 2, 3, 4, 5]</code> <p>Position of drain</p> <ul> <li>1 - On top of an impervious layer in a homogeneous profile</li> <li>2 - Above an impervious layer in a homogeneous profile</li> <li>3 - At the interface of a fine upper and a coarse lower     soil layer</li> <li>4 - In the lower, more coarse soil layer</li> <li>5 - In the upper, more fine soil layer</li> </ul> <code>basegw</code> <code>float</code> <p>Level of impervious layer.</p> <code>khtop</code> <code>float</code> <p>Horizontal hydraulic conductivity of the top layer.</p> <code>khbot</code> <code>Optional[float]</code> <p>Horizontal hydraulic conductivity of the bottom layer.</p> <code>zintf</code> <code>Optional[float]</code> <p>Interface level of the coarse and fine soil layer.</p> <code>kvtop</code> <code>Optional[float]</code> <p>Vertical hydraulic conductivity of the top layer.</p> <code>kvbot</code> <code>Optional[float]</code> <p>Vertical hydraulic conductivity of the bottom layer.</p> <code>geofac</code> <code>Optional[float]</code> <p>Geometric factor of Ernst.</p> <code>nrlevs</code> <code>int</code> <p>Number of drainage levels.</p> <code>swintfl</code> <code>Literal[0, 1]</code> <p>Option for interflow in highest drainage level (shallow system with short residence time).</p> <code>cofintflb</code> <code>float</code> <p>Coefficient for interflow relation.</p> <code>expintflb</code> <code>float</code> <p>Exponent for interflow relation.</p> <code>swtopnrsrf</code> <code>Literal[0, 1]</code> <p>Switch to enable adjustment of model discharge layer.</p> <code>fluxes</code> <code>Subsection</code> <p>List of level fluxes.</p> <code>altcu</code> <code>float</code> <p>Altitude of the control unit relative to reference level.</p> <code>nrsrf</code> <code>int</code> <p>Number of subsurface drainage levels.</p> <code>swnrsrf</code> <code>Literal[0, 1, 2]</code> <p>Switch to introduce rapid subsurface drainage.</p> <code>rsurfdeep</code> <code>Optional[float]</code> <p>Maximum resistance of rapid subsurface drainage.</p> <code>rsurfshallow</code> <code>Optional[float]</code> <p>Minimum resistance of rapid subsurface drainage.</p> <code>swsrf</code> <code>Literal[1, 2, 3]</code> <p>Switch for interaction with surface water system.</p> <code>swsec</code> <code>Optional[Literal[1, 2]]</code> <p>Option for surface water level of secondary system.</p> <code>wlact</code> <code>Optional[float]</code> <p>Initial surface water level.</p> <code>osswlm</code> <code>Optional[float]</code> <p>Criterium for warning about oscillation.</p> <code>nmper</code> <code>Optional[int]</code> <p>Number of management periods.</p> <code>swqhr</code> <code>Optional[Literal[1, 2]]</code> <p>Switch for type of discharge relationship.</p> <code>sofcu</code> <code>Optional[float]</code> <p>Size of the control unit.</p> Source code in <code>pyswap/components/drainage.py</code> <pre><code>class DraFile(_PySWAPBaseModel, _FileMixin, _SerializableMixin):\n    \"\"\"Content of the drainage file (.dra).\n\n    Attributes:\n        dramet (Literal[1, 2, 3]): Method of lateral drainage calculation\n\n            * 1 - Use table of drainage flux - groundwater level relation.\n            * 2 - Use drainage formula of Hooghoudt or Ernst.\n            * 3 - Use drainage/infiltration resistance, multi-level if needed.\n\n        swdivd (Literal[1, 2]): Calculate vertical distribution of\n            drainage flux in groundwater.\n        cofani (Optional[FloatList]): specify anisotropy factor COFANI\n            (horizontal/vertical saturated hydraulic conductivity) for\n            each soil layer (maximum MAHO)\n        swdislay (Literal[0, 1, 2, 3, '-']): Switch to adjust\n            upper boundary of model discharge layer.\n\n            * 0 - No adjustment\n            * 1 - Adjustment based on depth of top of model discharge\n            * 2 - Adjustment based on factor of top of model discharge\n        lm1 (float): Drain spacing\n        table_qdrntb (Table): Table of drainage flux - groundwater level.\n        lm1: float = _Field(ge=1.0, le=1000.0)\n        qdrntb: _Table\n        lm2 (float): Drain spacing.\n        shape (float): Shape factor to account for actual location between\n            drain and water divide.\n        wetper (float): Wet perimeter of the drain.\n        zbotdr (float): Level of drain bottom.\n        entres (float): Drain entry resistance.\n        ipos (Literal[1, 2, 3, 4, 5]): Position of drain\n\n            * 1 - On top of an impervious layer in a homogeneous profile\n            * 2 - Above an impervious layer in a homogeneous profile\n            * 3 - At the interface of a fine upper and a coarse lower\n                soil layer\n            * 4 - In the lower, more coarse soil layer\n            * 5 - In the upper, more fine soil layer\n\n        basegw (float): Level of impervious layer.\n        khtop (float): Horizontal hydraulic conductivity of the top layer.\n        khbot (Optional[float]): Horizontal hydraulic conductivity of\n            the bottom layer.\n        zintf (Optional[float]): Interface level of the coarse and\n            fine soil layer.\n        kvtop (Optional[float]): Vertical hydraulic conductivity of\n            the top layer.\n        kvbot (Optional[float]): Vertical hydraulic conductivity of\n            the bottom layer.\n        geofac (Optional[float]): Geometric factor of Ernst.\n        nrlevs (int): Number of drainage levels.\n        swintfl (Literal[0, 1]): Option for interflow in highest\n            drainage level (shallow system with short residence time).\n        cofintflb (float): Coefficient for interflow relation.\n        expintflb (float): Exponent for interflow relation.\n        swtopnrsrf (Literal[0, 1]): Switch to enable adjustment of\n            model discharge layer.\n        fluxes (Subsection): List of level fluxes.\n        altcu (float): Altitude of the control unit relative to reference level.\n        nrsrf (int): Number of subsurface drainage levels.\n        swnrsrf (Literal[0, 1, 2]): Switch to introduce rapid subsurface drainage.\n        rsurfdeep (Optional[float]): Maximum resistance of rapid subsurface drainage.\n        rsurfshallow (Optional[float]): Minimum resistance of rapid subsurface drainage.\n        swsrf (Literal[1, 2, 3]): Switch for interaction with surface water system.\n        swsec (Optional[Literal[1, 2]]): Option for surface water level of secondary system.\n        wlact (Optional[float]): Initial surface water level.\n        osswlm (Optional[float]): Criterium for warning about oscillation.\n        nmper (Optional[int]): Number of management periods.\n        swqhr (Optional[Literal[1, 2]]): Switch for type of discharge relationship.\n        sofcu (Optional[float]): Size of the control unit.\n    \"\"\"\n\n    _extension = _PrivateAttr(\"dra\")\n    # General\n    dramet: _Literal[1, 2, 3] | None = None\n    swdivd: _Literal[1, 2] | None = None\n    cofani: _FloatList | None = None\n    swdislay: _Literal[0, 1, 2, 3, \"-\"] | None = None\n    # Drainage flux table\n    lm1: float | None = _Field(default=None, ge=1.0, le=1000.0)\n    qdrntb: _Table | None = None\n    # Drainage formula\n    lm2: float | None = _Field(default=None, ge=1.0, le=1000.0)\n    shape: float | None = _Field(default=None, **_UNITRANGE)\n    wetper: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    zbotdr: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    entres: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    ipos: _Literal[1, 2, 3, 4, 5] | None = None\n    basegw: float | None = _Field(default=None, ge=-1.0e4, le=0.0)\n    khtop: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    khbot: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    zintf: float | None = _Field(default=None, ge=-1.0e4, le=0.0)\n    kvtop: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    kvbot: float | None = _Field(default=None, ge=0.0, le=1000.0)\n    geofac: float | None = _Field(default=None, ge=0.0, le=100.0)\n    # Drainage infiltration resistance\n    nrlevs: int | None = _Field(default=None, ge=1, le=5)\n    swintfl: _Literal[0, 1] | None = None\n    cofintflb: float | None = _Field(default=None, ge=0.01, le=10.0)\n    expintflb: float | None = _Field(default=None, ge=0.1, le=1.0)\n    swtopnrsrf: _Literal[0, 1] | None = None\n    fluxes: _Subsection | None = None\n    # Extended section\n    altcu: float | None = _Field(default=None, ge=-300000.0, le=300000.0)\n    drntb: _Table | None = None\n    nrsrf: int | None = _Field(default=None, ge=1, le=5)\n    swnrsrf: _Literal[0, 1, 2] | None = None\n    rsurfdeep: float | None = _Field(default=None, ge=0.001, le=1000.0)\n    rsurfshallow: float | None = _Field(default=None, ge=0.001, le=1000.0)\n    cofintfl: float | None = _Field(default=None, ge=0.01, le=10.0)\n    expintfl: float | None = _Field(default=None, ge=0.01, le=10.0)\n    swsrf: _Literal[1, 2, 3] | None = None\n    swsec: _Literal[1, 2] | None = None\n    secwatlvl: _Table | None = None\n    wlact: float | None = _Field(default=None, ge=-300000.0, le=300000.0)\n    osswlm: float | None = _Field(default=None, ge=0.0, le=10.0)\n    nmper: int | None = _Field(default=None, ge=1, le=3660)\n    swqhr: _Literal[1, 2] | None = None\n    sofcu: float | None = _Field(default=None, ge=0.1, le=100000.0)\n    mansecwatlvl: _Table | None = None\n    drainageleveltopparams: _Table | None = None\n    qweir: _Table | None = None\n    qweirtb: _Table | None = None\n    priwatlvl: _Table | None = None\n\n    @property\n    def dra(self):\n        return self.model_string()\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.drainage.Drainage", "title": "<code>Drainage</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>The lateral drainage settings inside .swp file.</p> <p>Attributes:</p> Name Type Description <code>swdra</code> <code>Literal[0, 1, 2]</code> <p>Switch for lateral drainage.</p> <ul> <li>0 - No drainage.</li> <li>1 - Simulate with a basic drainage routine.</li> <li>2 - Simulate with surface water management.</li> </ul> <code>drfil</code> <code>str</code> <p>Name of the file. This attribute is frozen, there is no need to change it.</p> <code>drafile</code> <code>Optional[Any]</code> <p>Content of the drainage file.</p> Source code in <code>pyswap/components/drainage.py</code> <pre><code>class Drainage(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"The lateral drainage settings inside .swp file.\n\n    Attributes:\n        swdra (Literal[0, 1, 2]): Switch for lateral drainage.\n\n            * 0 - No drainage.\n            * 1 - Simulate with a basic drainage routine.\n            * 2 - Simulate with surface water management.\n\n        drfil (str): Name of the file. This attribute is frozen, there is no\n            need to change it.\n        drafile (Optional[Any]): Content of the drainage file.\n    \"\"\"\n\n    swdra: _Literal[0, 1, 2] | None = None\n    drfil: _String | None = _Field(default=_FNAME_IN, frozen=True)\n    drafile: _File | None = _Field(default=None, exclude=True)\n\n    def write_dra(self, path: str) -&gt; None:\n        self.drafile.save_file(string=self.drafile.dra, fname=self.drfil, path=path)\n        return None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.drainage.Flux", "title": "<code>Flux</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Fluxes between drainage levels in .dra file.</p> <p>Note</p> <p>This was rewritten to be a single class instead of a list of classe. Simplicity over DRY. Anyway, the prefered way to set this up would be through the table from the extended section I guess.</p> <p>Attributes:</p> Name Type Description <code>drares</code> <code>float</code> <p>Drainage resistance.</p> <code>infres</code> <code>float</code> <p>Infiltration resistance.</p> <code>swallo</code> <code>Literal[1, 2]</code> <p>Switch to allow drainage from this level.</p> <code>l</code> <code>Optional[float]</code> <p>Drain spacing.</p> <code>zbotdr</code> <code>float</code> <p>Level of the bottom of the drain.</p> <code>swdtyp</code> <code>Literal[1, 2]</code> <p>Drainage type.</p> <ul> <li>1 - drain tube.</li> <li>2 - open channel.</li> </ul> <code>datowltb</code> <code>Table</code> <p>date DATOWL [date] and channel water level LEVEL. Add suffix to the dataframe headers according to the level number.</p> Source code in <code>pyswap/components/drainage.py</code> <pre><code>class Flux(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Fluxes between drainage levels in .dra file.\n\n    !!! note\n\n        This was rewritten to be a single class instead of a list of classe.\n        Simplicity over DRY. Anyway, the prefered way to set this up would be\n        through the table from the extended section I guess.\n\n    Attributes:\n        drares (float): Drainage resistance.\n        infres (float): Infiltration resistance.\n        swallo (Literal[1, 2]): Switch to allow drainage from this level.\n        l (Optional[float]): Drain spacing.\n        zbotdr (float): Level of the bottom of the drain.\n        swdtyp (Literal[1, 2]): Drainage type.\n\n            * 1 - drain tube.\n            * 2 - open channel.\n\n        datowltb (Table): date DATOWL [date] and channel water\n            level LEVEL. Add suffix to the dataframe headers\n            according to the level number.\n    \"\"\"\n\n    drares1: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    infres1: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    swallo1: _Literal[1, 2, 3] | None = None\n    l1: float | None = _Field(default=None, ge=1.0, le=1.0e5)\n    zbotdr1: float = _Field(default=None, ge=-1000.0, le=0.0)\n    swdtyp1: _Literal[1, 2] | None = None\n    datowltb1: _Table | None = None\n    # level 2\n    drares2: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    infres2: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    swallo2: _Literal[1, 2, 3] | None = None\n    l2: float | None = _Field(default=None, ge=1.0, le=1.0e5)\n    zbotdr2: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    swdtyp2: _Literal[1, 2] | None = None\n    datowltb2: _Table | None = None\n    # level 3\n    drares3: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    infres3: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    swallo3: _Literal[1, 2, 3] | None = None\n    l3: float | None = _Field(default=None, ge=1.0, le=1.0e5)\n    zbotdr3: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    swdtyp3: _Literal[1, 2] | None = None\n    datowltb3: _Table | None = None\n    # level 4\n    drares4: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    infres4: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    swallo4: _Literal[1, 2, 3] | None = None\n    l4: float | None = _Field(default=None, ge=1.0, le=1.0e5)\n    zbotdr4: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    swdtyp4: _Literal[1, 2] | None = None\n    datowltb4: _Table | None = None\n    # level 5\n    drares5: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    infres5: float | None = _Field(default=None, ge=10.0, le=1.0e5)\n    swallo5: _Literal[1, 2, 3] | None = None\n    l5: float | None = _Field(default=None, ge=1.0, le=1.0e5)\n    zbotdr5: float | None = _Field(default=None, ge=-1000.0, le=0.0)\n    swdtyp5: _Literal[1, 2] | None = None\n    datowltb5: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#boundary_conditions", "title": "Boundary conditions", "text": "<p>Boundary conditions settings.</p> <p>Classes:</p> <pre><code>BottomBoundary: Bottom boundary settings.\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.boundary.BottomBoundary", "title": "<code>BottomBoundary</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code>, <code>FileMixin</code></p> <p>Bottom boundary settings.</p> <p>Technically in SWAP boundary conditions can be specified either inside the .swp file or in a separate .bbc file. The <code>swbbcfile</code> attribute determines whether the boundary conditions are written to a .bbc file.</p> <p>Attributes:</p> Name Type Description <code>swbbcfile</code> <code>Optional[Literal[0, 1]]</code> <p>Specify boundary conditions in current file (0) or in a separate .bbc file (1). The preferred is to define the boundary conditions in the .swp file. bbcfil might become deprecated in the future.</p> <code>swbotb</code> <code>Optional[Literal[1, 2, 3, 4, 5, 6, 7, 8]]</code> <p>Switch for type of bottom boundary.</p> <ul> <li>1 - prescribe groundwater level;</li> <li>2 - prescribe bottom flux;</li> <li>3 - calculate bottom flux from hydraulic head of deep aquifer;</li> <li>4 - calculate bottom flux as function of groundwater level;</li> <li>5 - prescribe soil water pressure head of bottom compartment;</li> <li>6 - bottom flux equals zero;</li> <li>7 - free drainage of soil profile;</li> <li>8 - free outflow at soil-air interface.</li> </ul> <code>sw2</code> <code>Optional[Literal[1, 2]]</code> <p>Specify whether a sinus function or a table are used for the bottom flux.</p> <ul> <li>1 - sinus function;</li> <li>2 - table.</li> </ul> <code>sw3</code> <code>Optional[Literal[1, 2]]</code> <p>Specify whether a sinus function or a table are used for the hydraulic head in the deep aquifer.</p> <ul> <li>1 - sinus function;</li> <li>2 - table.</li> </ul> <code>sw4</code> <code>Optional[Literal[0, 1]]</code> <p>An extra groundwater flux can be specified which is added to above specified flux.</p> <ul> <li>0 - no extra flux;</li> <li>1 - extra flux.</li> </ul> <code>swbotb3resvert</code> <code>Optional[Literal[0, 1]]</code> <p>Switch for vertical hydraulic resistance between bottom boundary and groundwater level.</p> <ul> <li>0 - Include vertical hydraulic resistance</li> <li>1 - Suppress vertical hydraulic resistance</li> </ul> <code>swbotb3impl</code> <code>Optional[Literal[0, 1]]</code> <p>Switch for numerical solution of bottom flux.</p> <ul> <li>0 - Explicit solution (choose always when SHAPE &lt; 1.0);</li> <li>1 - Implicit solution.</li> </ul> <code>swqhbot</code> <code>Optional[Literal[1, 2]]</code> <p>Specify whether an exponential relation or a table is used.</p> <ul> <li>1 - bottom flux is calculated with an exponential relation</li> <li>2 - bottom flux is derived from a table</li> </ul> <code>bbcfil</code> <code>Optional[String]</code> <p>Name of file with bottom boundary data (without .BBC extension).</p> <code>sinave</code> <code>Optional[Decimal2f]</code> <p>Average value of bottom flux.</p> <code>sinamp</code> <code>Optional[Decimal2f]</code> <p>Amplitude of bottom flux sine function.</p> <code>sinmax</code> <code>Optional[Decimal2f]</code> <p>Time of the year with maximum bottom flux.</p> <code>shape</code> <code>Optional[Decimal2f]</code> <p>Shape factor to derive average groundwater level.</p> <code>hdrain</code> <code>Optional[Decimal2f]</code> <p>Mean drain base to correct for average groundwater level.</p> <code>rimlay</code> <code>Optional[Decimal2f]</code> <p>Vertical resistance of aquitard.</p> <code>aqave</code> <code>Optional[Decimal2f]</code> <p>Average hydraulic head in underlaying aquifer.</p> <code>aqamp</code> <code>Optional[Decimal2f]</code> <p>Amplitude hydraulic head sinus wave.</p> <code>aqtmax</code> <code>Optional[Decimal2f]</code> <p>First time of the year with maximum hydraulic head.</p> <code>aqper</code> <code>Optional[Decimal2f]</code> <p>Period of hydraulic head sinus wave.</p> <code>cofqha</code> <code>Optional[Decimal2f]</code> <p>Coefficient A for exponential relation for bottom flux.</p> <code>cofqhb</code> <code>Optional[Decimal2f]</code> <p>Coefficient B for exponential relation for bottom flux.</p> <code>cofqhc</code> <code>Optional[Decimal2f]</code> <p>Coefficient C for exponential relation for bottom flux.</p> <code>gwlevel</code> <code>Optional[Table]</code> <p>Table with groundwater level data.</p> <code>qbot</code> <code>Optional[Table]</code> <p>Table with bottom flux data.</p> <code>haquif</code> <code>Optional[Table]</code> <p>Table with average pressure head in underlaying aquifer.</p> <code>qbot4</code> <code>Optional[Table]</code> <p>Table with bottom flux data.</p> <code>qtab</code> <code>Optional[Table]</code> <p>Table with groundwater level-bottom flux relation.</p> <code>hbot5</code> <code>Optional[Table]</code> <p>Table with the bottom compartment pressure head.</p> Source code in <code>pyswap/components/boundary.py</code> <pre><code>class BottomBoundary(\n    _PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin, _FileMixin\n):\n    \"\"\"Bottom boundary settings.\n\n    Technically in SWAP boundary conditions can be specified either inside the\n    .swp file or in a separate .bbc file. The `swbbcfile` attribute determines\n    whether the boundary conditions are written to a .bbc file.\n\n    Attributes:\n        swbbcfile (Optional[Literal[0, 1]]): Specify boundary conditions in\n            current file (0) or in a separate .bbc file (1). The preferred is to\n            define the boundary conditions in the .swp file. bbcfil might become\n            deprecated in the future.\n\n        swbotb (Optional[Literal[1, 2, 3, 4, 5, 6, 7, 8]]): Switch for type of\n            bottom boundary.\n\n            * 1 - prescribe groundwater level;\n            * 2 - prescribe bottom flux;\n            * 3 - calculate bottom flux from hydraulic head of deep aquifer;\n            * 4 - calculate bottom flux as function of groundwater level;\n            * 5 - prescribe soil water pressure head of bottom compartment;\n            * 6 - bottom flux equals zero;\n            * 7 - free drainage of soil profile;\n            * 8 - free outflow at soil-air interface.\n\n        sw2 (Optional[Literal[1, 2]]): Specify whether a sinus function or\n            a table are used for the bottom flux.\n\n            * 1 - sinus function;\n            * 2 - table.\n\n        sw3 (Optional[Literal[1, 2]]): Specify whether a sinus function or\n            a table are used for the hydraulic head in the deep aquifer.\n\n            * 1 - sinus function;\n            * 2 - table.\n\n        sw4 (Optional[Literal[0, 1]]): An extra groundwater flux can be\n            specified which is added to above specified flux.\n\n            * 0 - no extra flux;\n            * 1 - extra flux.\n\n        swbotb3resvert (Optional[Literal[0, 1]]): Switch for vertical\n            hydraulic resistance between bottom boundary and groundwater level.\n\n            * 0 - Include vertical hydraulic resistance\n            * 1 - Suppress vertical hydraulic resistance\n\n        swbotb3impl (Optional[Literal[0, 1]]): Switch for numerical solution\n            of bottom flux.\n\n            * 0 - Explicit solution (choose always when SHAPE &lt; 1.0);\n            * 1 - Implicit solution.\n\n        swqhbot (Optional[Literal[1, 2]]): Specify whether an exponential\n            relation or a table is used.\n\n            * 1 - bottom flux is calculated with an exponential relation\n            * 2 - bottom flux is derived from a table\n\n        bbcfil (Optional[String]): Name of file with bottom boundary data\n            (without .BBC extension).\n        sinave (Optional[Decimal2f]): Average value of bottom flux.\n        sinamp (Optional[Decimal2f]): Amplitude of bottom flux sine function.\n        sinmax (Optional[Decimal2f]): Time of the year with maximum bottom flux.\n        shape (Optional[Decimal2f]): Shape factor to derive average groundwater\n            level.\n        hdrain (Optional[Decimal2f]): Mean drain base to correct for average\n            groundwater level.\n        rimlay (Optional[Decimal2f]): Vertical resistance of aquitard.\n        aqave (Optional[Decimal2f]): Average hydraulic head in underlaying\n            aquifer.\n        aqamp (Optional[Decimal2f]): Amplitude hydraulic head sinus wave.\n        aqtmax (Optional[Decimal2f]): First time of the year with maximum\n            hydraulic head.\n        aqper (Optional[Decimal2f]): Period of hydraulic head sinus wave.\n        cofqha (Optional[Decimal2f]): Coefficient A for exponential relation for\n            bottom flux.\n        cofqhb (Optional[Decimal2f]): Coefficient B for exponential relation for\n            bottom flux.\n        cofqhc (Optional[Decimal2f]): Coefficient C for exponential relation for\n            bottom flux.\n        gwlevel (Optional[Table]): Table with groundwater level data.\n        qbot (Optional[Table]): Table with bottom flux data.\n        haquif (Optional[Table]): Table with average pressure head in\n            underlaying aquifer.\n        qbot4 (Optional[Table]): Table with bottom flux data.\n        qtab (Optional[Table]): Table with groundwater level-bottom\n            flux relation.\n        hbot5 (Optional[Table]): Table with the bottom compartment\n            pressure head.\n    \"\"\"\n\n    _extension = _PrivateAttr(default=\"bbc\")\n\n    swbbcfile: _Literal[0, 1] | None = None\n    bbcfil: _String | None = None\n    swbotb: _Literal[1, 2, 3, 4, 5, 6, 7, 8] | None = None\n    sw2: _Literal[1, 2] | None = None\n    sw4: _Literal[0, 1] | None = None\n    swbotb3resvert: _Literal[0, 1] | None = None\n    swbotb3impl: _Literal[0, 1] | None = None\n    swqhbot: _Literal[1, 2] | None = None\n    sinave: _Decimal2f | None = _Field(ge=-10.0, le=10.0, default=None)\n    sinamp: _Decimal2f | None = _Field(ge=-10.0, le=10.0, default=None)\n    sinmax: _Decimal2f | None = _Field(**_YEARRANGE, default=None)\n    shape: _Decimal2f | None = _Field(**_UNITRANGE, default=None)\n    hdrain: _Decimal2f | None = _Field(ge=-10000.0, le=0.0, default=None)\n    rimlay: _Decimal2f | None = _Field(ge=0, le=100000.0, default=None)\n    aqave: _Decimal2f | None = _Field(ge=-10000, le=1000, default=None)\n    aqamp: _Decimal2f | None = _Field(ge=0, le=1000.0, default=None)\n    aqtmax: _Decimal2f | None = _Field(**_YEARRANGE, default=None)\n    aqper: _Decimal2f | None = _Field(**_YEARRANGE, default=None)\n    cofqha: _Decimal2f | None = _Field(ge=-100.0, le=100.0, default=None)\n    cofqhb: _Decimal2f | None = _Field(ge=-1.0, le=1.0, default=None)\n    cofqhc: _Decimal2f | None = _Field(ge=-10.0, le=10.0, default=None)\n    gwlevel: _Table | None = None\n    qbot: _Table | None = None\n    haquif: _Table | None = None\n    qbot4: _Table | None = None\n    qtab: _Table | None = None\n    hbot5: _Table | None = None\n\n    def bbc(self) -&gt; str:\n        \"\"\"Return the string representing the bbc file.\"\"\"\n        return self._model_string(exclude={\"swbbcfile\", \"bbcfil\"})\n\n    def _model_string(self, **kwargs) -&gt; str:\n        \"\"\"Internal method to handle model string generation.\n\n        This was implemented to avoid pydantic from raising a maximum recursion\n        depth error when calling the model_string method from the super class.\n        \"\"\"\n        return super().model_string(**kwargs)\n\n    def model_string(self, **kwargs) -&gt; str:\n        \"\"\"Override model_string method to handle the swbbcfile attribute.\n\n        This method is called in the final serialization step, when each section\n        is converted into a string representation. So, depending on the\n        swbbcfile attribute, this function will return:\n\n            - a full section string representation, as for when all boundary\n                conditions are included in the .swp file, or;\n            - it will only include swbbcfile and bbcfil (the name of the file\n                when the other parameters are defined). In that case, the other\n                parameters are written to a separate .bbc file using the\n                write_bbc method.\n        \"\"\"\n        if self.swbbcfile == 1:\n            return super().model_string(include={\"swbbcfile\", \"bbcfil\"}, **kwargs)\n        else:\n            return super().model_string()\n\n    def write_bbc(self, path: _Path):\n        \"\"\"Write bottom boundary conditions to a .bbc file.\n\n        This method is only available when the swbbcfile attribute is set to 1.\n        Writes entire setion settings (except swbbcfile and bbcfil, defined in\n        the .swp file) to a separate .bbc file.\n\n        Parameters:\n            path (Path): Path to the directory where the .bbc file will be\n                saved.\n        \"\"\"\n        if self.swbbcfile != 1:\n            msg = \"Bottom boundary conditions are not set to be written to a .bbc file.\"\n            raise ValueError(msg)\n\n        self.save_file(string=self.bbc(), fname=self.bbcfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.boundary.BottomBoundary.bbc", "title": "<code>bbc()</code>", "text": "<p>Return the string representing the bbc file.</p> Source code in <code>pyswap/components/boundary.py</code> <pre><code>def bbc(self) -&gt; str:\n    \"\"\"Return the string representing the bbc file.\"\"\"\n    return self._model_string(exclude={\"swbbcfile\", \"bbcfil\"})\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.boundary.BottomBoundary.model_string", "title": "<code>model_string(**kwargs)</code>", "text": "<p>Override model_string method to handle the swbbcfile attribute.</p> <p>This method is called in the final serialization step, when each section is converted into a string representation. So, depending on the swbbcfile attribute, this function will return:</p> <pre><code>- a full section string representation, as for when all boundary\n    conditions are included in the .swp file, or;\n- it will only include swbbcfile and bbcfil (the name of the file\n    when the other parameters are defined). In that case, the other\n    parameters are written to a separate .bbc file using the\n    write_bbc method.\n</code></pre> Source code in <code>pyswap/components/boundary.py</code> <pre><code>def model_string(self, **kwargs) -&gt; str:\n    \"\"\"Override model_string method to handle the swbbcfile attribute.\n\n    This method is called in the final serialization step, when each section\n    is converted into a string representation. So, depending on the\n    swbbcfile attribute, this function will return:\n\n        - a full section string representation, as for when all boundary\n            conditions are included in the .swp file, or;\n        - it will only include swbbcfile and bbcfil (the name of the file\n            when the other parameters are defined). In that case, the other\n            parameters are written to a separate .bbc file using the\n            write_bbc method.\n    \"\"\"\n    if self.swbbcfile == 1:\n        return super().model_string(include={\"swbbcfile\", \"bbcfil\"}, **kwargs)\n    else:\n        return super().model_string()\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.boundary.BottomBoundary.write_bbc", "title": "<code>write_bbc(path)</code>", "text": "<p>Write bottom boundary conditions to a .bbc file.</p> <p>This method is only available when the swbbcfile attribute is set to 1. Writes entire setion settings (except swbbcfile and bbcfil, defined in the .swp file) to a separate .bbc file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to the directory where the .bbc file will be saved.</p> required Source code in <code>pyswap/components/boundary.py</code> <pre><code>def write_bbc(self, path: _Path):\n    \"\"\"Write bottom boundary conditions to a .bbc file.\n\n    This method is only available when the swbbcfile attribute is set to 1.\n    Writes entire setion settings (except swbbcfile and bbcfil, defined in\n    the .swp file) to a separate .bbc file.\n\n    Parameters:\n        path (Path): Path to the directory where the .bbc file will be\n            saved.\n    \"\"\"\n    if self.swbbcfile != 1:\n        msg = \"Bottom boundary conditions are not set to be written to a .bbc file.\"\n        raise ValueError(msg)\n\n    self.save_file(string=self.bbc(), fname=self.bbcfil, path=path)\n</code></pre>"}, {"location": "reference/model-components/#transport", "title": "Transport", "text": ""}, {"location": "reference/model-components/#pyswap.components.transport.HeatFlow", "title": "<code>HeatFlow</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Heat flow settings for SWAP simulation.</p> <p>Attributes:</p> Name Type Description <code>swhea</code> <code>Literal[0, 1]</code> <p>Switch for heat flow.</p> <code>swcalt</code> <code>Optional[Literal[1, 2]]</code> <ul> <li>1 - analytical method</li> <li>2 - numerical method</li> </ul> <code>tampli</code> <code>Optional[Decimal2f]</code> <p>Amplitude of annual temperature wave at soil surface [0..50 oC, R]</p> <code>tmean</code> <code>Optional[Decimal2f]</code> <p>Mean annual temperature at soil surface [-10..30 oC, R]</p> <code>timref</code> <code>Optional[Decimal2f]</code> <p>Time at which the sinus temperature wave reaches its top [0..366.0 d, R]</p> <code>ddamp</code> <code>Optional[Decimal2f]</code> <p>Damping depth of soil temperature wave [1..500 cm, R]</p> <code>swtopbhea</code> <code>Optional[Literal[1, 2]]</code> <p>Define top boundary condition * 1 - use air temperature of meteo input file as top boundary * 2 - use measured top soil temperature as top boundary</p> <code>tsoilfile</code> <code>Optional[str]</code> <p>Name of input file with soil surface temperatures without extension .TSS</p> <code>swbotbhea</code> <code>Optional[Literal[1, 2]]</code> <p>Define bottom boundary condition * 1 - no heat flux * 2 - prescribe bottom temperature</p> <code>soiltextures</code> <code>Optional[Table]</code> <p>For each physical soil layer the soil texture (g/g mineral parts) and the organic matter content (g/g dry soil)</p> <code>initsoil</code> <code>Optional[Table]</code> <p>Initial temperature TSOIL [-50..50 oC, R] as function of soil depth ZH [-100000..0 cm, R]</p> <code>bbctsoil</code> <code>Optional[Table]</code> <p>Bottom boundary temperature TBOT [-50..50 oC, R] as function of date DATET [date]</p> Source code in <code>pyswap/components/transport.py</code> <pre><code>class HeatFlow(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Heat flow settings for SWAP simulation.\n\n    Attributes:\n        swhea (Literal[0, 1]): Switch for heat flow.\n        swcalt (Optional[Literal[1, 2]]):\n            * 1 - analytical method\n            * 2 - numerical method\n        tampli (Optional[Decimal2f]): Amplitude of annual temperature wave at soil surface [0..50 oC, R]\n        tmean (Optional[Decimal2f]): Mean annual temperature at soil surface [-10..30 oC, R]\n        timref (Optional[Decimal2f]): Time at which the sinus temperature wave reaches its top [0..366.0 d, R]\n        ddamp (Optional[Decimal2f]): Damping depth of soil temperature wave [1..500 cm, R]\n        swtopbhea (Optional[Literal[1, 2]]): Define top boundary condition\n            * 1 - use air temperature of meteo input file as top boundary\n            * 2 - use measured top soil temperature as top boundary\n        tsoilfile (Optional[str]): Name of input file with soil surface temperatures without extension .TSS\n        swbotbhea (Optional[Literal[1, 2]]): Define bottom boundary condition\n            * 1 - no heat flux\n            * 2 - prescribe bottom temperature\n        soiltextures (Optional[Table]): For each physical soil layer the soil texture (g/g mineral parts) and the organic matter content (g/g dry soil)\n        initsoil (Optional[Table]): Initial temperature TSOIL [-50..50 oC, R] as function of soil depth ZH [-100000..0 cm, R]\n        bbctsoil (Optional[Table]): Bottom boundary temperature TBOT [-50..50 oC, R] as function of date DATET [date]\n    \"\"\"\n\n    swhea: _Literal[0, 1] | None = None\n    swcalt: _Literal[1, 2] | None = None\n    tampli: _Decimal2f | None = _Field(None, ge=0, le=50)\n    tmean: _Decimal2f | None = _Field(None, ge=-10, le=30)\n    timref: _Decimal2f | None = _Field(None, **_YEARRANGE)\n    ddamp: _Decimal2f | None = _Field(None, ge=1, le=500)\n    swtopbhea: _Literal[1, 2] | None = None\n    tsoilfile: _String | None = None\n    swbotbhea: _Literal[1, 2] | None = None\n    soiltextures: _Table | None = None\n    initsoiltemp: _Table | None = None\n    bbctsoil: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.transport.INITSOILTEMP", "title": "<code>INITSOILTEMP</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Table for initial soil temperature.</p> <p>Attributes:</p> Name Type Description <code>ZH</code> <code>float</code> <p>Depth of soil layer [cm, R]</p> <code>TSOIL</code> <code>float</code> <p>Initial temperature [oC, R]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class INITSOILTEMP(BaseTableModel):\n    \"\"\"Table for initial soil temperature.\n\n    Attributes:\n        ZH (float): Depth of soil layer [cm, R]\n        TSOIL (float): Initial temperature [oC, R]\n    \"\"\"\n\n    ZH: float = pa.Field(ge=-100000, le=0)\n    TSOIL: float = pa.Field(ge=-50, le=50)\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.transport.SOILTEXTURES", "title": "<code>SOILTEXTURES</code>", "text": "<p>               Bases: <code>BaseTableModel</code></p> <p>Table for soil textures.</p> <p>Attributes:</p> Name Type Description <code>PSAND</code> <code>float</code> <p>Depth of soil layer [cm, R]</p> <code>PSILT</code> <code>float</code> <p>Sand content [g/g mineral parts, R]</p> <code>PCLAY</code> <code>float</code> <p>Clay content [g/g mineral parts, R]</p> <code>ORGMAT</code> <code>float</code> <p>Organic matter content [g/g dry soil, R]</p> Source code in <code>pyswap/components/tables.py</code> <pre><code>class SOILTEXTURES(BaseTableModel):\n    \"\"\"Table for soil textures.\n\n    Attributes:\n        PSAND (float): Depth of soil layer [cm, R]\n        PSILT (float): Sand content [g/g mineral parts, R]\n        PCLAY (float): Clay content [g/g mineral parts, R]\n        ORGMAT (float): Organic matter content [g/g dry soil, R]\n    \"\"\"\n\n    PSAND: float\n    PSILT: float\n    PCLAY: float\n    ORGMAT: float\n</code></pre>"}, {"location": "reference/model-components/#pyswap.components.transport.SoluteTransport", "title": "<code>SoluteTransport</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>SerializableMixin</code>, <code>YAMLValidatorMixin</code></p> <p>Solute transport settings.</p> <p>Attributes:</p> <pre><code>swsolu (Literal[0, 1]): Switch for simulation of solute transport.\ncpre (Optional[Decimal2f]): Solute concentration in precipitation [0..100 mg/cm3].\ncdrain (Optional[Decimal2f]): Solute concentration in surface water [0..100 mg/cm3].\nswbotbc (Optional[Literal[0, 1, 2]]): Switch for groundwater concentration in case of upward flow (seepage).\ncseep (Optional[Decimal2f]): Solute concentration in surface water [0..100 mg/cm3].\nddif (Optional[Decimal2f]): Molecular diffusion coefficient [0..10 cm2/d].\ntscf (Optional[Decimal2f]): Relative uptake of solutes by roots [0..10].\nswsp (Optional[Literal[0, 1]]): Switch, consider solute adsorption.\nfrexp (Optional[Decimal2f]): Freundlich exponent [0..10].\ncref (Optional[Decimal2f]): Reference solute concentration for adsorption [0..1000 mg/cm3].\nswdc (Optional[Literal[0, 1]]): Switch, consider solute decomposition.\ngampar (Optional[Decimal2f]): Factor reduction decomposition due to temperature [0..0.5 /C].\nrtheta (Optional[Decimal2f]): Minimum water content for potential decomposition [0..0.4 cm3/cm3].\nbexp (Optional[Decimal2f]): Exponent in reduction decomposition due to dryness [0..2].\nswbr (Optional[Literal[0, 1]]): Switch, consider mixed reservoir of saturated zone.\ndaquif (Optional[Decimal2f]): Thickness saturated part of aquifer [0..10000 cm].\nporos (Optional[Decimal2f]): Porosity of aquifer [0..0.6].\nkfsat (Optional[Decimal2f]): Linear adsorption coefficient in aquifer [0..100 cm3/mg].\ndecsat (Optional[Decimal2f]): Decomposition rate in aquifer [0..10 /d].\ncdraini (Optional[Decimal2f]): Initial solute concentration in groundwater [0..100 mg/cm3].\ncseeparrtb (Optional[Table]): Table for groundwater concentration as function of time.\ninissoil (Optional[Table]): Table for initial solute concentration as function of soil depth.\nmiscellaneous (Optional[Table]): Table for miscellaneous parameters as function of soil depth.\n</code></pre> Source code in <code>pyswap/components/transport.py</code> <pre><code>class SoluteTransport(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Solute transport settings.\n\n    Attributes:\n\n        swsolu (Literal[0, 1]): Switch for simulation of solute transport.\n        cpre (Optional[Decimal2f]): Solute concentration in precipitation [0..100 mg/cm3].\n        cdrain (Optional[Decimal2f]): Solute concentration in surface water [0..100 mg/cm3].\n        swbotbc (Optional[Literal[0, 1, 2]]): Switch for groundwater concentration in case of upward flow (seepage).\n        cseep (Optional[Decimal2f]): Solute concentration in surface water [0..100 mg/cm3].\n        ddif (Optional[Decimal2f]): Molecular diffusion coefficient [0..10 cm2/d].\n        tscf (Optional[Decimal2f]): Relative uptake of solutes by roots [0..10].\n        swsp (Optional[Literal[0, 1]]): Switch, consider solute adsorption.\n        frexp (Optional[Decimal2f]): Freundlich exponent [0..10].\n        cref (Optional[Decimal2f]): Reference solute concentration for adsorption [0..1000 mg/cm3].\n        swdc (Optional[Literal[0, 1]]): Switch, consider solute decomposition.\n        gampar (Optional[Decimal2f]): Factor reduction decomposition due to temperature [0..0.5 /C].\n        rtheta (Optional[Decimal2f]): Minimum water content for potential decomposition [0..0.4 cm3/cm3].\n        bexp (Optional[Decimal2f]): Exponent in reduction decomposition due to dryness [0..2].\n        swbr (Optional[Literal[0, 1]]): Switch, consider mixed reservoir of saturated zone.\n        daquif (Optional[Decimal2f]): Thickness saturated part of aquifer [0..10000 cm].\n        poros (Optional[Decimal2f]): Porosity of aquifer [0..0.6].\n        kfsat (Optional[Decimal2f]): Linear adsorption coefficient in aquifer [0..100 cm3/mg].\n        decsat (Optional[Decimal2f]): Decomposition rate in aquifer [0..10 /d].\n        cdraini (Optional[Decimal2f]): Initial solute concentration in groundwater [0..100 mg/cm3].\n        cseeparrtb (Optional[Table]): Table for groundwater concentration as function of time.\n        inissoil (Optional[Table]): Table for initial solute concentration as function of soil depth.\n        miscellaneous (Optional[Table]): Table for miscellaneous parameters as function of soil depth.\n    \"\"\"\n\n    swsolu: _Literal[0, 1] | None = None\n    cpre: _Decimal2f | None = _Field(None, ge=0, le=100)\n    cdrain: _Decimal2f | None = _Field(None, ge=0, le=100)\n    swbotbc: _Literal[0, 1, 2] | None = None\n    cseep: _Decimal2f | None = _Field(None, ge=0, le=100)\n    ddif: _Decimal2f | None = _Field(None, ge=0, le=10)\n    tscf: _Decimal2f | None = _Field(None, ge=0, le=10)\n    swsp: _Literal[0, 1] | None = None\n    frexp: _Decimal2f | None = _Field(None, ge=0, le=10)\n    cref: _Decimal2f | None = _Field(None, ge=0, le=1000)\n    swdc: _Literal[0, 1] | None = None\n    gampar: _Decimal2f | None = _Field(None, ge=0, le=0.5)\n    rtheta: _Decimal2f | None = _Field(None, ge=0, le=0.4)\n    bexp: _Decimal2f | None = _Field(None, ge=0, le=2)\n    swbr: _Literal[0, 1] | None = None\n    daquif: _Decimal2f | None = _Field(None, ge=0, le=10000)\n    poros: _Decimal2f | None = _Field(None, ge=0, le=0.6)\n    kfsat: _Decimal2f | None = _Field(None, ge=0, le=100)\n    decsat: _Decimal2f | None = _Field(None, ge=0, le=10)\n    cdraini: _Decimal2f | None = _Field(None, ge=0, le=100)\n    cseeparrtb: _Table | None = None\n    inissoil: _Table | None = None\n    misc: _Table | None = None\n</code></pre>"}, {"location": "reference/model-components/#database", "title": "Database", "text": ""}, {"location": "reference/model-components/#plot", "title": "Plot", "text": "<p>Plotting functionality for pySWAP.</p> <p>Plotting of results depends heavily on the application of the model. Therefore, in this module, I only inclduded a few examples of how to plot results for specific cases.</p> <p>Modules:</p> Name Description <code>evapotranspiration</code> <p>Functions for plotting evapotranspiration data.</p> <code>watercontent</code> <p>Functions for plotting water content data as heat map.</p>"}, {"location": "reference/model-components/#pyswap.core.plot.water_content", "title": "<code>water_content(df, depth_col, date_col, wcontent_col, title='Water content')</code>", "text": "<p>Plot water content as heatmap.</p> <p>For this function to work, the user should either use the <code>vap</code> output converted to a dataframe, or make sure that in the csv_tz output they provide, only the water content data is present.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the water content data</p> required <code>depth_col</code> <code>str</code> <p>Column name for depth data</p> required <code>date_col</code> <code>str</code> <p>Column name for date data</p> required <code>wcontent_col</code> <code>str</code> <p>Column name for water content data</p> required <code>title</code> <code>str</code> <p>Title of the plot. Defaults to 'Water content'.</p> <code>'Water content'</code> Source code in <code>pyswap/core/plot/watercontent.py</code> <pre><code>def water_content(\n    df: pd.DataFrame,\n    depth_col: str,\n    date_col: str,\n    wcontent_col: str,\n    title: str = \"Water content\",\n):\n    \"\"\"Plot water content as heatmap.\n\n    For this function to work, the user should either use the `vap` output\n    converted to a dataframe, or make sure that in the csv_tz output they\n    provide, only the water content data is present.\n\n    Parameters:\n        df (pd.DataFrame): DataFrame containing the water content data\n        depth_col (str): Column name for depth data\n        date_col (str): Column name for date data\n        wcontent_col (str): Column name for water content data\n        title (str, optional): Title of the plot. Defaults to 'Water content'.\n    \"\"\"\n\n    sns.set_context(\"poster\")\n\n    df_wcont = df[[depth_col, date_col, wcontent_col]]\n\n    df_wcont.loc[:, date_col] = pd.to_datetime(df_wcont[date_col])\n    df_wcont.loc[:, depth_col] = df_wcont[depth_col].astype(float)\n    df_wcont.loc[:, wcontent_col] = df_wcont[wcontent_col].astype(float)\n\n    pivot_table = df_wcont.pivot(columns=date_col, index=depth_col, values=wcontent_col)\n    pivot_table = pivot_table.sort_index(axis=1)\n\n    plt.figure(figsize=(34, 8))\n    sns.heatmap(pivot_table, cmap=\"YlGnBu\")\n    plt.title(title)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Depth (cm)\")\n\n    plt.gca().invert_yaxis()\n\n    plt.xticks(rotation=45)\n\n    format_months = lambda x, p: pivot_table.columns[int(x)].strftime(\"%Y-%m\")\n    plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(format_months))\n</code></pre>"}, {"location": "reference/model-components/#pyswap.core.plot.evapotranspiration", "title": "<code>evapotranspiration</code>", "text": "<p>Plot evapotranspiration (potential vs actual) and compute the RMSE.</p>"}, {"location": "reference/model-components/#pyswap.core.plot.evapotranspiration.evapotranspiration", "title": "<code>evapotranspiration(potential, actual, title='Evapotranspiration')</code>", "text": "<p>Plot evapotranspiration (potential vs actual) and compute the RMSE.</p> Paremeters <p>potential (DataFrame): DataFrame containing dates and values for potential evapotranspiration. actual (DataFrame): DataFrame containing dates and values for actual evapotranspiration. title (str, optional): Title of the plot. Defaults to 'Evapotranspiration'.</p> Source code in <code>pyswap/core/plot/evapotranspiration.py</code> <pre><code>def evapotranspiration(\n    potential: DataFrame, actual: DataFrame, title: str = \"Evapotranspiration\"\n):\n    \"\"\"Plot evapotranspiration (potential vs actual) and compute the RMSE.\n\n    Paremeters:\n        potential (DataFrame): DataFrame containing dates and values for potential evapotranspiration.\n        actual (DataFrame): DataFrame containing dates and values for actual evapotranspiration.\n        title (str, optional): Title of the plot. Defaults to 'Evapotranspiration'.\n    \"\"\"\n\n    sns.set_context(\"poster\")\n\n    fig, ax = plt.subplots(figsize=(34, 8))\n    sns.lineplot(data=potential, ax=ax, label=\"Potential\", color=\"black\", linewidth=1)\n    sns.lineplot(\n        data=actual, ax=ax, label=\"Actual\", color=\"orange\", linewidth=1, linestyle=\"--\"\n    )\n\n    ax.set_title(title, pad=20)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Evapotranspiration\")\n\n    ax.tick_params(axis=\"x\", rotation=45)\n    ax.legend()\n    plt.tight_layout()\n    plt.show()\n</code></pre>"}, {"location": "reference/model-components/#pyswap.core.plot.watercontent", "title": "<code>watercontent</code>", "text": "<p>Functions:</p> Name Description <code>water_content</code> <p>Plot water content as heatmap.</p>"}, {"location": "reference/model-components/#pyswap.core.plot.watercontent.water_content", "title": "<code>water_content(df, depth_col, date_col, wcontent_col, title='Water content')</code>", "text": "<p>Plot water content as heatmap.</p> <p>For this function to work, the user should either use the <code>vap</code> output converted to a dataframe, or make sure that in the csv_tz output they provide, only the water content data is present.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>DataFrame containing the water content data</p> required <code>depth_col</code> <code>str</code> <p>Column name for depth data</p> required <code>date_col</code> <code>str</code> <p>Column name for date data</p> required <code>wcontent_col</code> <code>str</code> <p>Column name for water content data</p> required <code>title</code> <code>str</code> <p>Title of the plot. Defaults to 'Water content'.</p> <code>'Water content'</code> Source code in <code>pyswap/core/plot/watercontent.py</code> <pre><code>def water_content(\n    df: pd.DataFrame,\n    depth_col: str,\n    date_col: str,\n    wcontent_col: str,\n    title: str = \"Water content\",\n):\n    \"\"\"Plot water content as heatmap.\n\n    For this function to work, the user should either use the `vap` output\n    converted to a dataframe, or make sure that in the csv_tz output they\n    provide, only the water content data is present.\n\n    Parameters:\n        df (pd.DataFrame): DataFrame containing the water content data\n        depth_col (str): Column name for depth data\n        date_col (str): Column name for date data\n        wcontent_col (str): Column name for water content data\n        title (str, optional): Title of the plot. Defaults to 'Water content'.\n    \"\"\"\n\n    sns.set_context(\"poster\")\n\n    df_wcont = df[[depth_col, date_col, wcontent_col]]\n\n    df_wcont.loc[:, date_col] = pd.to_datetime(df_wcont[date_col])\n    df_wcont.loc[:, depth_col] = df_wcont[depth_col].astype(float)\n    df_wcont.loc[:, wcontent_col] = df_wcont[wcontent_col].astype(float)\n\n    pivot_table = df_wcont.pivot(columns=date_col, index=depth_col, values=wcontent_col)\n    pivot_table = pivot_table.sort_index(axis=1)\n\n    plt.figure(figsize=(34, 8))\n    sns.heatmap(pivot_table, cmap=\"YlGnBu\")\n    plt.title(title)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Depth (cm)\")\n\n    plt.gca().invert_yaxis()\n\n    plt.xticks(rotation=45)\n\n    format_months = lambda x, p: pivot_table.columns[int(x)].strftime(\"%Y-%m\")\n    plt.gca().xaxis.set_major_formatter(plt.FuncFormatter(format_months))\n</code></pre>"}, {"location": "reference/pyswap-model/", "title": "pySWAP Model", "text": "<p>Building, running and parsing the results of a SWAP model run.</p> <p>When the Model class begun to grow, it was clear that it needed to be refactored into a more modular structure. The functionality to build environment, run and parse result has been abstracted to 3 classes, focusing the main (and exposed to the user) Model class focused on the model components and their interactions. The four classes in this module are:</p> <p>Classes:</p> <pre><code>ModelBuilder: Class responsible for building the model components.\nModelRunner: Class responsible for running the model.\nResultReader: Class responsible for parsing the model results.\nModel: Main class that runs the SWAP model.\n</code></pre> <p>Capturing model results.</p> <p>After a model is run, the results are stored in a <code>Result</code> object. The object stores the log file, output file, and warnings. Output is a dictionary with the keys being the file extensions and the values being the file contents. There are also computed properties making the most common output formats easily accessible.</p> <p>Classes:</p> Name Description <code>Result</code> <p>Result of a model run.</p>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model", "title": "<code>Model</code>", "text": "<p>               Bases: <code>PySWAPBaseModel</code>, <code>FileMixin</code>, <code>SerializableMixin</code></p> <p>Main class that runs the SWAP model.</p> <p>Even though all sections are set to optional, the model will not run if any of the components are missing.</p> <p>Attributes:</p> Name Type Description <code>metadata</code> <code>Subsection</code> <p>Metadata of the model.</p> <code>version</code> <code>str</code> <p>The version of the model.</p> <code>generalsettings</code> <code>Subsection</code> <p>Simulation settings.</p> <code>meteorology</code> <code>Subsection</code> <p>Meteorological data.</p> <code>crop</code> <code>Subsection</code> <p>Crop data.</p> <code>fixedirrigation</code> <code>Subsection</code> <p>Fixed irrigation settings.</p> <code>soilmoisture</code> <code>Subsection</code> <p>Soil moisture data.</p> <code>surfaceflow</code> <code>Subsection</code> <p>Surface flow data.</p> <code>evaporation</code> <code>Subsection</code> <p>Evaporation data.</p> <code>soilprofile</code> <code>Subsection</code> <p>Soil profile data.</p> <code>snowandfrost</code> <code>Subsection</code> <p>Snow and frost data.</p> <code>richards</code> <code>Subsection</code> <p>Richards data.</p> <code>lateraldrainage</code> <code>Subsection</code> <p>Lateral drainage data.</p> <code>bottomboundary</code> <code>Subsection</code> <p>Bottom boundary data.</p> <code>heatflow</code> <code>Subsection</code> <p>Heat flow data.</p> <code>solutetransport</code> <code>Subsection</code> <p>Solute transport data.</p> <p>Methods:</p> Name Description <code>write_swp</code> <p>Write the .swp input file.</p> <code>validate</code> <p>Validate the model.</p> <code>run</code> <p>Run the model.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>class Model(PySWAPBaseModel, FileMixin, SerializableMixin):\n    \"\"\"Main class that runs the SWAP model.\n\n    Even though all sections are set to optional, the model will not run if\n    any of the components are missing.\n\n    Attributes:\n        metadata (Subsection): Metadata of the model.\n        version (str): The version of the model.\n        generalsettings (Subsection): Simulation settings.\n        meteorology (Subsection): Meteorological data.\n        crop (Subsection): Crop data.\n        fixedirrigation (Subsection): Fixed irrigation settings.\n        soilmoisture (Subsection): Soil moisture data.\n        surfaceflow (Subsection): Surface flow data.\n        evaporation (Subsection): Evaporation data.\n        soilprofile (Subsection): Soil profile data.\n        snowandfrost (Subsection): Snow and frost data.\n        richards (Subsection): Richards data.\n        lateraldrainage (Subsection): Lateral drainage data.\n        bottomboundary (Subsection): Bottom boundary data.\n        heatflow (Subsection): Heat flow data.\n        solutetransport (Subsection): Solute transport data.\n\n    Methods:\n        write_swp: Write the .swp input file.\n        validate: Validate the model.\n        run: Run the model.\n    \"\"\"\n\n    _validate_on_run: bool = PrivateAttr(default=False)\n    _extension = \"swp\"\n\n    metadata: Subsection[Metadata] | None = Field(default=None, repr=False)\n    version: str = Field(exclude=True, default=\"base\")\n    generalsettings: Subsection[GeneralSettings] | None = Field(\n        default=None, repr=False\n    )\n    meteorology: Subsection[Meteorology] | None = Field(default=None, repr=False)\n    crop: Subsection[Crop] | None = Field(default=None, repr=False)\n    fixedirrigation: Subsection[FixedIrrigation] | None = Field(\n        default=FixedIrrigation(swirfix=0), repr=False\n    )\n    soilmoisture: Subsection[SoilMoisture] | None = Field(default=None, repr=False)\n    surfaceflow: Subsection[SurfaceFlow] | None = Field(default=None, repr=False)\n    evaporation: Subsection[Evaporation] | None = Field(default=None, repr=False)\n    soilprofile: Subsection[SoilProfile] | None = Field(default=None, repr=False)\n    snowandfrost: Subsection[SnowAndFrost] | None = Field(\n        default=SnowAndFrost(swsnow=0, swfrost=0), repr=False\n    )\n    richards: Subsection[RichardsSettings] | None = Field(\n        default=RichardsSettings(swkmean=1, swkimpl=0), repr=False\n    )\n    lateraldrainage: Subsection[Drainage] | None = Field(default=None, repr=False)\n    bottomboundary: Subsection[BottomBoundary] | None = Field(default=None, repr=False)\n    heatflow: Subsection[HeatFlow] | None = Field(default=HeatFlow(swhea=0), repr=False)\n    solutetransport: Subsection[SoluteTransport] | None = Field(\n        default=SoluteTransport(swsolu=0), repr=False\n    )\n\n    @property\n    def swp(self):\n        \"\"\"The content of the swp file.\n\n        Serialization of Subsection field type has been set in a way that it\n        will generate SWAP formatted string when `model_string()` is called on\n        the parent class.\n        \"\"\"\n        return self.model_string()\n\n    @model_validator(mode=\"after\")\n    def validate_missing_components(self):\n        \"\"\"Validate, on run, that all required components are present.\"\"\"\n\n        if not self._validate_on_run:\n            return self\n\n        required_components = [\n            \"metadata\",\n            \"generalsettings\",\n            \"meteorology\",\n            \"crop\",\n            \"fixedirrigation\",\n            \"soilmoisture\",\n            \"surfaceflow\",\n            \"evaporation\",\n            \"soilprofile\",\n            \"snowandfrost\",\n            \"richards\",\n            \"lateraldrainage\",\n            \"bottomboundary\",\n            \"heatflow\",\n            \"solutetransport\",\n        ]\n\n        missing_components = [\n            comp for comp in required_components if getattr(self, comp) is None\n        ]\n\n        if missing_components:\n            msg = f\"Missing required components: {', '.join(missing_components)}\"\n            raise ValueError(msg)\n\n        # validate each component\n        for comp in required_components:\n            getattr(self, comp)\n\n        return self\n\n    @model_validator(mode=\"after\")\n    def validate_each_component(self):\n        \"\"\"Validate, on run, that all required components are present.\"\"\"\n\n        if not self._validate_on_run:\n            return self\n\n        for comp in self.model_fields:\n            item = getattr(self, comp)\n            if hasattr(item, \"validate_with_yaml\"):\n                item._validation = True\n                item.validate_with_yaml()\n\n        return self\n\n    def validate(self):\n        \"\"\"Execute the model validation when `run()` is called.\n\n        This method should probably be refactored. It seems to shadow some\n        validation method from Pydantic.\n        \"\"\"\n\n        try:\n            self._validate_on_run = True\n            self.model_validate(self)\n        finally:\n            self._validate_on_run = False\n            logger.info(\"Validation successful.\")\n\n    def write_swp(self, path: str | Path):\n        \"\"\"Write the .swp input file.\n\n        Parameters:\n            path (str | Path): The path to write the file to.\n        \"\"\"\n        self.save_file(string=self.swp, path=path, fname=\"swap\")\n\n    def get_inputs(self) -&gt; dict:\n        \"\"\"Get the input files in a dictionary.\"\"\"\n        builder = ModelBuilder(model=self, tempdir=Path.cwd())\n        return builder.get_inputs()\n\n    def to_classic_swap(self, path: Path) -&gt; None:\n        \"\"\"Prepare all the files for a model run in user's directory.\"\"\"\n        self.validate()\n        builder = ModelBuilder(model=self, tempdir=path)\n\n        builder.write_inputs()\n        builder.copy_executable()\n\n        logger.info(f\"Model files written to {path}\")\n\n    def run(\n        self, path: str | Path | None = None, silence_warnings: bool = False\n    ) -&gt; Result:\n        \"\"\"Run the model using ModelRunner.\"\"\"\n        self.validate()\n        path = Path.cwd() if path is None else path\n        return ModelRunner(self).run(path, silence_warnings)\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.swp", "title": "<code>swp</code>  <code>property</code>", "text": "<p>The content of the swp file.</p> <p>Serialization of Subsection field type has been set in a way that it will generate SWAP formatted string when <code>model_string()</code> is called on the parent class.</p>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.get_inputs", "title": "<code>get_inputs()</code>", "text": "<p>Get the input files in a dictionary.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def get_inputs(self) -&gt; dict:\n    \"\"\"Get the input files in a dictionary.\"\"\"\n    builder = ModelBuilder(model=self, tempdir=Path.cwd())\n    return builder.get_inputs()\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.run", "title": "<code>run(path=None, silence_warnings=False)</code>", "text": "<p>Run the model using ModelRunner.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def run(\n    self, path: str | Path | None = None, silence_warnings: bool = False\n) -&gt; Result:\n    \"\"\"Run the model using ModelRunner.\"\"\"\n    self.validate()\n    path = Path.cwd() if path is None else path\n    return ModelRunner(self).run(path, silence_warnings)\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.to_classic_swap", "title": "<code>to_classic_swap(path)</code>", "text": "<p>Prepare all the files for a model run in user's directory.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def to_classic_swap(self, path: Path) -&gt; None:\n    \"\"\"Prepare all the files for a model run in user's directory.\"\"\"\n    self.validate()\n    builder = ModelBuilder(model=self, tempdir=path)\n\n    builder.write_inputs()\n    builder.copy_executable()\n\n    logger.info(f\"Model files written to {path}\")\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.validate", "title": "<code>validate()</code>", "text": "<p>Execute the model validation when <code>run()</code> is called.</p> <p>This method should probably be refactored. It seems to shadow some validation method from Pydantic.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def validate(self):\n    \"\"\"Execute the model validation when `run()` is called.\n\n    This method should probably be refactored. It seems to shadow some\n    validation method from Pydantic.\n    \"\"\"\n\n    try:\n        self._validate_on_run = True\n        self.model_validate(self)\n    finally:\n        self._validate_on_run = False\n        logger.info(\"Validation successful.\")\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.validate_each_component", "title": "<code>validate_each_component()</code>", "text": "<p>Validate, on run, that all required components are present.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_each_component(self):\n    \"\"\"Validate, on run, that all required components are present.\"\"\"\n\n    if not self._validate_on_run:\n        return self\n\n    for comp in self.model_fields:\n        item = getattr(self, comp)\n        if hasattr(item, \"validate_with_yaml\"):\n            item._validation = True\n            item.validate_with_yaml()\n\n    return self\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.validate_missing_components", "title": "<code>validate_missing_components()</code>", "text": "<p>Validate, on run, that all required components are present.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_missing_components(self):\n    \"\"\"Validate, on run, that all required components are present.\"\"\"\n\n    if not self._validate_on_run:\n        return self\n\n    required_components = [\n        \"metadata\",\n        \"generalsettings\",\n        \"meteorology\",\n        \"crop\",\n        \"fixedirrigation\",\n        \"soilmoisture\",\n        \"surfaceflow\",\n        \"evaporation\",\n        \"soilprofile\",\n        \"snowandfrost\",\n        \"richards\",\n        \"lateraldrainage\",\n        \"bottomboundary\",\n        \"heatflow\",\n        \"solutetransport\",\n    ]\n\n    missing_components = [\n        comp for comp in required_components if getattr(self, comp) is None\n    ]\n\n    if missing_components:\n        msg = f\"Missing required components: {', '.join(missing_components)}\"\n        raise ValueError(msg)\n\n    # validate each component\n    for comp in required_components:\n        getattr(self, comp)\n\n    return self\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.Model.write_swp", "title": "<code>write_swp(path)</code>", "text": "<p>Write the .swp input file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to write the file to.</p> required Source code in <code>pyswap/model/model.py</code> <pre><code>def write_swp(self, path: str | Path):\n    \"\"\"Write the .swp input file.\n\n    Parameters:\n        path (str | Path): The path to write the file to.\n    \"\"\"\n    self.save_file(string=self.swp, path=path, fname=\"swap\")\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelBuilder", "title": "<code>ModelBuilder</code>", "text": "<p>Building model components.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>The model to build.</p> <code>tempdir</code> <code>str</code> <p>The temporary directory to store the input files.</p> <p>Methods:</p> Name Description <code>copy_executable</code> <p>Copy the appropriate SWAP executable to the temporary directory.</p> <code>write_inputs</code> <p>Write the input files to the temporary directory.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>class ModelBuilder:\n    \"\"\"Building model components.\n\n    Attributes:\n        model (Model): The model to build.\n        tempdir (str): The temporary directory to store the input files.\n\n    Methods:\n        copy_executable: Copy the appropriate SWAP executable to the\n            temporary directory.\n        write_inputs: Write the input files to the temporary directory.\n    \"\"\"\n\n    def __init__(self, model: Model, tempdir: str):\n        self.model = model\n        self.tempdir = tempdir\n\n    def copy_executable(self) -&gt; None:\n        \"\"\"Copy the appropriate SWAP executable to the temporary directory.\"\"\"\n        if IS_WINDOWS:\n            shutil.copy(swap_windows, self.tempdir)\n            logger.info(\n                \"Copying the windows version of SWAP into temporary directory...\"\n            )\n        else:\n            shutil.copy(swap_linux, self.tempdir)\n            logger.info(\"Copying linux executable into temporary directory...\")\n\n        return self\n\n    def get_inputs(self) -&gt; dict:\n        \"\"\"Get the inpup files in a dictionary.\"\"\"\n        inputs = {}\n\n        inputs[\"swp\"] = self.model.swp\n        if self.model.lateraldrainage.swdra in [1, 2]:\n            inputs[\"dra\"] = self.model.lateraldrainage.drafile.dra\n        if self.model.crop.cropfiles:\n            inputs[\"crop\"] = self.model.crop.cropfiles\n        if self.model.meteorology.metfile:\n            inputs[\"met\"] = self.model.meteorology.met\n        if self.model.fixedirrigation.swirgfil == 1:\n            inputs[\"irg\"] = self.model.fixedirrigation.irg\n        if self.model.bottomboundary.swbbcfile == 1:\n            inputs[\"bbc\"] = self.model.bottomboundary.bbc\n\n        return inputs\n\n    def write_inputs(self) -&gt; None:\n        \"\"\"Write the input files to the temporary directory.\"\"\"\n        logger.info(\"Preparing files...\")\n\n        self.model.write_swp(self.tempdir)\n\n        if self.model.lateraldrainage.swdra in [1, 2]:\n            self.model.lateraldrainage.write_dra(self.tempdir)\n        if self.model.crop.cropfiles:\n            self.model.crop.write_crop(self.tempdir)\n        if self.model.meteorology.metfile:\n            self.model.meteorology.write_met(self.tempdir)\n        if self.model.fixedirrigation.swirgfil == 1:\n            self.model.fixedirrigation.write_irg(self.tempdir)\n        if self.model.bottomboundary.swbbcfile == 1:\n            self.model.bottomboundary.write_bbc(self.tempdir)\n\n        return self\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelBuilder.copy_executable", "title": "<code>copy_executable()</code>", "text": "<p>Copy the appropriate SWAP executable to the temporary directory.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def copy_executable(self) -&gt; None:\n    \"\"\"Copy the appropriate SWAP executable to the temporary directory.\"\"\"\n    if IS_WINDOWS:\n        shutil.copy(swap_windows, self.tempdir)\n        logger.info(\n            \"Copying the windows version of SWAP into temporary directory...\"\n        )\n    else:\n        shutil.copy(swap_linux, self.tempdir)\n        logger.info(\"Copying linux executable into temporary directory...\")\n\n    return self\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelBuilder.get_inputs", "title": "<code>get_inputs()</code>", "text": "<p>Get the inpup files in a dictionary.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def get_inputs(self) -&gt; dict:\n    \"\"\"Get the inpup files in a dictionary.\"\"\"\n    inputs = {}\n\n    inputs[\"swp\"] = self.model.swp\n    if self.model.lateraldrainage.swdra in [1, 2]:\n        inputs[\"dra\"] = self.model.lateraldrainage.drafile.dra\n    if self.model.crop.cropfiles:\n        inputs[\"crop\"] = self.model.crop.cropfiles\n    if self.model.meteorology.metfile:\n        inputs[\"met\"] = self.model.meteorology.met\n    if self.model.fixedirrigation.swirgfil == 1:\n        inputs[\"irg\"] = self.model.fixedirrigation.irg\n    if self.model.bottomboundary.swbbcfile == 1:\n        inputs[\"bbc\"] = self.model.bottomboundary.bbc\n\n    return inputs\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelBuilder.write_inputs", "title": "<code>write_inputs()</code>", "text": "<p>Write the input files to the temporary directory.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def write_inputs(self) -&gt; None:\n    \"\"\"Write the input files to the temporary directory.\"\"\"\n    logger.info(\"Preparing files...\")\n\n    self.model.write_swp(self.tempdir)\n\n    if self.model.lateraldrainage.swdra in [1, 2]:\n        self.model.lateraldrainage.write_dra(self.tempdir)\n    if self.model.crop.cropfiles:\n        self.model.crop.write_crop(self.tempdir)\n    if self.model.meteorology.metfile:\n        self.model.meteorology.write_met(self.tempdir)\n    if self.model.fixedirrigation.swirgfil == 1:\n        self.model.fixedirrigation.write_irg(self.tempdir)\n    if self.model.bottomboundary.swbbcfile == 1:\n        self.model.bottomboundary.write_bbc(self.tempdir)\n\n    return self\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelRunner", "title": "<code>ModelRunner</code>", "text": "<p>Class responsible for running the model.</p> <p>In the run method, the ResultReader is utilized to abstract the parsing of the model results.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>The model to run.</p> <p>Methods:</p> Name Description <code>run_swap</code> <p>Run the SWAP executable.</p> <code>raise_swap_warning</code> <p>Raise a warning.</p> <code>run</code> <p>Main function that runs the model</p> Source code in <code>pyswap/model/model.py</code> <pre><code>class ModelRunner:\n    \"\"\"Class responsible for running the model.\n\n    In the run method, the ResultReader is utilized to abstract the parsing of\n    the model results.\n\n    Attributes:\n        model (Model): The model to run.\n\n    Methods:\n        run_swap: Run the SWAP executable.\n        raise_swap_warning: Raise a warning.\n        run: Main function that runs the model\n    \"\"\"\n\n    def __init__(self, model: Model):\n        self.model = model\n\n    @staticmethod\n    def run_swap(tempdir: Path) -&gt; str:\n        \"\"\"Run the SWAP executable.\n\n        Run the exacutable in the tempdirectory and pass the newline to the\n        stdin when the executable asks for input (upon termination).\n\n        Parameters:\n            tempdir (Path): The temporary directory where the executable\n                is stored.\n        \"\"\"\n        swap_path = Path(tempdir, \"swap.exe\") if IS_WINDOWS else \"./swap420\"\n        p = subprocess.Popen(\n            swap_path,\n            stdout=subprocess.PIPE,\n            stdin=subprocess.PIPE,\n            stderr=subprocess.STDOUT,\n            cwd=tempdir,\n        )\n        stdout = p.communicate(input=b\"\\n\")[0]\n\n        return stdout.decode()\n\n    def raise_swap_warning(self, warnings: list):\n        \"\"\"Log the warnings form the model run.\n\n        Parameters:\n            warnings (list): The warnings from the model run parsed with the\n                ResultReaded.\n        \"\"\"\n        for message in warnings:\n            logger.warning(message)\n\n    def run(self, path: str | Path, silence_warnings: bool = False) -&gt; Result:\n        \"\"\"Main function that runs the model.\n\n        First ModelBuilder is used to prepare the environment for the model run.\n        Second, the SWAP executable is run and the decoded result passed from\n        the executable is parsed using the ResultReader and used to update the\n        Result object.\n\n        Parameters:\n            path (str | Path): The path to the temporary directory.\n            silence_warnings (bool): If True, warnings are not raised.\n\n        Returns:\n            Result: The parsed model results.\n        \"\"\"\n\n        with tempfile.TemporaryDirectory(dir=path) as tempdir:\n            builder = ModelBuilder(self.model, tempdir)\n            builder.copy_executable().write_inputs()\n\n            stdout = self.run_swap(tempdir)\n\n            if \"normal completion\" not in stdout:\n                msg = f\"Model run failed. \\n {stdout}\"\n                raise RuntimeError(msg)\n\n            logger.info(stdout)\n\n            # --- Handle the results ---\n            result: Result = Result()\n\n            reader = ResultReader(self.model, tempdir)\n\n            log = reader.read_swap_log()\n            result.log = log\n\n            warnings = reader.identify_warnings(log)\n            result.warning = warnings\n\n            if warnings and not silence_warnings:\n                self.raise_swap_warning(warnings=warnings)\n\n            if \"csv\" in self.model.generalsettings.extensions:\n                output = reader.read_csv_output(which=\"csv\")\n                result.output.update({\"csv\": output})\n\n            if \"csv_tz\" in self.model.generalsettings.extensions:\n                output_tz = reader.read_csv_output(which=\"csv_tz\")\n                result.output.update({\"csv_tz\": output_tz})\n\n            ascii_files = reader.read_ascii_output()\n\n            result.output.update(ascii_files)\n            return result\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelRunner.raise_swap_warning", "title": "<code>raise_swap_warning(warnings)</code>", "text": "<p>Log the warnings form the model run.</p> <p>Parameters:</p> Name Type Description Default <code>warnings</code> <code>list</code> <p>The warnings from the model run parsed with the ResultReaded.</p> required Source code in <code>pyswap/model/model.py</code> <pre><code>def raise_swap_warning(self, warnings: list):\n    \"\"\"Log the warnings form the model run.\n\n    Parameters:\n        warnings (list): The warnings from the model run parsed with the\n            ResultReaded.\n    \"\"\"\n    for message in warnings:\n        logger.warning(message)\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelRunner.run", "title": "<code>run(path, silence_warnings=False)</code>", "text": "<p>Main function that runs the model.</p> <p>First ModelBuilder is used to prepare the environment for the model run. Second, the SWAP executable is run and the decoded result passed from the executable is parsed using the ResultReader and used to update the Result object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>The path to the temporary directory.</p> required <code>silence_warnings</code> <code>bool</code> <p>If True, warnings are not raised.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>Result</code> <code>Result</code> <p>The parsed model results.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def run(self, path: str | Path, silence_warnings: bool = False) -&gt; Result:\n    \"\"\"Main function that runs the model.\n\n    First ModelBuilder is used to prepare the environment for the model run.\n    Second, the SWAP executable is run and the decoded result passed from\n    the executable is parsed using the ResultReader and used to update the\n    Result object.\n\n    Parameters:\n        path (str | Path): The path to the temporary directory.\n        silence_warnings (bool): If True, warnings are not raised.\n\n    Returns:\n        Result: The parsed model results.\n    \"\"\"\n\n    with tempfile.TemporaryDirectory(dir=path) as tempdir:\n        builder = ModelBuilder(self.model, tempdir)\n        builder.copy_executable().write_inputs()\n\n        stdout = self.run_swap(tempdir)\n\n        if \"normal completion\" not in stdout:\n            msg = f\"Model run failed. \\n {stdout}\"\n            raise RuntimeError(msg)\n\n        logger.info(stdout)\n\n        # --- Handle the results ---\n        result: Result = Result()\n\n        reader = ResultReader(self.model, tempdir)\n\n        log = reader.read_swap_log()\n        result.log = log\n\n        warnings = reader.identify_warnings(log)\n        result.warning = warnings\n\n        if warnings and not silence_warnings:\n            self.raise_swap_warning(warnings=warnings)\n\n        if \"csv\" in self.model.generalsettings.extensions:\n            output = reader.read_csv_output(which=\"csv\")\n            result.output.update({\"csv\": output})\n\n        if \"csv_tz\" in self.model.generalsettings.extensions:\n            output_tz = reader.read_csv_output(which=\"csv_tz\")\n            result.output.update({\"csv_tz\": output_tz})\n\n        ascii_files = reader.read_ascii_output()\n\n        result.output.update(ascii_files)\n        return result\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ModelRunner.run_swap", "title": "<code>run_swap(tempdir)</code>  <code>staticmethod</code>", "text": "<p>Run the SWAP executable.</p> <p>Run the exacutable in the tempdirectory and pass the newline to the stdin when the executable asks for input (upon termination).</p> <p>Parameters:</p> Name Type Description Default <code>tempdir</code> <code>Path</code> <p>The temporary directory where the executable is stored.</p> required Source code in <code>pyswap/model/model.py</code> <pre><code>@staticmethod\ndef run_swap(tempdir: Path) -&gt; str:\n    \"\"\"Run the SWAP executable.\n\n    Run the exacutable in the tempdirectory and pass the newline to the\n    stdin when the executable asks for input (upon termination).\n\n    Parameters:\n        tempdir (Path): The temporary directory where the executable\n            is stored.\n    \"\"\"\n    swap_path = Path(tempdir, \"swap.exe\") if IS_WINDOWS else \"./swap420\"\n    p = subprocess.Popen(\n        swap_path,\n        stdout=subprocess.PIPE,\n        stdin=subprocess.PIPE,\n        stderr=subprocess.STDOUT,\n        cwd=tempdir,\n    )\n    stdout = p.communicate(input=b\"\\n\")[0]\n\n    return stdout.decode()\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ResultReader", "title": "<code>ResultReader</code>", "text": "<p>Class responsible for reading the model results.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>The model to read the results from.</p> <code>tempdir</code> <code>str</code> <p>The temporary directory where the results are stored.</p> <p>Methods:</p> Name Description <code>read_csv_output</code> <p>Read the csv output.</p> <code>read_swap_log</code> <p>Read the log files.</p> <code>identify_warnings</code> <p>Catch warnings from the log file.</p> <code>read_ascii_output</code> <p>Read all output files that are not in csv format as strings.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>class ResultReader:\n    \"\"\"Class responsible for reading the model results.\n\n    Attributes:\n        model (Model): The model to read the results from.\n        tempdir (str): The temporary directory where the results are stored.\n\n    Methods:\n        read_csv_output: Read the csv output.\n        read_swap_log: Read the log files.\n        identify_warnings: Catch warnings from the log file.\n        read_ascii_output: Read all output files that are not in csv format\n            as strings.\n    \"\"\"\n\n    def __init__(self, model: Model, tempdir: str):\n        self.model: Model = model\n        self.tempdir = tempdir\n\n    def read_csv_output(self, which: Literal[\"csv\", \"csv_tz\"]) -&gt; DataFrame:\n        \"\"\"Read the csv output.\n\n        There are two types of csv output files: csv and csv_tz. They are both\n        handle in the same method with mode change.\n\n        Parameters:\n            which (str): The type of output file to read.\n\n        Returns:\n            DataFrame: The output file as a DataFrame.\n        \"\"\"\n\n        outfil = self.model.generalsettings.outfil\n        output_suffix = \"_output.csv\" if which == \"csv\" else \"_output_tz.csv\"\n        index_col = \"DATETIME\" if which == \"csv\" else \"DATE\"\n\n        path = Path(self.tempdir, outfil + output_suffix)\n\n        if not path.exists():\n            logger.warning(f\"Expected output file {path} not found.\")\n            return DataFrame()\n\n        df = read_csv(path, comment=\"*\", index_col=index_col)\n        df.index = to_datetime(df.index)\n\n        return df\n\n    def read_swap_log(self) -&gt; str:\n        \"\"\"Read the log files.\n\n        Returns:\n            str: The content of the log file.\n\n        Raises:\n            FileNotFoundError: If no log file is found. There should always be\n                a log file. If not, something went wrong.\n            FileExistsError: If multiple log files are found. Not sure if this\n                is possible or not. If so, it should be handled.\n        \"\"\"\n\n        log_files = [\n            f for f in Path(self.tempdir).glob(\"*.log\") if f.name != \"reruns.log\"\n        ]\n\n        if len(log_files) == 0:\n            msg = \"No .log file found in the directory.\"\n            raise FileNotFoundError(msg)\n\n        elif len(log_files) &gt; 1:\n            msg = \"Multiple .log files found in the directory.\"\n            raise FileExistsError(msg)\n\n        log_file = log_files[0]\n\n        with open(log_file) as file:\n            log_content = file.read()\n\n        return log_content\n\n    @staticmethod\n    def identify_warnings(log: str) -&gt; list:\n        \"\"\"Catch warnings from the log file.\n\n        This is used by the ModelRunner to raise warnings after the model run.\n\n        Parameters:\n            log (str): The log file content.\n\n        Returns:\n            list: A list of warnings.\n        \"\"\"\n        lines = log.split(\"\\n\")\n        warnings = [\n            line for line in lines if line.strip().lower().startswith(\"warning\")\n        ]\n        return warnings\n\n    def read_ascii_output(self):\n        \"\"\"Read all output files that are not csv format as strings.\n\n        This method is perhaps a bit oversimplified. In the future, we might\n        think about introducing parsers for the different output files. For now,\n        we just read them as strings.\n\n        Returns:\n            dict (dict): A dictionary of the output strings with extension as key.\n        \"\"\"\n\n        ascii_extensions = [\n            ext\n            for ext in self.model.generalsettings.extensions\n            if ext not in [\"csv\", \"csv_tz\"]\n        ]\n\n        list_dir = os.listdir(self.tempdir)\n        list_dir = [f for f in list_dir if f.endswith(tuple(ascii_extensions))]\n\n        if list_dir:\n            dict_files = {\n                f.split(\".\")[1]: open_ascii(Path(self.tempdir, f)) for f in list_dir\n            }\n            return dict_files\n        return {}\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ResultReader.identify_warnings", "title": "<code>identify_warnings(log)</code>  <code>staticmethod</code>", "text": "<p>Catch warnings from the log file.</p> <p>This is used by the ModelRunner to raise warnings after the model run.</p> <p>Parameters:</p> Name Type Description Default <code>log</code> <code>str</code> <p>The log file content.</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>list</code> <p>A list of warnings.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>@staticmethod\ndef identify_warnings(log: str) -&gt; list:\n    \"\"\"Catch warnings from the log file.\n\n    This is used by the ModelRunner to raise warnings after the model run.\n\n    Parameters:\n        log (str): The log file content.\n\n    Returns:\n        list: A list of warnings.\n    \"\"\"\n    lines = log.split(\"\\n\")\n    warnings = [\n        line for line in lines if line.strip().lower().startswith(\"warning\")\n    ]\n    return warnings\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ResultReader.read_ascii_output", "title": "<code>read_ascii_output()</code>", "text": "<p>Read all output files that are not csv format as strings.</p> <p>This method is perhaps a bit oversimplified. In the future, we might think about introducing parsers for the different output files. For now, we just read them as strings.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of the output strings with extension as key.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def read_ascii_output(self):\n    \"\"\"Read all output files that are not csv format as strings.\n\n    This method is perhaps a bit oversimplified. In the future, we might\n    think about introducing parsers for the different output files. For now,\n    we just read them as strings.\n\n    Returns:\n        dict (dict): A dictionary of the output strings with extension as key.\n    \"\"\"\n\n    ascii_extensions = [\n        ext\n        for ext in self.model.generalsettings.extensions\n        if ext not in [\"csv\", \"csv_tz\"]\n    ]\n\n    list_dir = os.listdir(self.tempdir)\n    list_dir = [f for f in list_dir if f.endswith(tuple(ascii_extensions))]\n\n    if list_dir:\n        dict_files = {\n            f.split(\".\")[1]: open_ascii(Path(self.tempdir, f)) for f in list_dir\n        }\n        return dict_files\n    return {}\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ResultReader.read_csv_output", "title": "<code>read_csv_output(which)</code>", "text": "<p>Read the csv output.</p> <p>There are two types of csv output files: csv and csv_tz. They are both handle in the same method with mode change.</p> <p>Parameters:</p> Name Type Description Default <code>which</code> <code>str</code> <p>The type of output file to read.</p> required <p>Returns:</p> Name Type Description <code>DataFrame</code> <code>DataFrame</code> <p>The output file as a DataFrame.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def read_csv_output(self, which: Literal[\"csv\", \"csv_tz\"]) -&gt; DataFrame:\n    \"\"\"Read the csv output.\n\n    There are two types of csv output files: csv and csv_tz. They are both\n    handle in the same method with mode change.\n\n    Parameters:\n        which (str): The type of output file to read.\n\n    Returns:\n        DataFrame: The output file as a DataFrame.\n    \"\"\"\n\n    outfil = self.model.generalsettings.outfil\n    output_suffix = \"_output.csv\" if which == \"csv\" else \"_output_tz.csv\"\n    index_col = \"DATETIME\" if which == \"csv\" else \"DATE\"\n\n    path = Path(self.tempdir, outfil + output_suffix)\n\n    if not path.exists():\n        logger.warning(f\"Expected output file {path} not found.\")\n        return DataFrame()\n\n    df = read_csv(path, comment=\"*\", index_col=index_col)\n    df.index = to_datetime(df.index)\n\n    return df\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.ResultReader.read_swap_log", "title": "<code>read_swap_log()</code>", "text": "<p>Read the log files.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The content of the log file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If no log file is found. There should always be a log file. If not, something went wrong.</p> <code>FileExistsError</code> <p>If multiple log files are found. Not sure if this is possible or not. If so, it should be handled.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def read_swap_log(self) -&gt; str:\n    \"\"\"Read the log files.\n\n    Returns:\n        str: The content of the log file.\n\n    Raises:\n        FileNotFoundError: If no log file is found. There should always be\n            a log file. If not, something went wrong.\n        FileExistsError: If multiple log files are found. Not sure if this\n            is possible or not. If so, it should be handled.\n    \"\"\"\n\n    log_files = [\n        f for f in Path(self.tempdir).glob(\"*.log\") if f.name != \"reruns.log\"\n    ]\n\n    if len(log_files) == 0:\n        msg = \"No .log file found in the directory.\"\n        raise FileNotFoundError(msg)\n\n    elif len(log_files) &gt; 1:\n        msg = \"Multiple .log files found in the directory.\"\n        raise FileExistsError(msg)\n\n    log_file = log_files[0]\n\n    with open(log_file) as file:\n        log_content = file.read()\n\n    return log_content\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.model.run_parallel", "title": "<code>run_parallel(mls, path=None, silence_warnings=False, **kwargs)</code>", "text": "<p>Run multiple models in parallel.</p> <p>Parameters:</p> Name Type Description Default <code>mls</code> <code>list[Model]</code> <p>List of models to run.</p> required <code>path</code> <code>Path | str</code> <p>The path to the temporary directory.</p> <code>None</code> <code>silence_warnings</code> <code>bool</code> <p>If True, warnings are not raised.</p> <code>False</code> <code>**kwargs</code> <code>dict</code> <p>Keyword arguments for Pool().</p> <code>{}</code> <p>Returns:</p> Type Description <code>list[Result]</code> <p>list[Result]: List of results from the model runs.</p> Source code in <code>pyswap/model/model.py</code> <pre><code>def run_parallel(\n    mls: list[Model],\n    path: Path | str | None = None,\n    silence_warnings: bool = False,\n    **kwargs,\n) -&gt; list[Result]:\n    \"\"\"Run multiple models in parallel.\n\n    Parameters:\n        mls (list[Model]): List of models to run.\n        path (Path | str): The path to the temporary directory.\n        silence_warnings (bool): If True, warnings are not raised.\n        **kwargs (dict): Keyword arguments for Pool().\n\n    Returns:\n        list[Result]: List of results from the model runs.\n    \"\"\"\n    with Pool(**kwargs) as pool:\n        results = pool.map(\n            _run_model_with_params, [(model, path, silence_warnings) for model in mls]\n        )\n\n    return results\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result", "title": "<code>Result</code>", "text": "<p>               Bases: <code>BaseModel</code></p> <p>Result of a model run.</p> <p>Attributes:</p> Name Type Description <code>log</code> <code>str</code> <p>The log file of the model run.</p> <code>output</code> <code>DataFrame</code> <p>The output file of the model run.</p> <code>warning</code> <code>List[str]</code> <p>The warnings of the model run.</p> Properties <p>ascii (dict): The output in ASCII format. csv (DataFrame): The output in CSV format. csv_tz (DataFrame): The output in CSV format with depth. iteration_stats (str): Return the part the iteration statistics from     the log. blc_summary (str): The .blc file if it exists. yearly_summary (DataFrame): Yearly sums of all output variables. Will     return an error if csv was not included in the output file formats.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>class Result(BaseModel):\n    \"\"\"Result of a model run.\n\n    Attributes:\n        log (str): The log file of the model run.\n        output (DataFrame): The output file of the model run.\n        warning (List[str]): The warnings of the model run.\n\n    Properties:\n        ascii (dict): The output in ASCII format.\n        csv (DataFrame): The output in CSV format.\n        csv_tz (DataFrame): The output in CSV format with depth.\n        iteration_stats (str): Return the part the iteration statistics from\n            the log.\n        blc_summary (str): The .blc file if it exists.\n        yearly_summary (DataFrame): Yearly sums of all output variables. Will\n            return an error if csv was not included in the output file formats.\n    \"\"\"\n\n    log: str | None = Field(default=None, repr=False)\n    output: dict | None = Field(default_factory=dict, repr=False)\n    warning: list[str] | None = Field(default=None, repr=False)\n\n    model_config = ConfigDict(\n        arbitrary_types_allowed=True, validate_assignment=True, extra=\"forbid\"\n    )\n\n    @computed_field(return_type=dict, repr=False)\n    def ascii(self) -&gt; dict:\n        \"\"\"Return all outputs in ASCII format.\"\"\"\n        return {k: v for k, v in self.output.items() if not k.endswith(\"csv\")}\n\n    @computed_field(return_type=DataFrame, repr=False)\n    def csv(self) -&gt; DataFrame:\n        \"\"\"Return the output in CSV format.\"\"\"\n        return self.output.get(\"csv\", None)\n\n    @computed_field(return_type=DataFrame, repr=False)\n    def csv_tz(self) -&gt; DataFrame:\n        \"\"\"Return the output in CSV format with depth.\"\"\"\n        return self.output.get(\"csv_tz\", None)\n\n    @computed_field(return_type=str, repr=False)\n    def iteration_stats(self) -&gt; str:\n        \"\"\"Print the part the iteration statistics from the log.\"\"\"\n        match = re.search(r\".*(Iteration statistics\\s*.*)$\", self.log, re.DOTALL)\n        if match:\n            return match.group(1)\n        return \"\"\n\n    @computed_field(return_type=str, repr=False)\n    def blc_summary(self) -&gt; str:\n        \"\"\"Print the .blc file if it exists.\"\"\"\n        print(self.output.get(\"blc\", None))\n        return\n\n    @computed_field(return_type=DataFrame, repr=False)\n    def yearly_summary(self) -&gt; DataFrame:\n        \"\"\"Return yearly sums of all output variables.\"\"\"\n        if not isinstance(self.csv, DataFrame):\n            msg = \"CSV file not included in output file formats.\"\n            raise TypeError(msg)\n        return self.csv.resample(\"YE\").sum()\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.ascii", "title": "<code>ascii()</code>", "text": "<p>Return all outputs in ASCII format.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=dict, repr=False)\ndef ascii(self) -&gt; dict:\n    \"\"\"Return all outputs in ASCII format.\"\"\"\n    return {k: v for k, v in self.output.items() if not k.endswith(\"csv\")}\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.blc_summary", "title": "<code>blc_summary()</code>", "text": "<p>Print the .blc file if it exists.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=str, repr=False)\ndef blc_summary(self) -&gt; str:\n    \"\"\"Print the .blc file if it exists.\"\"\"\n    print(self.output.get(\"blc\", None))\n    return\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.csv", "title": "<code>csv()</code>", "text": "<p>Return the output in CSV format.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=DataFrame, repr=False)\ndef csv(self) -&gt; DataFrame:\n    \"\"\"Return the output in CSV format.\"\"\"\n    return self.output.get(\"csv\", None)\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.csv_tz", "title": "<code>csv_tz()</code>", "text": "<p>Return the output in CSV format with depth.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=DataFrame, repr=False)\ndef csv_tz(self) -&gt; DataFrame:\n    \"\"\"Return the output in CSV format with depth.\"\"\"\n    return self.output.get(\"csv_tz\", None)\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.iteration_stats", "title": "<code>iteration_stats()</code>", "text": "<p>Print the part the iteration statistics from the log.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=str, repr=False)\ndef iteration_stats(self) -&gt; str:\n    \"\"\"Print the part the iteration statistics from the log.\"\"\"\n    match = re.search(r\".*(Iteration statistics\\s*.*)$\", self.log, re.DOTALL)\n    if match:\n        return match.group(1)\n    return \"\"\n</code></pre>"}, {"location": "reference/pyswap-model/#pyswap.model.result.Result.yearly_summary", "title": "<code>yearly_summary()</code>", "text": "<p>Return yearly sums of all output variables.</p> Source code in <code>pyswap/model/result.py</code> <pre><code>@computed_field(return_type=DataFrame, repr=False)\ndef yearly_summary(self) -&gt; DataFrame:\n    \"\"\"Return yearly sums of all output variables.\"\"\"\n    if not isinstance(self.csv, DataFrame):\n        msg = \"CSV file not included in output file formats.\"\n        raise TypeError(msg)\n    return self.csv.resample(\"YE\").sum()\n</code></pre>"}, {"location": "reference/visualization/", "title": "Visualization", "text": "<p>plotting functionality explained</p>"}, {"location": "tutorials/", "title": "Working examples", "text": "<p>Here you can find jupyter notebooks explaining in more detail the most important elements of the package.</p> <ol> <li>Hupselbrook model setup - complete setup of the Hupselbrook testcase example provided with the SWAP model software.</li> <li>Basic usage - load a testcase and interact with the <code>Model</code> and <code>Result</code> objects.</li> <li>Using HDF5 database - save to and load models from an HDF5 database.</li> <li>WOFOST crop database - get the crop parameters from the WOFOST crop database.</li> <li>Load classic SWAP model - read a classic swap model setup into pySWAP classes.</li> </ol>"}, {"location": "tutorials/000-setting-up-hupselbrook/", "title": "Hupselbrook Model Setup", "text": "In\u00a0[1]: Copied! <pre>from datetime import datetime as dt\n\nimport pyswap as psp\n</pre> from datetime import datetime as dt  import pyswap as psp In\u00a0[2]: Copied! <pre># starting with an empty model instance\nml = psp.Model()\n\n\nmeta = psp.components.Metadata(\n    author=\"John Doe\",\n    institution=\"University of Somewhere\",\n    email=\"john.doe@somewhere.com\",\n    project=\"pySWAP test - hupselbrook\",\n    swap_ver=\"4.2\",\n)\n\nsimset = psp.components.simsettings.GeneralSettings(\n    tstart=\"2002-01-01\",\n    tend=\"2004-12-31\",\n    extensions=[\"vap\", \"blc\", \"sba\", \"inc\", \"csv\"],\n    nprintday=1,\n    swerror=1,\n    swscre=0,\n    swmonth=1,\n    swyrvar=0,\n    datefix=\"31 12\",\n    inlist_csv=[\n        \"rain\",\n        \"irrig\",\n        \"interc\",\n        \"runoff\",\n        \"drainage\",\n        \"dstor\",\n        \"epot\",\n        \"eact\",\n        \"tpot\",\n        \"tact\",\n        \"qbottom\",\n        \"gwl\",\n    ],\n)\n\n# attaching model components to the model instance\nml.metadata = meta\nml.generalsettings = simset\n</pre> # starting with an empty model instance ml = psp.Model()   meta = psp.components.Metadata(     author=\"John Doe\",     institution=\"University of Somewhere\",     email=\"john.doe@somewhere.com\",     project=\"pySWAP test - hupselbrook\",     swap_ver=\"4.2\", )  simset = psp.components.simsettings.GeneralSettings(     tstart=\"2002-01-01\",     tend=\"2004-12-31\",     extensions=[\"vap\", \"blc\", \"sba\", \"inc\", \"csv\"],     nprintday=1,     swerror=1,     swscre=0,     swmonth=1,     swyrvar=0,     datefix=\"31 12\",     inlist_csv=[         \"rain\",         \"irrig\",         \"interc\",         \"runoff\",         \"drainage\",         \"dstor\",         \"epot\",         \"eact\",         \"tpot\",         \"tact\",         \"qbottom\",         \"gwl\",     ], )  # attaching model components to the model instance ml.metadata = meta ml.generalsettings = simset <p>Note</p> <p>         At this stage there is one important difference to explain; you do not need to (and actually cannot) adjust the paths at the beginning. This is because pySWAP runs SWAP in a temporary directory and handles paths automatically. The same goes for file names; the default and frozen file names are \"swap\" for inputs (e.g., drainage file) and \"result\" for output.    </p> <p>After adding the two sections, you can view how the section would look like as a SWAP-compatible string, or see the current shape of the .swp file by calling <code>ml.swp</code> property. You may notice more parameters that you wanted to set. It's because by default, heat flow (<code>HeatFlow</code>), solute transport (<code>SoluteTransport</code>) and fixed irrigation (<code>FixedIrrigation</code>) modules are turned off in the model. There are also default settings for some parameters of Richard's equation (<code>RichardsSettings</code>). To change it, it's enough to define your own objects with desired settings and reassign them in the <code>ml</code> instance.</p> In\u00a0[3]: Copied! <pre>print(ml.swp)\n</pre> print(ml.swp) <pre>PROJECT = 'pySWAP test - hupselbrook'\nSWWBA = 0\nSWEND = 0\nSWVAP = 1\nSWBAL = 0\nSWBLC = 1\nSWSBA = 1\nSWATE = 0\nSWBMA = 0\nSWDRF = 0\nSWSWB = 0\nSWINI = 0\nSWINC = 1\nSWCRP = 0\nSWSTR = 0\nSWIRG = 0\nSWCSV = 1\nSWCSV_TZ = 0\nPATHWORK = './'\nPATHATM = './'\nPATHCROP = './'\nPATHDRAIN = './'\nSWSCRE = 0\nSWERROR = 1\nTSTART = 2002-01-01\nTEND = 2004-12-31\nNPRINTDAY = 1\nSWMONTH = 1\nSWYRVAR = 0\nDATEFIX = 31 12\nOUTFIL = 'result'\nSWHEADER = 0\nINLIST_CSV = 'rain,irrig,interc,runoff,drainage,dstor,epot,eact,tpot,tact,qbottom,gwl'\nSWAFO = 0\nSWAUN = 0\nSWDISCRVERT = 0\nSWIRFIX = 0\nIRGFIL = 'swap'\nSWSNOW = 0\nSWFROST = 0\nSWKMEAN = 1\nSWKIMPL = 0\nDTMIN = 1e-06\nDTMAX = 0.04\nGWLCONV = 100.0\nCRITDEVH1CP = 0.01\nCRITDEVH2CP = 0.1\nCRITDEVPONDDT = 0.0001\nMAXIT = 30\nMAXBACKTR = 3\nSWHEA = 0\nSWSOLU = 0\n</pre> In\u00a0[4]: Copied! <pre># here we additionally need to load the meteo data from testcase library\nfrom pyswap import testcase\n\nmeteo_data = psp.components.meteorology.metfile_from_csv(\n    metfil=\"283.met\", csv_path=testcase.get_path(\"hupselbrook\", \"met\")\n)\n\nmeteo = psp.components.meteorology.Meteorology(\n    lat=52.0,\n    alt=21.0,\n    swetr=0,\n    metfile=meteo_data,\n    swdivide=1,\n    swmetdetail=0,\n    altw=10.0,\n    angstroma=0.25,\n    angstromb=0.5,\n)\n\nml.meteorology = meteo\n</pre> # here we additionally need to load the meteo data from testcase library from pyswap import testcase  meteo_data = psp.components.meteorology.metfile_from_csv(     metfil=\"283.met\", csv_path=testcase.get_path(\"hupselbrook\", \"met\") )  meteo = psp.components.meteorology.Meteorology(     lat=52.0,     alt=21.0,     swetr=0,     metfile=meteo_data,     swdivide=1,     swmetdetail=0,     altw=10.0,     angstroma=0.25,     angstromb=0.5, )  ml.meteorology = meteo In\u00a0[5]: Copied! <pre>maize_prep = psp.components.crop.Preparation(\n    swprep=0, swsow=0, swgerm=0, dvsend=3.0, swharv=0\n)\n\nscheduled_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)\n\nDVS = [0.0, 0.3, 0.5, 0.7, 1.0, 1.4, 2.0]\n\n# This is one way to create and validate tables in pySWAP.\nmaize_gctb = psp.components.crop.GCTB.create({\n    \"DVS\": DVS,\n    \"LAI\": [0.05, 0.14, 0.61, 4.10, 5.00, 5.80, 5.20],\n})\n\nmaize_cftb = psp.components.crop.CFTB.create({\n    \"DVS\": DVS,\n    \"CH\": [1.0, 15.0, 40.0, 140.0, 170.0, 180.0, 175.0],\n})\n\nmaize_rdtb = psp.components.crop.RDTB.create({\n    \"DVS\": [0.0, 0.3, 0.5, 0.7, 1.0, 2.0],\n    \"RD\": [5.0, 20.0, 50.0, 80.0, 90.0, 100.0],\n})\n\nmaize_rdctb = psp.components.crop.RDCTB.create({\n    \"RRD\": [0.0, 1.0],\n    \"RDENS\": [1.0, 0.0],\n})\n\nmaize_cropdev_settings = psp.components.crop.CropDevelopmentSettingsFixed(\n    idev=1,\n    lcc=168,\n    kdif=0.6,\n    kdir=0.75,\n    swgc=1,\n    gctb=maize_gctb,\n    swcf=2,\n    cftb=maize_cftb,\n    albedo=0.23,\n    rsc=61.0,\n    rsw=0.0,\n    swrd=1,\n    rdtb=maize_rdtb,\n    rdctb=maize_rdctb,\n)\n\nmaize_ox_stress = psp.components.crop.OxygenStress(\n    swoxygen=1,\n    swwrtnonox=0,\n    aeratecrit=0.5,\n    hlim1=-15.0,\n    hlim2u=-30.0,\n    hlim2l=-30.0,\n)\n\nmaize_dr_stress = psp.components.crop.DroughtStress(\n    swdrought=1,\n    hlim3h=-325.0,\n    hlim3l=-600.0,\n    hlim4=-8000.0,\n    adcrh=0.5,\n    adcrl=0.1,\n)\n\n# shared with the fixed crop settings\n\nmaize_interception = psp.components.crop.Interception(swinter=1, cofab=0.25)\n\ncrpmaize = psp.components.crop.CropFile(\n    name=\"maizes\",\n    prep=maize_prep,\n    scheduledirrigation=scheduled_irrigation,\n    cropdev_settings=maize_cropdev_settings,\n    oxygenstress=maize_ox_stress,\n    droughtstress=maize_dr_stress,\n    interception=maize_interception,\n)\n</pre> maize_prep = psp.components.crop.Preparation(     swprep=0, swsow=0, swgerm=0, dvsend=3.0, swharv=0 )  scheduled_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)  DVS = [0.0, 0.3, 0.5, 0.7, 1.0, 1.4, 2.0]  # This is one way to create and validate tables in pySWAP. maize_gctb = psp.components.crop.GCTB.create({     \"DVS\": DVS,     \"LAI\": [0.05, 0.14, 0.61, 4.10, 5.00, 5.80, 5.20], })  maize_cftb = psp.components.crop.CFTB.create({     \"DVS\": DVS,     \"CH\": [1.0, 15.0, 40.0, 140.0, 170.0, 180.0, 175.0], })  maize_rdtb = psp.components.crop.RDTB.create({     \"DVS\": [0.0, 0.3, 0.5, 0.7, 1.0, 2.0],     \"RD\": [5.0, 20.0, 50.0, 80.0, 90.0, 100.0], })  maize_rdctb = psp.components.crop.RDCTB.create({     \"RRD\": [0.0, 1.0],     \"RDENS\": [1.0, 0.0], })  maize_cropdev_settings = psp.components.crop.CropDevelopmentSettingsFixed(     idev=1,     lcc=168,     kdif=0.6,     kdir=0.75,     swgc=1,     gctb=maize_gctb,     swcf=2,     cftb=maize_cftb,     albedo=0.23,     rsc=61.0,     rsw=0.0,     swrd=1,     rdtb=maize_rdtb,     rdctb=maize_rdctb, )  maize_ox_stress = psp.components.crop.OxygenStress(     swoxygen=1,     swwrtnonox=0,     aeratecrit=0.5,     hlim1=-15.0,     hlim2u=-30.0,     hlim2l=-30.0, )  maize_dr_stress = psp.components.crop.DroughtStress(     swdrought=1,     hlim3h=-325.0,     hlim3l=-600.0,     hlim4=-8000.0,     adcrh=0.5,     adcrl=0.1, )  # shared with the fixed crop settings  maize_interception = psp.components.crop.Interception(swinter=1, cofab=0.25)  crpmaize = psp.components.crop.CropFile(     name=\"maizes\",     prep=maize_prep,     scheduledirrigation=scheduled_irrigation,     cropdev_settings=maize_cropdev_settings,     oxygenstress=maize_ox_stress,     droughtstress=maize_dr_stress,     interception=maize_interception, ) In\u00a0[6]: Copied! <pre>from pyswap import db\n\n# Load the crop database\ndb = db.WOFOSTCropDB()\npotato = db.load_crop_file(\"potato\")\npotato_params = potato.get_variety(\"Potato_701\")\n</pre> from pyswap import db  # Load the crop database db = db.WOFOSTCropDB() potato = db.load_crop_file(\"potato\") potato_params = potato.get_variety(\"Potato_701\") <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[6], line 5\n      3 # Load the crop database\n      4 db = db.WOFOSTCropDB()\n----&gt; 5 potato = db.load_crop_file(\"potato\")\n      6 potato_params = potato.get_variety(\"Potato_701\")\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:152, in WOFOSTCropDB.load_crop_file(self, crop)\n    146 \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    147 path = (\n    148     self.libdir / f\"{crop}\"\n    149     if crop.endswith(\".yaml\")\n    150     else self.libdir / f\"{crop}.yaml\"\n    151 )\n--&gt; 152 return WOFOSTCropFile(yaml_content=load_yaml(path))\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/potato.yaml'</pre> In\u00a0[7]: Copied! <pre>potato_prep = psp.components.crop.Preparation(\n    swprep=0,\n    swsow=0,\n    swgerm=2,\n    tsumemeopt=170.0,\n    tbasem=3.0,\n    teffmx=18.0,\n    hdrygerm=-500.0,\n    hwetgerm=-100.0,\n    zgerm=-10.0,\n    agerm=203.0,\n    dvsend=2.0,\n    swharv=0,\n)\n\npotato_chtb = psp.components.crop.CFTB.create({\n    \"DVS\": [0.0, 1.0, 2.0],\n    \"CH\": [\n        1.0,\n        40.0,\n        50.0,\n    ],\n})\n\npotato_rdctb = psp.components.crop.RDCTB.create({\n    \"RRD\": [0.0, 1.0],\n    \"RDENS\": [1.0, 0.0],\n})\n\n\npotato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n    wofost_variety=potato_params,\n    swcf=2,\n    cftb=potato_chtb,\n    albedo=0.19,\n    laiem=0.0589,\n    ssa=0.0,\n    kdif=1.0,\n    rsc=207.0,\n    rsw=0.0,\n    kdir=0.75,\n    eff=0.45,\n    swrd=2,\n    rdc=50.0,\n    swdmi2rd=1,\n    rdctb=potato_rdctb,\n)\n\npotato_cropdev_settings.update_from_wofost()\n\npotato_ox_stress = psp.components.crop.OxygenStress(\n    swoxygen=1,\n    swwrtnonox=1,\n    aeratecrit=0.5,\n    hlim1=-10.0,\n    hlim2u=-25.0,\n    hlim2l=-25.0,\n    swrootradius=2,\n    root_radiuso2=0.00015,\n)\n\npotato_dr_stress = psp.components.crop.DroughtStress(\n    swdrought=1,\n    hlim3h=-300.0,\n    hlim3l=-500.0,\n    hlim4=-10000.0,\n    adcrh=0.5,\n    adcrl=0.1,\n)\n\ncrppotato = psp.components.crop.CropFile(\n    name=\"potatod\",\n    prep=potato_prep,\n    cropdev_settings=potato_cropdev_settings,\n    oxygenstress=potato_ox_stress,\n    droughtstress=potato_dr_stress,\n    # shared with the fixed crop settings\n    interception=maize_interception,\n    scheduledirrigation=scheduled_irrigation,\n)\n</pre> potato_prep = psp.components.crop.Preparation(     swprep=0,     swsow=0,     swgerm=2,     tsumemeopt=170.0,     tbasem=3.0,     teffmx=18.0,     hdrygerm=-500.0,     hwetgerm=-100.0,     zgerm=-10.0,     agerm=203.0,     dvsend=2.0,     swharv=0, )  potato_chtb = psp.components.crop.CFTB.create({     \"DVS\": [0.0, 1.0, 2.0],     \"CH\": [         1.0,         40.0,         50.0,     ], })  potato_rdctb = psp.components.crop.RDCTB.create({     \"RRD\": [0.0, 1.0],     \"RDENS\": [1.0, 0.0], })   potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(     wofost_variety=potato_params,     swcf=2,     cftb=potato_chtb,     albedo=0.19,     laiem=0.0589,     ssa=0.0,     kdif=1.0,     rsc=207.0,     rsw=0.0,     kdir=0.75,     eff=0.45,     swrd=2,     rdc=50.0,     swdmi2rd=1,     rdctb=potato_rdctb, )  potato_cropdev_settings.update_from_wofost()  potato_ox_stress = psp.components.crop.OxygenStress(     swoxygen=1,     swwrtnonox=1,     aeratecrit=0.5,     hlim1=-10.0,     hlim2u=-25.0,     hlim2l=-25.0,     swrootradius=2,     root_radiuso2=0.00015, )  potato_dr_stress = psp.components.crop.DroughtStress(     swdrought=1,     hlim3h=-300.0,     hlim3l=-500.0,     hlim4=-10000.0,     adcrh=0.5,     adcrl=0.1, )  crppotato = psp.components.crop.CropFile(     name=\"potatod\",     prep=potato_prep,     cropdev_settings=potato_cropdev_settings,     oxygenstress=potato_ox_stress,     droughtstress=potato_dr_stress,     # shared with the fixed crop settings     interception=maize_interception,     scheduledirrigation=scheduled_irrigation, ) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 32\n     16 potato_chtb = psp.components.crop.CFTB.create({\n     17     \"DVS\": [0.0, 1.0, 2.0],\n     18     \"CH\": [\n   (...)\n     22     ],\n     23 })\n     25 potato_rdctb = psp.components.crop.RDCTB.create({\n     26     \"RRD\": [0.0, 1.0],\n     27     \"RDENS\": [1.0, 0.0],\n     28 })\n     31 potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n---&gt; 32     wofost_variety=potato_params,\n     33     swcf=2,\n     34     cftb=potato_chtb,\n     35     albedo=0.19,\n     36     laiem=0.0589,\n     37     ssa=0.0,\n     38     kdif=1.0,\n     39     rsc=207.0,\n     40     rsw=0.0,\n     41     kdir=0.75,\n     42     eff=0.45,\n     43     swrd=2,\n     44     rdc=50.0,\n     45     swdmi2rd=1,\n     46     rdctb=potato_rdctb,\n     47 )\n     49 potato_cropdev_settings.update_from_wofost()\n     51 potato_ox_stress = psp.components.crop.OxygenStress(\n     52     swoxygen=1,\n     53     swwrtnonox=1,\n   (...)\n     59     root_radiuso2=0.00015,\n     60 )\n\nNameError: name 'potato_params' is not defined</pre> In\u00a0[8]: Copied! <pre>grass_chtb = psp.components.crop.CFTB.create({\n    \"DNR\": [0.0, 180.0, 366.0],\n    \"CH\": [12.0, 12.0, 12.0],\n})\n\ngrass_slatb = psp.components.crop.SLATB.create({\n    \"DNR\": [1.00, 80.00, 300.00, 366.00],\n    \"SLA\": [0.0015, 0.0015, 0.0020, 0.0020],\n})\n\namaxtb = psp.components.crop.AMAXTB.create({\n    \"DNR\": [1.00, 95.00, 200.00, 275.00, 366.00],\n    \"AMAX\": [40.00, 40.00, 35.00, 25.00, 25.00],\n})\n\ngrass_tmpftb = psp.components.crop.TMPFTB.create({\n    \"TAVD\": [0.00, 5.00, 15.00, 25.00, 40.00],\n    \"TMPF\": [0.00, 0.70, 1.00, 1.00, 0.00],\n})\ngrass_tmnftb = psp.components.crop.TMNFTB.create({\n    \"TMNR\": [0.0, 4.0],\n    \"TMNF\": [0.0, 1.0],\n})\n\ngrass_rfsetb = psp.components.crop.RFSETB.create({\n    \"DNR\": [1.00, 366.00],\n    \"RFSE\": [1.0000, 1.0000],\n})\n\ngrass_frtb = psp.components.crop.FRTB.create({\n    \"DNR\": [1.00, 366.00],\n    \"FR\": [0.3000, 0.3000],\n})\n\ngrass_fltb = psp.components.crop.FLTB.create({\n    \"DNR\": [1.00, 366.00],\n    \"FL\": [0.6000, 0.6000],\n})\n\ngrass_fstb = psp.components.crop.FSTB.create({\n    \"DNR\": [1.00, 366.00],\n    \"FS\": [0.4000, 0.4000],\n})\n\ngrass_rdrrtb = psp.components.crop.RDRRTB.create({\n    \"DNR\": [1.0, 180.0, 366.0],\n    \"RDRR\": [0.0, 0.02, 0.02],\n})\n\ngrass_rdrstb = psp.components.crop.RDRSTB.create({\n    \"DNR\": [1.0, 180.0, 366.0],\n    \"RDRS\": [0.0, 0.02, 0.02],\n})\n\ngrass_rlwtb = psp.components.crop.RLWTB.create({\n    \"RW\": [300.00, 2500.00],\n    \"RL\": [20.0, 40.0],\n})\n\ngrass_rdctb = psp.components.crop.RDCTB.create({\n    \"RRD\": [0.0, 1.0],\n    \"RDENS\": [1.0, 0.0],\n})\n\ngrass_settings = psp.components.crop.CropDevelopmentSettingsGrass(\n    swcf=2,\n    cftb=grass_chtb,\n    albedo=0.23,\n    rsc=100.0,\n    rsw=0.0,\n    tdwi=1000.00,\n    laiem=0.63000,\n    rgrlai=0.00700,\n    swtsum=1,\n    ssa=0.0004,\n    span=30.00,\n    tbase=0.00,\n    slatb=grass_slatb,\n    kdif=0.60,\n    kdir=0.75,\n    eff=0.50,\n    amaxtb=amaxtb,\n    tmpftb=grass_tmpftb,\n    tmnftb=grass_tmnftb,\n    cvl=0.6850,\n    cvr=0.6940,\n    cvs=0.6620,\n    q10=2.0000,\n    rml=0.0300,\n    rmr=0.0150,\n    rms=0.0150,\n    rfsetb=grass_rfsetb,\n    frtb=grass_frtb,\n    fltb=grass_fltb,\n    fstb=grass_fstb,\n    perdl=0.050,\n    rdrrtb=grass_rdrrtb,\n    rdrstb=grass_rdrstb,\n    swrd=3,\n    swdmi2rd=1,\n    rlwtb=grass_rlwtb,\n    wrtmax=3000.0,\n    swrdc=0,\n    rdctb=grass_rdctb,\n)\n\ngrass_ox_stress = psp.components.crop.OxygenStress(\n    swoxygen=1, hlim1=0.0, hlim2u=1.0, hlim2l=-1.0, swwrtnonox=0\n)\n\ngrass_drought_stress = psp.components.crop.DroughtStress(\n    swdrought=1,\n    swjarvis=4,\n    alphcrit=0.7,\n    hlim3h=-200.0,\n    hlim3l=-800.0,\n    hlim4=-8000.0,\n    adcrh=0.5,\n    adcrl=0.1,\n)\n\ngrass_salt_stress = psp.components.crop.SaltStress(swsalinity=0)\n\ngrass_interception = psp.components.crop.Interception(swinter=1, cofab=0.25)\n\ngrass_co2 = psp.components.crop.CO2Correction(swco2=0)\n\ngrass_dmmowtb = psp.components.crop.DMMOWTB.create({\n    \"DNR\": [120.0, 152.0, 182.0, 213.0, 366.0],\n    \"DMMOW\": [4700.0, 3700.0, 3200.0, 2700.0, 2700.0],\n})\n\ngrass_dmmowdelay = psp.components.crop.DMMOWDELAY.create({\n    \"DMMOWDELAY\": [0.0, 2000.0, 4000.0],\n    \"DAYDELAY\": [2, 3, 4],\n})\n\ngrass_management = psp.components.crop.GrasslandManagement(\n    seqgrazmow=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n    swharvest=1,\n    swdmmow=2,\n    dmmowtb=grass_dmmowtb,\n    maxdaymow=42,\n    swlossmow=0,\n    mowrest=700.0,\n    dmmowdelay=grass_dmmowdelay,\n    swpotrelmf=1,\n    relmf=0.90,\n)\n\ngrass_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)\n\ncrpgrass = psp.components.crop.CropFile(\n    name=\"grassd\",\n    cropdev_settings=grass_settings,\n    oxygenstress=grass_ox_stress,\n    droughtstress=grass_drought_stress,\n    saltstress=grass_salt_stress,\n    interception=grass_interception,\n    co2correction=grass_co2,\n    grasslandmanagement=grass_management,\n    scheduledirrigation=grass_irrigation,\n)\n</pre> grass_chtb = psp.components.crop.CFTB.create({     \"DNR\": [0.0, 180.0, 366.0],     \"CH\": [12.0, 12.0, 12.0], })  grass_slatb = psp.components.crop.SLATB.create({     \"DNR\": [1.00, 80.00, 300.00, 366.00],     \"SLA\": [0.0015, 0.0015, 0.0020, 0.0020], })  amaxtb = psp.components.crop.AMAXTB.create({     \"DNR\": [1.00, 95.00, 200.00, 275.00, 366.00],     \"AMAX\": [40.00, 40.00, 35.00, 25.00, 25.00], })  grass_tmpftb = psp.components.crop.TMPFTB.create({     \"TAVD\": [0.00, 5.00, 15.00, 25.00, 40.00],     \"TMPF\": [0.00, 0.70, 1.00, 1.00, 0.00], }) grass_tmnftb = psp.components.crop.TMNFTB.create({     \"TMNR\": [0.0, 4.0],     \"TMNF\": [0.0, 1.0], })  grass_rfsetb = psp.components.crop.RFSETB.create({     \"DNR\": [1.00, 366.00],     \"RFSE\": [1.0000, 1.0000], })  grass_frtb = psp.components.crop.FRTB.create({     \"DNR\": [1.00, 366.00],     \"FR\": [0.3000, 0.3000], })  grass_fltb = psp.components.crop.FLTB.create({     \"DNR\": [1.00, 366.00],     \"FL\": [0.6000, 0.6000], })  grass_fstb = psp.components.crop.FSTB.create({     \"DNR\": [1.00, 366.00],     \"FS\": [0.4000, 0.4000], })  grass_rdrrtb = psp.components.crop.RDRRTB.create({     \"DNR\": [1.0, 180.0, 366.0],     \"RDRR\": [0.0, 0.02, 0.02], })  grass_rdrstb = psp.components.crop.RDRSTB.create({     \"DNR\": [1.0, 180.0, 366.0],     \"RDRS\": [0.0, 0.02, 0.02], })  grass_rlwtb = psp.components.crop.RLWTB.create({     \"RW\": [300.00, 2500.00],     \"RL\": [20.0, 40.0], })  grass_rdctb = psp.components.crop.RDCTB.create({     \"RRD\": [0.0, 1.0],     \"RDENS\": [1.0, 0.0], })  grass_settings = psp.components.crop.CropDevelopmentSettingsGrass(     swcf=2,     cftb=grass_chtb,     albedo=0.23,     rsc=100.0,     rsw=0.0,     tdwi=1000.00,     laiem=0.63000,     rgrlai=0.00700,     swtsum=1,     ssa=0.0004,     span=30.00,     tbase=0.00,     slatb=grass_slatb,     kdif=0.60,     kdir=0.75,     eff=0.50,     amaxtb=amaxtb,     tmpftb=grass_tmpftb,     tmnftb=grass_tmnftb,     cvl=0.6850,     cvr=0.6940,     cvs=0.6620,     q10=2.0000,     rml=0.0300,     rmr=0.0150,     rms=0.0150,     rfsetb=grass_rfsetb,     frtb=grass_frtb,     fltb=grass_fltb,     fstb=grass_fstb,     perdl=0.050,     rdrrtb=grass_rdrrtb,     rdrstb=grass_rdrstb,     swrd=3,     swdmi2rd=1,     rlwtb=grass_rlwtb,     wrtmax=3000.0,     swrdc=0,     rdctb=grass_rdctb, )  grass_ox_stress = psp.components.crop.OxygenStress(     swoxygen=1, hlim1=0.0, hlim2u=1.0, hlim2l=-1.0, swwrtnonox=0 )  grass_drought_stress = psp.components.crop.DroughtStress(     swdrought=1,     swjarvis=4,     alphcrit=0.7,     hlim3h=-200.0,     hlim3l=-800.0,     hlim4=-8000.0,     adcrh=0.5,     adcrl=0.1, )  grass_salt_stress = psp.components.crop.SaltStress(swsalinity=0)  grass_interception = psp.components.crop.Interception(swinter=1, cofab=0.25)  grass_co2 = psp.components.crop.CO2Correction(swco2=0)  grass_dmmowtb = psp.components.crop.DMMOWTB.create({     \"DNR\": [120.0, 152.0, 182.0, 213.0, 366.0],     \"DMMOW\": [4700.0, 3700.0, 3200.0, 2700.0, 2700.0], })  grass_dmmowdelay = psp.components.crop.DMMOWDELAY.create({     \"DMMOWDELAY\": [0.0, 2000.0, 4000.0],     \"DAYDELAY\": [2, 3, 4], })  grass_management = psp.components.crop.GrasslandManagement(     seqgrazmow=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],     swharvest=1,     swdmmow=2,     dmmowtb=grass_dmmowtb,     maxdaymow=42,     swlossmow=0,     mowrest=700.0,     dmmowdelay=grass_dmmowdelay,     swpotrelmf=1,     relmf=0.90, )  grass_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)  crpgrass = psp.components.crop.CropFile(     name=\"grassd\",     cropdev_settings=grass_settings,     oxygenstress=grass_ox_stress,     droughtstress=grass_drought_stress,     saltstress=grass_salt_stress,     interception=grass_interception,     co2correction=grass_co2,     grasslandmanagement=grass_management,     scheduledirrigation=grass_irrigation, ) In\u00a0[9]: Copied! <pre>croprotation = psp.components.crop.CROPROTATION.create({\n    \"CROPSTART\": [dt(2002, 5, 1), dt(2003, 5, 10), dt(2004, 1, 1)],\n    \"CROPEND\": [dt(2002, 10, 15), dt(2003, 9, 29), dt(2004, 12, 31)],\n    \"CROPFIL\": [\"'maizes'\", \"'potatod'\", \"'grassd'\"],\n    \"CROPTYPE\": [1, 2, 3],\n})\n\ncrop = psp.components.crop.Crop(\n    swcrop=1,\n    rds=200.0,\n    croprotation=croprotation,\n    cropfiles={\"maizes\": crpmaize, \"potatod\": crppotato, \"grassd\": crpgrass},\n)\n\nml.crop = crop\n</pre> croprotation = psp.components.crop.CROPROTATION.create({     \"CROPSTART\": [dt(2002, 5, 1), dt(2003, 5, 10), dt(2004, 1, 1)],     \"CROPEND\": [dt(2002, 10, 15), dt(2003, 9, 29), dt(2004, 12, 31)],     \"CROPFIL\": [\"'maizes'\", \"'potatod'\", \"'grassd'\"],     \"CROPTYPE\": [1, 2, 3], })  crop = psp.components.crop.Crop(     swcrop=1,     rds=200.0,     croprotation=croprotation,     cropfiles={\"maizes\": crpmaize, \"potatod\": crppotato, \"grassd\": crpgrass}, )  ml.crop = crop <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 12\n      1 croprotation = psp.components.crop.CROPROTATION.create({\n      2     \"CROPSTART\": [dt(2002, 5, 1), dt(2003, 5, 10), dt(2004, 1, 1)],\n      3     \"CROPEND\": [dt(2002, 10, 15), dt(2003, 9, 29), dt(2004, 12, 31)],\n      4     \"CROPFIL\": [\"'maizes'\", \"'potatod'\", \"'grassd'\"],\n      5     \"CROPTYPE\": [1, 2, 3],\n      6 })\n      8 crop = psp.components.crop.Crop(\n      9     swcrop=1,\n     10     rds=200.0,\n     11     croprotation=croprotation,\n---&gt; 12     cropfiles={\"maizes\": crpmaize, \"potatod\": crppotato, \"grassd\": crpgrass},\n     13 )\n     15 ml.crop = crop\n\nNameError: name 'crppotato' is not defined</pre> In\u00a0[10]: Copied! <pre>irrig_events = psp.components.irrigation.IRRIGEVENTS.create({\n    \"IRDATE\": [\"2002-01-05\"],\n    \"IRDEPTH\": [5.0],\n    \"IRCONC\": [1000.0],\n    \"IRTYPE\": [1],\n})\n\nfixed_irrigation = psp.components.irrigation.FixedIrrigation(\n    swirfix=1, swirgfil=0, irrigevents=irrig_events\n)\n\nml.fixedirrigation = fixed_irrigation\n</pre> irrig_events = psp.components.irrigation.IRRIGEVENTS.create({     \"IRDATE\": [\"2002-01-05\"],     \"IRDEPTH\": [5.0],     \"IRCONC\": [1000.0],     \"IRTYPE\": [1], })  fixed_irrigation = psp.components.irrigation.FixedIrrigation(     swirfix=1, swirgfil=0, irrigevents=irrig_events )  ml.fixedirrigation = fixed_irrigation In\u00a0[11]: Copied! <pre>soilmoisture = psp.components.soilwater.SoilMoisture(swinco=2, gwli=-75.0)\nml.soilmoisture = soilmoisture\n</pre> soilmoisture = psp.components.soilwater.SoilMoisture(swinco=2, gwli=-75.0) ml.soilmoisture = soilmoisture In\u00a0[12]: Copied! <pre>surfaceflow = psp.components.soilwater.SurfaceFlow(\n    swpondmx=0, pondmx=0.2, rsro=0.5, rsroexp=1.0, swrunon=0\n)\n\nml.surfaceflow = surfaceflow\n</pre> surfaceflow = psp.components.soilwater.SurfaceFlow(     swpondmx=0, pondmx=0.2, rsro=0.5, rsroexp=1.0, swrunon=0 )  ml.surfaceflow = surfaceflow In\u00a0[13]: Copied! <pre>evaporation = psp.components.soilwater.Evaporation(\n    cfevappond=1.25, swcfbs=0, rsoil=30.0, swredu=1, cofredbl=0.35, rsigni=0.5\n)\n\nml.evaporation = evaporation\n</pre> evaporation = psp.components.soilwater.Evaporation(     cfevappond=1.25, swcfbs=0, rsoil=30.0, swredu=1, cofredbl=0.35, rsigni=0.5 )  ml.evaporation = evaporation In\u00a0[14]: Copied! <pre>soil_profile = psp.components.soilwater.SOILPROFILE.create({\n    \"ISUBLAY\": [1, 2, 3, 4],\n    \"ISOILLAY\": [1, 1, 2, 2],\n    \"HSUBLAY\": [10.0, 20.0, 30.0, 140.0],\n    \"HCOMP\": [1.0, 5.0, 5.0, 10.0],\n    \"NCOMP\": [10, 4, 6, 14],\n})\n\nsoil_hydraulic_functions = psp.components.soilwater.SOILHYDRFUNC.create({\n    \"ORES\": [0.01, 0.02],\n    \"OSAT\": [0.42, 0.38],\n    \"ALFA\": [0.0276, 0.0213],\n    \"NPAR\": [1.491, 1.951],\n    \"KSATFIT\": [12.52, 12.68],\n    \"LEXP\": [-1.060, 0.168],\n    \"ALFAW\": [0.0542, 0.0426],\n    \"H_ENPR\": [0.0, 0.0],\n    \"KSATEXM\": [12.52, 12.68],\n    \"BDENS\": [1315.0, 1315.0],\n})\n\nsoilprofile = psp.components.soilwater.SoilProfile(\n    swsophy=0,\n    soilprofile=soil_profile,\n    swhyst=0,\n    tau=0.2,\n    soilhydrfunc=soil_hydraulic_functions,\n    swmacro=0,\n)\n\nml.soilprofile = soilprofile\n</pre> soil_profile = psp.components.soilwater.SOILPROFILE.create({     \"ISUBLAY\": [1, 2, 3, 4],     \"ISOILLAY\": [1, 1, 2, 2],     \"HSUBLAY\": [10.0, 20.0, 30.0, 140.0],     \"HCOMP\": [1.0, 5.0, 5.0, 10.0],     \"NCOMP\": [10, 4, 6, 14], })  soil_hydraulic_functions = psp.components.soilwater.SOILHYDRFUNC.create({     \"ORES\": [0.01, 0.02],     \"OSAT\": [0.42, 0.38],     \"ALFA\": [0.0276, 0.0213],     \"NPAR\": [1.491, 1.951],     \"KSATFIT\": [12.52, 12.68],     \"LEXP\": [-1.060, 0.168],     \"ALFAW\": [0.0542, 0.0426],     \"H_ENPR\": [0.0, 0.0],     \"KSATEXM\": [12.52, 12.68],     \"BDENS\": [1315.0, 1315.0], })  soilprofile = psp.components.soilwater.SoilProfile(     swsophy=0,     soilprofile=soil_profile,     swhyst=0,     tau=0.2,     soilhydrfunc=soil_hydraulic_functions,     swmacro=0, )  ml.soilprofile = soilprofile In\u00a0[15]: Copied! <pre>dra = psp.components.drainage.DraFile(\n    dramet=2,\n    swdivd=1,\n    cofani=[1.0, 1.0],\n    swdislay=0,\n    lm2=11.0,\n    shape=0.8,\n    wetper=30.0,\n    zbotdr=-80.0,\n    entres=20.0,\n    ipos=2,\n    basegw=-200.0,\n    khtop=25.0,\n)\n\ndrainage = psp.components.drainage.Drainage(swdra=1, drafile=dra)\n\nml.lateraldrainage = drainage\n</pre> dra = psp.components.drainage.DraFile(     dramet=2,     swdivd=1,     cofani=[1.0, 1.0],     swdislay=0,     lm2=11.0,     shape=0.8,     wetper=30.0,     zbotdr=-80.0,     entres=20.0,     ipos=2,     basegw=-200.0,     khtop=25.0, )  drainage = psp.components.drainage.Drainage(swdra=1, drafile=dra)  ml.lateraldrainage = drainage In\u00a0[16]: Copied! <pre>bottom_boundary = psp.components.boundary.BottomBoundary(swbbcfile=0, swbotb=6)\n\nml.bottomboundary = bottom_boundary\n</pre> bottom_boundary = psp.components.boundary.BottomBoundary(swbbcfile=0, swbotb=6)  ml.bottomboundary = bottom_boundary In\u00a0[17]: Copied! <pre>result = ml.run()\n</pre> result = ml.run() <pre>\n---------------------------------------------------------------------------\nValidationError                           Traceback (most recent call last)\nCell In[17], line 1\n----&gt; 1 result = ml.run()\n\nFile ~/work/pySWAP/pySWAP/pyswap/model/model.py:535, in Model.run(self, path, silence_warnings)\n    531 def run(\n    532     self, path: str | Path | None = None, silence_warnings: bool = False\n    533 ) -&gt; Result:\n    534     \"\"\"Run the model using ModelRunner.\"\"\"\n--&gt; 535     self.validate()\n    536     path = Path.cwd() if path is None else path\n    537     return ModelRunner(self).run(path, silence_warnings)\n\nFile ~/work/pySWAP/pySWAP/pyswap/model/model.py:503, in Model.validate(self)\n    501 try:\n    502     self._validate_on_run = True\n--&gt; 503     self.model_validate(self)\n    504 finally:\n    505     self._validate_on_run = False\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/pydantic/main.py:627, in BaseModel.model_validate(cls, obj, strict, from_attributes, context)\n    625 # `__tracebackhide__` tells pytest and some other tools to omit this function from tracebacks\n    626 __tracebackhide__ = True\n--&gt; 627 return cls.__pydantic_validator__.validate_python(\n    628     obj, strict=strict, from_attributes=from_attributes, context=context\n    629 )\n\nValidationError: 1 validation error for Model\n  Value error, Missing required components: crop [type=value_error, input_value=Model(version='base'), input_type=Model]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error</pre> In\u00a0[18]: Copied! <pre>print(result.yearly_summary)\n</pre> print(result.yearly_summary) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[18], line 1\n----&gt; 1 print(result.yearly_summary)\n\nNameError: name 'result' is not defined</pre>"}, {"location": "tutorials/000-setting-up-hupselbrook/#hupselbrook-model-setup", "title": "Hupselbrook Model Setup\u00b6", "text": "<p>SWAP plain-text configuration files (.swp, .crp, .dra, .bbc) consist of various switches (parameters with \"SW\" prefix), key-value pairs, and tables. These elements are grouped into sections corresponding to specific parts of the model. For example, the meteorological section includes parameters for climatological calculations, while the crop section handles parameters related to, e.g., crop water uptake. You can see the structure of the classic template of SWAP file inputs in the wiki section.</p> <p>pyswap is built on Object Oriented Programming principle, similar to flopy package for MODFLOW model. Different parts of the model, or model components, are represented by separate classes (<code>GeneralSettings</code>, <code>Meteorology</code>, etc.). These components are then stacked together like lego blocks to build a complete model. This approach allows to easily build variants of a model by modifying or replacing individual components without changing the overall structure.</p> <p>Tip</p> <p>         pySWAP is designed with type hinting in mind. When using a code editor like Visual Studio Code, typing `pyswap.` will show hints for available classes and functions. Similarly, hovering over a class signature will display available parameters, value ranges, and documentation.   </p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#general-settings", "title": "General settings\u00b6", "text": "<p>In pySWAP, each distinct section is represented as a class, similarily to flopy, a popular Python package running MODFLOW models. Therefore, in a sense, defining a model with pySWAP feels similar to defining it in a classic ASCII template, but gives you more options to work with your models further. Finally, when all necessary objects are defined, you create a Model instance. You can also define an empty Model instance, and add each section to that instance after it's created. Let's set up <code>Metadata</code> and <code>GeneralSettings</code> for the model. We will start with an empty model instance.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#meteorology", "title": "Meteorology\u00b6", "text": "<p>Setting up meteorological section additionally requires providing some climatological data in a specific CSV format. Those data are enclosed in a <code>File</code> type object. For meteorological data it's <code>MetFile</code> class. Let's create the <code>Meteorology</code> object with a <code>MetFile</code> attached to it.</p> <p>Currently the other built-in method of getting the MetFile is using KNMI service or loading it from a CSV file. Read documentation of <code>pyswap.components.meteorology</code> module.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#crop", "title": "Crop\u00b6", "text": "<p>Crop settings can be defined either fully in your Python script, or can be partly imported from the WOFOST crop database (depending on which crop file type you are going to use). In the Hupselbrook example, the crop rotation settings includes all three: simple setup for maize, detailed WOFOST model for potato and dynamic grass growth.</p> <p>Each crop file is set up as <code>Crop</code> objects which in turn consists of subsections (<code>ScheduledIrrigation</code>, <code>CropDevelopmentSettingsFixed</code>, etc). This is identical to how the main <code>Model</code> is composed.</p> <p>This section is somewhat long, so buckle up...</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#simple-fixed-crop-settings-for-maize", "title": "Simple (fixed) crop settings for maize\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#wofost-settings-for-potato", "title": "WOFOST settings for potato\u00b6", "text": "<p>For the WOFOST model, many more parameters are necessary. Therefore we can make use of calibrated parameters for crops from existing databases. pySWAP uses the de Wit's crop database to automatically load some available parameters. The remaining parameters still need to be supplied by the user. We will make use of that database below.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#dynamic-grass-model", "title": "Dynamic grass model\u00b6", "text": "<p>This one requires many parameters that are unavailable in the crop database pySWAP uses. Therefore, all tables and parameters have to be defined manually.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#main-crop-object", "title": "Main Crop object\u00b6", "text": "<p>the three CropFile objects defined above will be converted by pySWAP to .crp files and used in the simulation. They need to be added to the main Crop object defining the basic settings for crop simulation inside .swp model.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#irrigation", "title": "Irrigation\u00b6", "text": "<p>The irrigation section is relatively short, and if the fixed irrigation application is used, a dataframe of the irrigation events will be necessary.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#soil-water-parameters-section", "title": "Soil-water parameters section\u00b6", "text": "<p>This section is defining the soil water interaction parameters.</p>"}, {"location": "tutorials/000-setting-up-hupselbrook/#soil-moisture", "title": "Soil moisture\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#surface-flow", "title": "Surface flow\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#evaporation", "title": "Evaporation\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#soil-profile", "title": "Soil profile\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#drainage", "title": "Drainage\u00b6", "text": ""}, {"location": "tutorials/000-setting-up-hupselbrook/#bottom-boundary-conditions", "title": "Bottom boundary conditions\u00b6", "text": ""}, {"location": "tutorials/001-basic-usage/", "title": "Basic usage", "text": "In\u00a0[1]: Copied! <pre>import pyswap as psp\n\npsp.log.set_log_level(\"WARNING\")\n</pre> import pyswap as psp  psp.log.set_log_level(\"WARNING\") <p>pySWAP is an object-oriented library, which means that we try to split and encapsulate distinct parts of the SWAP model setup as objects. These objects need to be defined by the user at the initial stage and then can later be easily manipulated, copied and compared. Below is an example of the Meteorological settings object:</p> In\u00a0[2]: Copied! <pre>ml = psp.testcase.get(\"hupselbrook\")\n</pre> ml = psp.testcase.get(\"hupselbrook\") <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[2], line 1\n----&gt; 1 ml = psp.testcase.get(\"hupselbrook\")\n\nFile ~/work/pySWAP/pySWAP/pyswap/testcase/run_testcase.py:30, in get(case)\n     11 def get(\n     12     case: Literal[\n     13         \"hupselbrook\",\n   (...)\n     19     ],\n     20 ):\n     21     cases = {\n     22         \"hupselbrook\": _make_hupselbrook,\n     23         \"oxygenstress\": _make_oxygenstress,\n   (...)\n     27         \"surfacewater\": _make_surfacewater,\n     28     }\n---&gt; 30     return cases[case]()\n\nFile ~/work/pySWAP/pySWAP/pyswap/testcase/hupselbrook.py:186, in _make_hupselbrook()\n    184 # Load the crop database\n    185 db = WOFOSTCropDB()\n--&gt; 186 potato = db.load_crop_file(\"potato\")\n    187 potato_params = potato.get_variety(\"Potato_701\")\n    189 potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n    190     wofost_variety=potato_params,\n    191     swcf=2,\n   (...)\n    205     rdctb=potato_rdctb,\n    206 )\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:152, in WOFOSTCropDB.load_crop_file(self, crop)\n    146 \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    147 path = (\n    148     self.libdir / f\"{crop}\"\n    149     if crop.endswith(\".yaml\")\n    150     else self.libdir / f\"{crop}.yaml\"\n    151 )\n--&gt; 152 return WOFOSTCropFile(yaml_content=load_yaml(path))\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/potato.yaml'</pre> <p><code>Model</code> object has a method run, which runs the model and captures the results into a <code>Result</code> object. The only argument that needs to be passed is the path to where the temporary directory can be created.</p> In\u00a0[3]: Copied! <pre>print(ml.swp)\n</pre> print(ml.swp) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 print(ml.swp)\n\nNameError: name 'ml' is not defined</pre> In\u00a0[4]: Copied! <pre>result = ml.run()\n</pre> result = ml.run() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 result = ml.run()\n\nNameError: name 'ml' is not defined</pre> <p>From now on, we can use Result object's attributes and computed fields to access the results. The .csv, for example, is already loaded as DataFrame.</p> In\u00a0[5]: Copied! <pre>result.output.keys()\n</pre> result.output.keys() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 result.output.keys()\n\nNameError: name 'result' is not defined</pre> In\u00a0[6]: Copied! <pre>result.yearly_summary\n</pre> result.yearly_summary <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 result.yearly_summary\n\nNameError: name 'result' is not defined</pre> In\u00a0[7]: Copied! <pre>print(result.blc_summary)\n</pre> print(result.blc_summary) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 print(result.blc_summary)\n\nNameError: name 'result' is not defined</pre> In\u00a0[8]: Copied! <pre>result.csv[[\"RAIN\", \"IRRIG\", \"INTERC\"]].plot()\n</pre> result.csv[[\"RAIN\", \"IRRIG\", \"INTERC\"]].plot() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 result.csv[[\"RAIN\", \"IRRIG\", \"INTERC\"]].plot()\n\nNameError: name 'result' is not defined</pre> In\u00a0[9]: Copied! <pre># updated general settings including inlist_csv_tz\nml.generalsettings.extensions = [*ml.generalsettings.extensions, \"csv_tz\"]\nml.generalsettings.inlist_csv_tz = [\"WC\"]\n</pre> # updated general settings including inlist_csv_tz ml.generalsettings.extensions = [*ml.generalsettings.extensions, \"csv_tz\"] ml.generalsettings.inlist_csv_tz = [\"WC\"] <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 2\n      1 # updated general settings including inlist_csv_tz\n----&gt; 2 ml.generalsettings.extensions = [*ml.generalsettings.extensions, \"csv_tz\"]\n      3 ml.generalsettings.inlist_csv_tz = [\"WC\"]\n\nNameError: name 'ml' is not defined</pre> In\u00a0[10]: Copied! <pre>result2 = ml.run()\n</pre> result2 = ml.run() <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 result2 = ml.run()\n\nNameError: name 'ml' is not defined</pre> In\u00a0[11]: Copied! <pre>from pyswap.core.plot import water_content\n\nwc_df = result2.csv_tz.reset_index()\n\nwater_content(wc_df, \"DEPTH\", \"DATE\", \"WC\")\n</pre> from pyswap.core.plot import water_content  wc_df = result2.csv_tz.reset_index()  water_content(wc_df, \"DEPTH\", \"DATE\", \"WC\") <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 3\n      1 from pyswap.core.plot import water_content\n----&gt; 3 wc_df = result2.csv_tz.reset_index()\n      5 water_content(wc_df, \"DEPTH\", \"DATE\", \"WC\")\n\nNameError: name 'result2' is not defined</pre>"}, {"location": "tutorials/001-basic-usage/#basic-usage", "title": "Basic usage\u00b6", "text": "<p>Welcome to the basic usage notebook of pySWAP package. Here we will go through the basics of how a SWAP model is constructed in pySWAP, load one of the test case models and explore it a bit.</p>"}, {"location": "tutorials/001-basic-usage/#hupselbrook-testcase", "title": "Hupselbrook testcase\u00b6", "text": "<p>A lot of the model settings still need to be explicitly written out. There is, however, an ongoing effort to reduce to minimum the amount of code that has to be written for the initial model. If you are interested how the Hupselbrook model is implemented in pySWAP, take a look at file <code>hupselbrook.py</code> in <code>testcase</code> module.</p> <p>Let's load the model and check the metadata.</p>"}, {"location": "tutorials/001-basic-usage/#alternative-way-to-load-a-model", "title": "Alternative way to load a model\u00b6", "text": "<p>Since pyswap 0.2.0, it is possible to load an entire model from the classic ascii configuration files. In order to do that, you need to create the swp and other relevant files separately and then put them together in a model. You can see it in the tutorial on loading classic SWAP model.</p>"}, {"location": "tutorials/001-basic-usage/#changing-the-model-settings", "title": "Changing the model settings\u00b6", "text": "<p>Assume you would like to add another file extension to be generated, or make any other change for that matter. The best way to achieve this is to create a copy of a component you want to alter, and then update the model with that new component, saving it's copy.</p>"}, {"location": "tutorials/001-basic-usage/#alternative-way-to-setup-the-model", "title": "Alternative way to setup the model\u00b6", "text": "<p>Initially it was only possible to directly assign generated model components to the Model object attributes. Since the newest release (February 2025) it is possible to set up and run the model by loading the plain text files used traditionally to set up the model. See this notebook to see how to do it!</p>"}, {"location": "tutorials/002-hdf5-database/", "title": "Using HDF5 database", "text": "In\u00a0[1]: Copied! <pre>from pyswap import db, run_parallel, testcase\n\n# get the Model object and run it\nml = testcase.get(\"hupselbrook\")\nresult = ml.run()\nresult.csv.head()\n</pre> from pyswap import db, run_parallel, testcase  # get the Model object and run it ml = testcase.get(\"hupselbrook\") result = ml.run() result.csv.head() <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 4\n      1 from pyswap import db, run_parallel, testcase\n      3 # get the Model object and run it\n----&gt; 4 ml = testcase.get(\"hupselbrook\")\n      5 result = ml.run()\n      6 result.csv.head()\n\nFile ~/work/pySWAP/pySWAP/pyswap/testcase/run_testcase.py:30, in get(case)\n     11 def get(\n     12     case: Literal[\n     13         \"hupselbrook\",\n   (...)\n     19     ],\n     20 ):\n     21     cases = {\n     22         \"hupselbrook\": _make_hupselbrook,\n     23         \"oxygenstress\": _make_oxygenstress,\n   (...)\n     27         \"surfacewater\": _make_surfacewater,\n     28     }\n---&gt; 30     return cases[case]()\n\nFile ~/work/pySWAP/pySWAP/pyswap/testcase/hupselbrook.py:186, in _make_hupselbrook()\n    184 # Load the crop database\n    185 db = WOFOSTCropDB()\n--&gt; 186 potato = db.load_crop_file(\"potato\")\n    187 potato_params = potato.get_variety(\"Potato_701\")\n    189 potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n    190     wofost_variety=potato_params,\n    191     swcf=2,\n   (...)\n    205     rdctb=potato_rdctb,\n    206 )\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:152, in WOFOSTCropDB.load_crop_file(self, crop)\n    146 \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    147 path = (\n    148     self.libdir / f\"{crop}\"\n    149     if crop.endswith(\".yaml\")\n    150     else self.libdir / f\"{crop}.yaml\"\n    151 )\n--&gt; 152 return WOFOSTCropFile(yaml_content=load_yaml(path))\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/potato.yaml'</pre> In\u00a0[2]: Copied! <pre># create an interface object and save the model and the result\nf = db.HDF5(filename=\"data.h5\")\nf.save_model(model=ml, result=result)\n</pre> # create an interface object and save the model and the result f = db.HDF5(filename=\"data.h5\") f.save_model(model=ml, result=result) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[2], line 3\n      1 # create an interface object and save the model and the result\n      2 f = db.HDF5(filename=\"data.h5\")\n----&gt; 3 f.save_model(model=ml, result=result)\n\nNameError: name 'ml' is not defined</pre> In\u00a0[3]: Copied! <pre>f.list_models\n</pre> f.list_models <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 f.list_models\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/hdf5.py:61, in HDF5.list_models(self)\n     58 @computed_field(return_type=dict)\n     59 def list_models(self):\n     60     \"\"\"List all the models in the HDF5 file.\"\"\"\n---&gt; 61     with h5py.File(self.filename, \"r\") as f:\n     62         # Use the visititems method to traverse the file structure\n     63         models = {project: list(f[project].keys()) for project in f}\n     64     return models\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:561, in File.__init__(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\n    552     fapl = make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n    553                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n    554                      alignment_threshold=alignment_threshold,\n    555                      alignment_interval=alignment_interval,\n    556                      meta_block_size=meta_block_size,\n    557                      **kwds)\n    558     fcpl = make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n    559                      fs_persist=fs_persist, fs_threshold=fs_threshold,\n    560                      fs_page_size=fs_page_size)\n--&gt; 561     fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)\n    563 if isinstance(libver, tuple):\n    564     self._libver = libver\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:235, in make_fid(name, mode, userblock_size, fapl, fcpl, swmr)\n    233     if swmr and swmr_support:\n    234         flags |= h5f.ACC_SWMR_READ\n--&gt; 235     fid = h5f.open(name, flags, fapl=fapl)\n    236 elif mode == 'r+':\n    237     fid = h5f.open(name, h5f.ACC_RDWR, fapl=fapl)\n\nFile h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()\n\nFile h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()\n\nFile h5py/h5f.pyx:102, in h5py.h5f.open()\n\nFileNotFoundError: [Errno 2] Unable to synchronously open file (unable to open file: name = 'data.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)</pre> <p>To retrieve a models from the database, use <code>.load()</code> method. It will</p> In\u00a0[4]: Copied! <pre>db = f.load(\"psp test - hupselbrook\", load_results=True)\n</pre> db = f.load(\"psp test - hupselbrook\", load_results=True) <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 db = f.load(\"psp test - hupselbrook\", load_results=True)\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/hdf5.py:142, in HDF5.load(self, project, model, load_results, mode)\n    124 \"\"\"\n    125 Load a single model or all models within a specific project.\n    126 \n   (...)\n    138     NotImplementedError: If 'json' or 'yaml' modes are selected.\n    139 \"\"\"\n    140 loaded_models = {}\n--&gt; 142 with h5py.File(self.filename, \"r\") as f:\n    143     # Validate that the project exists\n    144     if project not in f:\n    145         msg = f\"Project '{project}' does not exist in the HDF5 file.\"\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:561, in File.__init__(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\n    552     fapl = make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n    553                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n    554                      alignment_threshold=alignment_threshold,\n    555                      alignment_interval=alignment_interval,\n    556                      meta_block_size=meta_block_size,\n    557                      **kwds)\n    558     fcpl = make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n    559                      fs_persist=fs_persist, fs_threshold=fs_threshold,\n    560                      fs_page_size=fs_page_size)\n--&gt; 561     fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)\n    563 if isinstance(libver, tuple):\n    564     self._libver = libver\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:235, in make_fid(name, mode, userblock_size, fapl, fcpl, swmr)\n    233     if swmr and swmr_support:\n    234         flags |= h5f.ACC_SWMR_READ\n--&gt; 235     fid = h5f.open(name, flags, fapl=fapl)\n    236 elif mode == 'r+':\n    237     fid = h5f.open(name, h5f.ACC_RDWR, fapl=fapl)\n\nFile h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()\n\nFile h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()\n\nFile h5py/h5f.pyx:102, in h5py.h5f.open()\n\nFileNotFoundError: [Errno 2] Unable to synchronously open file (unable to open file: name = 'data.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)</pre> <p>As you can see below, the result of <code>.load()</code> is a dictionary where the key is the model version name, and the value is a tuple of <code>Model</code> and <code>Result</code> objects (or <code>Model</code> and None in case <code>load_results=False</code>).</p> In\u00a0[5]: Copied! <pre>db\n</pre> db Out[5]: <pre>&lt;module 'pyswap.db' from '/home/runner/work/pySWAP/pySWAP/pyswap/db/__init__.py'&gt;</pre> In\u00a0[6]: Copied! <pre># For no reason, we will create 38 new versions, where in each version the drainage depth is increased by 2 cm\nversion = {f\"drain_down_{i * 5}\": {\"zbotdr\": -80.0 - i * 5} for i in range(1, 10)}\n</pre> # For no reason, we will create 38 new versions, where in each version the drainage depth is increased by 2 cm version = {f\"drain_down_{i * 5}\": {\"zbotdr\": -80.0 - i * 5} for i in range(1, 10)} In\u00a0[7]: Copied! <pre>ml2 = db.get(\"base\")[0]\n</pre> ml2 = db.get(\"base\")[0] <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 1\n----&gt; 1 ml2 = db.get(\"base\")[0]\n\nAttributeError: module 'pyswap.db' has no attribute 'get'</pre> <p>Now we will make it a bit more complicated on purpose, to additionally show how to update nested objects. Above we defined the dictionary where the key is the new model version name and the values are new values for given attributes. As we cannot do a direct update of attributes of nested objects, we need to do it step by step:</p> <ul> <li>First we make new updated copies of the DraFile object from the initial model</li> <li>Then we make copies of Drainage objects from the initial model</li> <li>Last we create 3 copies of the model with updated lateraldrainage attribute.</li> </ul> <p>We can use dictionary comprehension to get a dictionary of updated <code>DraFile</code> objects, which is nested in the lateraldrainage. The <code>.update()</code> method returns updated copies.</p> In\u00a0[8]: Copied! <pre>versions = {\n    key: ml2.lateraldrainage.drafile.update(value) for key, value in version.items()\n}\n</pre> versions = {     key: ml2.lateraldrainage.drafile.update(value) for key, value in version.items() } <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[8], line 1\n----&gt; 1 versions = {\n      2     key: ml2.lateraldrainage.drafile.update(value) for key, value in version.items()\n      3 }\n\nCell In[8], line 2, in &lt;dictcomp&gt;(.0)\n      1 versions = {\n----&gt; 2     key: ml2.lateraldrainage.drafile.update(value) for key, value in version.items()\n      3 }\n\nNameError: name 'ml2' is not defined</pre> <p>Now we create new models with the lateraldrainage attribute updated with the new <code>DraFile</code> objects. The list comprehension below returns a list of new <code>Model</code> objects updated with copies of <code>Drainage</code> objects:</p> In\u00a0[9]: Copied! <pre>mls = [\n    ml2.update({\n        \"version\": key,\n        \"lateraldrainage\": ml2.lateraldrainage.update({\"drafile\": value}),\n    })\n    for key, value in versions.items()\n]\nprint(\"There are\", len(mls), \"model versions\")\n</pre> mls = [     ml2.update({         \"version\": key,         \"lateraldrainage\": ml2.lateraldrainage.update({\"drafile\": value}),     })     for key, value in versions.items() ] print(\"There are\", len(mls), \"model versions\") <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 6\n      1 mls = [\n      2     ml2.update({\n      3         \"version\": key,\n      4         \"lateraldrainage\": ml2.lateraldrainage.update({\"drafile\": value}),\n      5     })\n----&gt; 6     for key, value in versions.items()\n      7 ]\n      8 print(\"There are\", len(mls), \"model versions\")\n\nNameError: name 'versions' is not defined</pre> In\u00a0[10]: Copied! <pre>results = run_parallel(mls, silence_warnings=True)\n</pre> results = run_parallel(mls, silence_warnings=True) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 results = run_parallel(mls, silence_warnings=True)\n\nNameError: name 'mls' is not defined</pre> In\u00a0[11]: Copied! <pre>_ = [\n    f.save_model(model=ml, result=result)\n    for ml, result in zip(mls, results, strict=False)\n]\n</pre> _ = [     f.save_model(model=ml, result=result)     for ml, result in zip(mls, results, strict=False) ] <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 3\n      1 _ = [\n      2     f.save_model(model=ml, result=result)\n----&gt; 3     for ml, result in zip(mls, results, strict=False)\n      4 ]\n\nNameError: name 'mls' is not defined</pre> In\u00a0[12]: Copied! <pre>f.list_models\n</pre> f.list_models <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 f.list_models\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/hdf5.py:61, in HDF5.list_models(self)\n     58 @computed_field(return_type=dict)\n     59 def list_models(self):\n     60     \"\"\"List all the models in the HDF5 file.\"\"\"\n---&gt; 61     with h5py.File(self.filename, \"r\") as f:\n     62         # Use the visititems method to traverse the file structure\n     63         models = {project: list(f[project].keys()) for project in f}\n     64     return models\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:561, in File.__init__(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\n    552     fapl = make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n    553                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n    554                      alignment_threshold=alignment_threshold,\n    555                      alignment_interval=alignment_interval,\n    556                      meta_block_size=meta_block_size,\n    557                      **kwds)\n    558     fcpl = make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n    559                      fs_persist=fs_persist, fs_threshold=fs_threshold,\n    560                      fs_page_size=fs_page_size)\n--&gt; 561     fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)\n    563 if isinstance(libver, tuple):\n    564     self._libver = libver\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:235, in make_fid(name, mode, userblock_size, fapl, fcpl, swmr)\n    233     if swmr and swmr_support:\n    234         flags |= h5f.ACC_SWMR_READ\n--&gt; 235     fid = h5f.open(name, flags, fapl=fapl)\n    236 elif mode == 'r+':\n    237     fid = h5f.open(name, h5f.ACC_RDWR, fapl=fapl)\n\nFile h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()\n\nFile h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()\n\nFile h5py/h5f.pyx:102, in h5py.h5f.open()\n\nFileNotFoundError: [Errno 2] Unable to synchronously open file (unable to open file: name = 'data.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)</pre> In\u00a0[13]: Copied! <pre>result.csv[\"GWL\"].plot()\n_ = [result.csv[\"GWL\"].plot() for result in results]\n</pre> result.csv[\"GWL\"].plot() _ = [result.csv[\"GWL\"].plot() for result in results] <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 result.csv[\"GWL\"].plot()\n      2 _ = [result.csv[\"GWL\"].plot() for result in results]\n\nNameError: name 'result' is not defined</pre> In\u00a0[14]: Copied! <pre>f.list_models\n</pre> f.list_models <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[14], line 1\n----&gt; 1 f.list_models\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/hdf5.py:61, in HDF5.list_models(self)\n     58 @computed_field(return_type=dict)\n     59 def list_models(self):\n     60     \"\"\"List all the models in the HDF5 file.\"\"\"\n---&gt; 61     with h5py.File(self.filename, \"r\") as f:\n     62         # Use the visititems method to traverse the file structure\n     63         models = {project: list(f[project].keys()) for project in f}\n     64     return models\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:561, in File.__init__(self, name, mode, driver, libver, userblock_size, swmr, rdcc_nslots, rdcc_nbytes, rdcc_w0, track_order, fs_strategy, fs_persist, fs_threshold, fs_page_size, page_buf_size, min_meta_keep, min_raw_keep, locking, alignment_threshold, alignment_interval, meta_block_size, **kwds)\n    552     fapl = make_fapl(driver, libver, rdcc_nslots, rdcc_nbytes, rdcc_w0,\n    553                      locking, page_buf_size, min_meta_keep, min_raw_keep,\n    554                      alignment_threshold=alignment_threshold,\n    555                      alignment_interval=alignment_interval,\n    556                      meta_block_size=meta_block_size,\n    557                      **kwds)\n    558     fcpl = make_fcpl(track_order=track_order, fs_strategy=fs_strategy,\n    559                      fs_persist=fs_persist, fs_threshold=fs_threshold,\n    560                      fs_page_size=fs_page_size)\n--&gt; 561     fid = make_fid(name, mode, userblock_size, fapl, fcpl, swmr=swmr)\n    563 if isinstance(libver, tuple):\n    564     self._libver = libver\n\nFile ~/.cache/pypoetry/virtualenvs/pyswap-6KVGVCEZ-py3.11/lib/python3.11/site-packages/h5py/_hl/files.py:235, in make_fid(name, mode, userblock_size, fapl, fcpl, swmr)\n    233     if swmr and swmr_support:\n    234         flags |= h5f.ACC_SWMR_READ\n--&gt; 235     fid = h5f.open(name, flags, fapl=fapl)\n    236 elif mode == 'r+':\n    237     fid = h5f.open(name, h5f.ACC_RDWR, fapl=fapl)\n\nFile h5py/_objects.pyx:54, in h5py._objects.with_phil.wrapper()\n\nFile h5py/_objects.pyx:55, in h5py._objects.with_phil.wrapper()\n\nFile h5py/h5f.pyx:102, in h5py.h5f.open()\n\nFileNotFoundError: [Errno 2] Unable to synchronously open file (unable to open file: name = 'data.h5', errno = 2, error message = 'No such file or directory', flags = 0, o_flags = 0)</pre> In\u00a0[15]: Copied! <pre>f.delete(project=\"psp test - hupselbrook\", model=\"base\")\nf.list_models\n</pre> f.delete(project=\"psp test - hupselbrook\", model=\"base\") f.list_models <pre>Model base does not exist in project psp test - hupselbrook.\n</pre> Out[15]: <pre>{}</pre> <p>You can also delete the entire project. This will remove the objects from the database, but the .h5 file will still have the same size. Therefore, for large deletions, it's better to replace the file entirely.</p> In\u00a0[16]: Copied! <pre>f.delete(project=\"psp test - hupselbrook\")\nf.list_models\n</pre> f.delete(project=\"psp test - hupselbrook\") f.list_models <pre>Project psp test - hupselbrook does not exist.\n</pre> Out[16]: <pre>{}</pre>"}, {"location": "tutorials/002-hdf5-database/#using-hdf5-database", "title": "Using HDF5 database\u00b6", "text": "<p>This tutorial shows how to store and retrieve models and their results from an HDF5 database (see more) integrated in pySWAP. We are going to:</p> <ul> <li>Load a test case model.</li> <li>Create an HDF5 database and save a model inside it.</li> <li>Retrieve a model from the HDF5 database.</li> <li>Alter the model and save its version back to the database.</li> <li>Compare the results.</li> </ul> <p>We will also see how to do run a list of models in parallel.</p>"}, {"location": "tutorials/002-hdf5-database/#checking-saved-model", "title": "Checking saved model\u00b6", "text": "<p>we can now check what is in the database. By calling <code>.list_models</code> property we will get a dictionary where keys are projects and values are lists of models inside the project.</p>"}, {"location": "tutorials/002-hdf5-database/#loading-models", "title": "Loading models\u00b6", "text": "<p>Above you can see that the model was saved to the .h5 file. If the file already exists (for example one with your other projects), you will get a warning message and the program skips creation of additional elements in the database.</p> <p>Now we are going to:</p> <ul> <li>Load a specific model (or all models from a project) from the HDF5 file.</li> <li>Create a copy of the loaded model and modify its parameters for another run.</li> </ul>"}, {"location": "tutorials/002-hdf5-database/#creating-model-variants", "title": "Creating model variants\u00b6", "text": "<p>we can create variants of the initial model by making copies of the initial model and updating one or more variables.</p>"}, {"location": "tutorials/002-hdf5-database/#run-in-parallel-and-save-in-h5", "title": "Run in parallel and save in .h5\u00b6", "text": "<p>pyswap now has a simple way to parallellize running of the models. Instead of calling the .run() method, you need to use run_parallel() function, providing it with a list of model objects. A list of Result objects is returned.</p>"}, {"location": "tutorials/002-hdf5-database/#visualise-the-results", "title": "Visualise the results\u00b6", "text": "<p>Now you can observe the results by plotting the main output pandas.DataFrame object, like you normally would.</p>"}, {"location": "tutorials/002-hdf5-database/#deleting-objects", "title": "Deleting objects\u00b6", "text": "<p>You can use the <code>.delete()</code> method to delete the objects from the hdf5 database. You can delete either a specific model or the entire project. Use this method only for small deletions, as for now it does not perform repacking of the HDF5 file (the objects are deleted but the disk space is not freed). For large deletions, consider creating a new HDF5 file and saving only the models you want to keep.</p>"}, {"location": "tutorials/003-wofost-crop-db/", "title": "WOFOST crop database", "text": "In\u00a0[1]: Copied! <pre>import pyswap as psp\n</pre> import pyswap as psp In\u00a0[2]: Copied! <pre>cropdb = psp.db.WOFOSTCropDB()\ncropdb.croptypes\n</pre> cropdb = psp.db.WOFOSTCropDB() cropdb.croptypes <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[2], line 2\n      1 cropdb = psp.db.WOFOSTCropDB()\n----&gt; 2 cropdb.croptypes\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:143, in WOFOSTCropDB.croptypes(self)\n    140 @computed_field(return_type=None)\n    141 def croptypes(self):\n    142     \"\"\"Print the list of available files\"\"\"\n--&gt; 143     pprint(load_yaml(crop_params / \"crops.yaml\")[\"available_crops\"])\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/crops.yaml'</pre> <p>When we call <code>load_crop_file</code> on the database object with the name of a specific crop type, we will get a WOFOSTCropFile object. We can then inspect that object to see the file's metadata, parameters in individual sections, available ecotypes and varieties.</p> In\u00a0[3]: Copied! <pre>cropfile = cropdb.load_crop_file(\"rice\")\n</pre> cropfile = cropdb.load_crop_file(\"rice\") <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[3], line 1\n----&gt; 1 cropfile = cropdb.load_crop_file(\"rice\")\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:152, in WOFOSTCropDB.load_crop_file(self, crop)\n    146 \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    147 path = (\n    148     self.libdir / f\"{crop}\"\n    149     if crop.endswith(\".yaml\")\n    150     else self.libdir / f\"{crop}.yaml\"\n    151 )\n--&gt; 152 return WOFOSTCropFile(yaml_content=load_yaml(path))\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/rice.yaml'</pre> In\u00a0[4]: Copied! <pre>cropfile.metadata\n</pre> cropfile.metadata <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[4], line 1\n----&gt; 1 cropfile.metadata\n\nNameError: name 'cropfile' is not defined</pre> In\u00a0[5]: Copied! <pre>print(cropfile.ecotypes)\nprint(cropfile.varieties)\n</pre> print(cropfile.ecotypes) print(cropfile.varieties) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 print(cropfile.ecotypes)\n      2 print(cropfile.varieties)\n\nNameError: name 'cropfile' is not defined</pre> In\u00a0[6]: Copied! <pre>rice_501 = cropfile.get_variety(\"Rice_501\")\n</pre> rice_501 = cropfile.get_variety(\"Rice_501\") <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[6], line 1\n----&gt; 1 rice_501 = cropfile.get_variety(\"Rice_501\")\n\nNameError: name 'cropfile' is not defined</pre> <p>The new object is <code>CropVariety</code> object. From here you can view the metadata of the particular variety or obtain just the parameters as a dictionary. Mind that at this stage, all tables are just arrays of numbers, the same way as it is formatted in the .yaml files. pySWAP automatically converts them in tables when they are used to populate the parameters of crop settings classes.</p> In\u00a0[7]: Copied! <pre>potato_prep = psp.components.crop.Preparation(\n    swprep=0,\n    swsow=0,\n    swgerm=2,\n    tsumemeopt=170.0,\n    tbasem=3.0,\n    teffmx=18.0,\n    hdrygerm=-500.0,\n    hwetgerm=-100.0,\n    zgerm=-10.0,\n    agerm=203.0,\n    dvsend=2.0,\n    swharv=0,\n)\n\nscheduled_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)\ninterception = psp.components.crop.Interception(swinter=1, cofab=0.25)\n\npotato_chtb = psp.components.crop.CHTB.create({\n    \"DVS\": [0.0, 1.0, 2.0],\n    \"CH\": [\n        1.0,\n        40.0,\n        50.0,\n    ],\n})\n\npotato_rdctb = psp.components.crop.RDCTB.create({\n    \"RRD\": [0.0, 1.0],\n    \"RDENS\": [1.0, 0.0],\n})\n\npotato_ox_stress = psp.components.crop.OxygenStress(\n    swoxygen=1,\n    swwrtnonox=1,\n    aeratecrit=0.5,\n    hlim1=-10.0,\n    hlim2u=-25.0,\n    hlim2l=-25.0,\n    swrootradius=2,\n    root_radiuso2=0.00015,\n)\n\npotato_dr_stress = psp.components.crop.DroughtStress(\n    swdrought=1,\n    hlim3h=-300.0,\n    hlim3l=-500.0,\n    hlim4=-10000.0,\n    adcrh=0.5,\n    adcrl=0.1,\n)\n</pre> potato_prep = psp.components.crop.Preparation(     swprep=0,     swsow=0,     swgerm=2,     tsumemeopt=170.0,     tbasem=3.0,     teffmx=18.0,     hdrygerm=-500.0,     hwetgerm=-100.0,     zgerm=-10.0,     agerm=203.0,     dvsend=2.0,     swharv=0, )  scheduled_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0) interception = psp.components.crop.Interception(swinter=1, cofab=0.25)  potato_chtb = psp.components.crop.CHTB.create({     \"DVS\": [0.0, 1.0, 2.0],     \"CH\": [         1.0,         40.0,         50.0,     ], })  potato_rdctb = psp.components.crop.RDCTB.create({     \"RRD\": [0.0, 1.0],     \"RDENS\": [1.0, 0.0], })  potato_ox_stress = psp.components.crop.OxygenStress(     swoxygen=1,     swwrtnonox=1,     aeratecrit=0.5,     hlim1=-10.0,     hlim2u=-25.0,     hlim2l=-25.0,     swrootradius=2,     root_radiuso2=0.00015, )  potato_dr_stress = psp.components.crop.DroughtStress(     swdrought=1,     hlim3h=-300.0,     hlim3l=-500.0,     hlim4=-10000.0,     adcrh=0.5,     adcrl=0.1, ) <pre>\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\nCell In[7], line 19\n     16 scheduled_irrigation = psp.components.irrigation.ScheduledIrrigation(schedule=0)\n     17 interception = psp.components.crop.Interception(swinter=1, cofab=0.25)\n---&gt; 19 potato_chtb = psp.components.crop.CHTB.create({\n     20     \"DVS\": [0.0, 1.0, 2.0],\n     21     \"CH\": [\n     22         1.0,\n     23         40.0,\n     24         50.0,\n     25     ],\n     26 })\n     28 potato_rdctb = psp.components.crop.RDCTB.create({\n     29     \"RRD\": [0.0, 1.0],\n     30     \"RDENS\": [1.0, 0.0],\n     31 })\n     33 potato_ox_stress = psp.components.crop.OxygenStress(\n     34     swoxygen=1,\n     35     swwrtnonox=1,\n   (...)\n     41     root_radiuso2=0.00015,\n     42 )\n\nAttributeError: module 'pyswap.components.crop' has no attribute 'CHTB'</pre> <p>Then, we can load the potato_701 variety from the WOFOST database and create the CropDevelopmentSettings object like so:</p> In\u00a0[8]: Copied! <pre>db = psp.db.WOFOSTCropDB()\npotato = db.load_crop_file(\"potato\")\npotato_params = potato.get_variety(\"Potato_701\")\n\npotato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n    wofost_variety=potato_params,\n    swcf=2,\n    dvs_ch=potato_chtb,\n    albedo=0.19,\n    laiem=0.0589,\n    ssa=0.0,\n    kdif=1.0,\n    rsc=207.0,\n    rsw=0.0,\n    kdir=0.75,\n    eff=0.45,\n    swrd=2,\n    rdc=50.0,\n    swdmi2rd=1,\n    rdctb=potato_rdctb,\n)\n\n# By calling the `update_from_wofost method`, the CropDevelopmentSettingsWOFOST object\n# will be updated with the values from the WOFOST crop file and the model will be evaluated,\n# to make sure that some of the required settings are not missing.\npotato_cropdev_settings.update_from_wofost()\n</pre> db = psp.db.WOFOSTCropDB() potato = db.load_crop_file(\"potato\") potato_params = potato.get_variety(\"Potato_701\")  potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(     wofost_variety=potato_params,     swcf=2,     dvs_ch=potato_chtb,     albedo=0.19,     laiem=0.0589,     ssa=0.0,     kdif=1.0,     rsc=207.0,     rsw=0.0,     kdir=0.75,     eff=0.45,     swrd=2,     rdc=50.0,     swdmi2rd=1,     rdctb=potato_rdctb, )  # By calling the `update_from_wofost method`, the CropDevelopmentSettingsWOFOST object # will be updated with the values from the WOFOST crop file and the model will be evaluated, # to make sure that some of the required settings are not missing. potato_cropdev_settings.update_from_wofost() <pre>\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[8], line 2\n      1 db = psp.db.WOFOSTCropDB()\n----&gt; 2 potato = db.load_crop_file(\"potato\")\n      3 potato_params = potato.get_variety(\"Potato_701\")\n      5 potato_cropdev_settings = psp.components.crop.CropDevelopmentSettingsWOFOST(\n      6     wofost_variety=potato_params,\n      7     swcf=2,\n   (...)\n     20     rdctb=potato_rdctb,\n     21 )\n\nFile ~/work/pySWAP/pySWAP/pyswap/db/cropdb.py:152, in WOFOSTCropDB.load_crop_file(self, crop)\n    146 \"\"\"Load a specific crop file and return the content as a dictionary\"\"\"\n    147 path = (\n    148     self.libdir / f\"{crop}\"\n    149     if crop.endswith(\".yaml\")\n    150     else self.libdir / f\"{crop}.yaml\"\n    151 )\n--&gt; 152 return WOFOSTCropFile(yaml_content=load_yaml(path))\n\nFile ~/work/pySWAP/pySWAP/pyswap/core/io/io_yaml.py:18, in load_yaml(file)\n     12 def load_yaml(file: Path) -&gt; dict:\n     13     \"\"\"Load a YAML file.\n     14 \n     15     Arguments:\n     16         file: Path to the YAML file.\n     17     \"\"\"\n---&gt; 18     with open(file) as file:\n     19         content: dict = yaml.safe_load(file)\n     21     return content\n\nFileNotFoundError: [Errno 2] No such file or directory: '/home/runner/work/pySWAP/pySWAP/pyswap/libs/WOFOST_crop_parameters/potato.yaml'</pre> <p>Further we proceed with creation of the <code>CropFile</code> object, which goes directly to the <code>Model</code>. You can observe the content of the crop file by calling <code>CropFile.crp</code> property.</p> In\u00a0[9]: Copied! <pre>crppotato = psp.components.crop.CropFile(\n    name=\"potatod\",\n    prep=potato_prep,\n    cropdev_settings=potato_cropdev_settings,\n    oxygenstress=potato_ox_stress,\n    droughtstress=potato_dr_stress,\n    interception=interception,\n    scheduledirrigation=scheduled_irrigation,\n)\n</pre> crppotato = psp.components.crop.CropFile(     name=\"potatod\",     prep=potato_prep,     cropdev_settings=potato_cropdev_settings,     oxygenstress=potato_ox_stress,     droughtstress=potato_dr_stress,     interception=interception,     scheduledirrigation=scheduled_irrigation, ) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 4\n      1 crppotato = psp.components.crop.CropFile(\n      2     name=\"potatod\",\n      3     prep=potato_prep,\n----&gt; 4     cropdev_settings=potato_cropdev_settings,\n      5     oxygenstress=potato_ox_stress,\n      6     droughtstress=potato_dr_stress,\n      7     interception=interception,\n      8     scheduledirrigation=scheduled_irrigation,\n      9 )\n\nNameError: name 'potato_cropdev_settings' is not defined</pre> In\u00a0[10]: Copied! <pre>print(crppotato.crp)\n</pre> print(crppotato.crp) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[10], line 1\n----&gt; 1 print(crppotato.crp)\n\nNameError: name 'crppotato' is not defined</pre> <p>The WOFOST database integration allows you draw calibrated settings from the database into pySWAP. If you wish to change some of the settings, you should do it by updating the base pySWAP classes (e.g., CropDevalopmentSettings), like so:</p> In\u00a0[11]: Copied! <pre>potato_cropdev_settings_tsum1_up = potato_cropdev_settings.update({\"tsum1\": 900})\n</pre> potato_cropdev_settings_tsum1_up = potato_cropdev_settings.update({\"tsum1\": 900}) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[11], line 1\n----&gt; 1 potato_cropdev_settings_tsum1_up = potato_cropdev_settings.update({\"tsum1\": 900})\n\nNameError: name 'potato_cropdev_settings' is not defined</pre> In\u00a0[12]: Copied! <pre>crppotato_tsum1_up = crppotato.update({\n    \"cropdev_settings\": potato_cropdev_settings_tsum1_up\n})\n</pre> crppotato_tsum1_up = crppotato.update({     \"cropdev_settings\": potato_cropdev_settings_tsum1_up }) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[12], line 1\n----&gt; 1 crppotato_tsum1_up = crppotato.update({\n      2     \"cropdev_settings\": potato_cropdev_settings_tsum1_up\n      3 })\n\nNameError: name 'crppotato' is not defined</pre> In\u00a0[13]: Copied! <pre>print(crppotato_tsum1_up.cropdev_settings.tsum1)\n</pre> print(crppotato_tsum1_up.cropdev_settings.tsum1) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[13], line 1\n----&gt; 1 print(crppotato_tsum1_up.cropdev_settings.tsum1)\n\nNameError: name 'crppotato_tsum1_up' is not defined</pre>"}, {"location": "tutorials/003-wofost-crop-db/#wofost-crop-database", "title": "WOFOST crop database\u00b6", "text": "<p>There is a GitHub repository containing calibtated parameters for a range of varieties of crops. These parameters were used, e.g., in the Hupselbrook test case provided with the SWAP model for potato variety. As these are reusable, it made sense to tap into that database to make creation of valid crop files for pySWAP easier.</p> <p>In this notebook, we will create a .crp file for potato variety used in the hupselbrook test case.</p>"}, {"location": "tutorials/003-wofost-crop-db/#exploring-the-database", "title": "Exploring the database\u00b6", "text": "<p>pySWAP contains a simple wrapper around A. Wit's crop database. We can use built in classes to get an overview of available data. Then we can check which crop types are available in the database.</p>"}, {"location": "tutorials/003-wofost-crop-db/#using-the-cropvariety-object-to-populate-the-crop-settings-class", "title": "Using the CropVariety object to populate the crop settings class\u00b6", "text": "<p>The point of having this database integration is to enable populating some of the wofost crop parameters used by swap directly from the files. A lot of the parameters we still have to set manually, namely Preparation, ScheduledIrrigation, Interception, OxygenStress, DroughtStress, etc.</p>"}, {"location": "tutorials/004-loading-classic-swap/", "title": "Load classic SWAP model", "text": "In\u00a0[1]: Copied! <pre>import pyswap as psp\n</pre> import pyswap as psp In\u00a0[2]: Copied! <pre>from pyswap import load_bbc, load_crp, load_dra, load_swp, testcase\n\nmeta = psp.components.Metadata(\n    author=\"John Doe\",\n    institution=\"University of Somewhere\",\n    email=\"john.doe@somewhere.com\",\n    project=\"pySWAP test - hupselbrook\",\n    swap_ver=\"4.2\",\n)\n\nml = load_swp(testcase.get_path(\"grassgrowth\", \"swp\"), meta)\n</pre> from pyswap import load_bbc, load_crp, load_dra, load_swp, testcase  meta = psp.components.Metadata(     author=\"John Doe\",     institution=\"University of Somewhere\",     email=\"john.doe@somewhere.com\",     project=\"pySWAP test - hupselbrook\",     swap_ver=\"4.2\", )  ml = load_swp(testcase.get_path(\"grassgrowth\", \"swp\"), meta) In\u00a0[3]: Copied! <pre>print(ml.swp)\n</pre> print(ml.swp) <pre>PROJECT = 'pySWAP test - hupselbrook'\nSWWBA = 0\nSWEND = 0\nSWVAP = 0\nSWBAL = 0\nSWBLC = 0\nSWSBA = 0\nSWATE = 0\nSWBMA = 0\nSWDRF = 0\nSWSWB = 0\nSWINI = 0\nSWINC = 0\nSWCRP = 0\nSWSTR = 0\nSWIRG = 0\nSWCSV = 1\nSWCSV_TZ = 0\nPATHWORK = './'\nPATHATM = './'\nPATHCROP = './'\nPATHDRAIN = './'\nSWSCRE = 0\nSWERROR = 0\nTSTART = 1980-01-01\nTEND = 1984-12-31\nNPRINTDAY = 1\nSWMONTH = 0\nSWYRVAR = 0\nPERIOD = 1\nSWRES = 0\nSWODAT = 0\nDATEFIX = 31 12\nOUTFIL = 'result'\nSWHEADER = 0\nINLIST_CSV = 'pgrassdm,grassdm,pmowdm,mowdm'\nSWAFO = 0\nSWAUN = 0\nSWDISCRVERT = 0\nLAT = 52.10\nSWETR = 0\nSWDIVIDE = 1\nSWRAIN = 2\nSWETSINE = 0\nALT = 1.90\nALTW = 10.00\nANGSTROMA = 0.25\nANGSTROMB = 0.50\nSWMETDETAIL = 0\nSWCROP = 1\nRDS = 200.0\n CROPSTART    CROPEND  CROPFIL  CROPTYPE\n1980-01-01 1980-12-31 'grassd'         3\n1981-01-01 1981-12-31 'grassd'         3\n1982-01-01 1982-12-31 'grassd'         3\n1983-01-01 1983-12-31 'grassd'         3\n1984-01-01 1984-12-31 'grassd'         3\n\nSWIRFIX = 0\nIRGFIL = 'swap'\nSWINCO = 2\nGWLI = -75.00\nSWPONDMX = 0\nSWRUNON = 0\nRSRO = 0.500\nRSROEXP = 1.00\nPONDMX = 0.20\nSWCFBS = 0\nSWREDU = 1\nCFEVAPPOND = 1.25\nRSOIL = 600.00\nCOFREDBL = 0.35\nRSIGNI = 0.50\nSWSOPHY = 0\nSWHYST = 0\nSWMACRO = 0\n ISUBLAY  ISOILLAY  HSUBLAY  HCOMP  NCOMP\n       1         1      5.0    1.0      5\n       2         1     10.0    2.5      4\n       3         2     10.0    5.0      2\n       4         3      5.0    5.0      1\n       5         3     20.0   10.0      2\n       6         4     50.0   10.0      5\n       7         4     20.0   20.0      1\n       8         5    100.0   20.0      5\n       9         5    120.0   40.0      3\n\n ORES  OSAT   ALFA  NPAR  KSATFIT   LEXP  H_ENPR  KSATEXM  BDENS\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\n\nSWSNOW = 0\nSWFROST = 0\nSWKMEAN = 1\nSWKIMPL = 0\nDTMIN = 1e-06\nDTMAX = 0.04\nGWLCONV = 100.0\nCRITDEVH1CP = 0.01\nCRITDEVH2CP = 0.1\nCRITDEVPONDDT = 0.0001\nMAXIT = 30\nMAXBACKTR = 3\nSWDRA = 1\nDRFIL = 'swap'\nSWBBCFILE = 1\nBBCFIL = 'swap'\nSWHEA = 1\nSWCALT = 2\nSWTOPBHEA = 1\nSWBOTBHEA = 1\n PSAND  PSILT  PCLAY  ORGMAT\n  0.68   0.27   0.05   0.113\n  0.68   0.28   0.04   0.053\n  0.77   0.19   0.04   0.018\n  0.86   0.08   0.06   0.019\n  0.88   0.09   0.03   0.011\n\n   ZH  TSOIL\n-10.0   15.0\n-40.0   12.0\n-70.0   10.0\n-95.0    9.0\n\nSWSOLU = 0\n</pre> In\u00a0[4]: Copied! <pre>ml.bottomboundary = load_bbc(testcase.get_path(\"grassgrowth\", \"bbc\"), ml.bottomboundary)\n</pre> ml.bottomboundary = load_bbc(testcase.get_path(\"grassgrowth\", \"bbc\"), ml.bottomboundary) In\u00a0[5]: Copied! <pre>print(ml.swp)\n</pre> print(ml.swp) <pre>PROJECT = 'pySWAP test - hupselbrook'\nSWWBA = 0\nSWEND = 0\nSWVAP = 0\nSWBAL = 0\nSWBLC = 0\nSWSBA = 0\nSWATE = 0\nSWBMA = 0\nSWDRF = 0\nSWSWB = 0\nSWINI = 0\nSWINC = 0\nSWCRP = 0\nSWSTR = 0\nSWIRG = 0\nSWCSV = 1\nSWCSV_TZ = 0\nPATHWORK = './'\nPATHATM = './'\nPATHCROP = './'\nPATHDRAIN = './'\nSWSCRE = 0\nSWERROR = 0\nTSTART = 1980-01-01\nTEND = 1984-12-31\nNPRINTDAY = 1\nSWMONTH = 0\nSWYRVAR = 0\nPERIOD = 1\nSWRES = 0\nSWODAT = 0\nDATEFIX = 31 12\nOUTFIL = 'result'\nSWHEADER = 0\nINLIST_CSV = 'pgrassdm,grassdm,pmowdm,mowdm'\nSWAFO = 0\nSWAUN = 0\nSWDISCRVERT = 0\nLAT = 52.10\nSWETR = 0\nSWDIVIDE = 1\nSWRAIN = 2\nSWETSINE = 0\nALT = 1.90\nALTW = 10.00\nANGSTROMA = 0.25\nANGSTROMB = 0.50\nSWMETDETAIL = 0\nSWCROP = 1\nRDS = 200.0\n CROPSTART    CROPEND  CROPFIL  CROPTYPE\n1980-01-01 1980-12-31 'grassd'         3\n1981-01-01 1981-12-31 'grassd'         3\n1982-01-01 1982-12-31 'grassd'         3\n1983-01-01 1983-12-31 'grassd'         3\n1984-01-01 1984-12-31 'grassd'         3\n\nSWIRFIX = 0\nIRGFIL = 'swap'\nSWINCO = 2\nGWLI = -75.00\nSWPONDMX = 0\nSWRUNON = 0\nRSRO = 0.500\nRSROEXP = 1.00\nPONDMX = 0.20\nSWCFBS = 0\nSWREDU = 1\nCFEVAPPOND = 1.25\nRSOIL = 600.00\nCOFREDBL = 0.35\nRSIGNI = 0.50\nSWSOPHY = 0\nSWHYST = 0\nSWMACRO = 0\n ISUBLAY  ISOILLAY  HSUBLAY  HCOMP  NCOMP\n       1         1      5.0    1.0      5\n       2         1     10.0    2.5      4\n       3         2     10.0    5.0      2\n       4         3      5.0    5.0      1\n       5         3     20.0   10.0      2\n       6         4     50.0   10.0      5\n       7         4     20.0   20.0      1\n       8         5    100.0   20.0      5\n       9         5    120.0   40.0      3\n\n ORES  OSAT   ALFA  NPAR  KSATFIT   LEXP  H_ENPR  KSATEXM  BDENS\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\n\nSWSNOW = 0\nSWFROST = 0\nSWKMEAN = 1\nSWKIMPL = 0\nDTMIN = 1e-06\nDTMAX = 0.04\nGWLCONV = 100.0\nCRITDEVH1CP = 0.01\nCRITDEVH2CP = 0.1\nCRITDEVPONDDT = 0.0001\nMAXIT = 30\nMAXBACKTR = 3\nSWDRA = 1\nDRFIL = 'swap'\nSWBBCFILE = 1\nBBCFIL = 'swap'\nSWHEA = 1\nSWCALT = 2\nSWTOPBHEA = 1\nSWBOTBHEA = 1\n PSAND  PSILT  PCLAY  ORGMAT\n  0.68   0.27   0.05   0.113\n  0.68   0.28   0.04   0.053\n  0.77   0.19   0.04   0.018\n  0.86   0.08   0.06   0.019\n  0.88   0.09   0.03   0.011\n\n   ZH  TSOIL\n-10.0   15.0\n-40.0   12.0\n-70.0   10.0\n-95.0    9.0\n\nSWSOLU = 0\n</pre> <p>Crop files are provided to the Crop instance as a dictionary. Below is one way to load crp file</p> In\u00a0[6]: Copied! <pre>ml.crop.cropfiles = {\n    \"grassd\": load_crp(\n        testcase.get_path(\"grassgrowth\", \"grassd\"), crptype=\"grass\", name=\"grassd\"\n    )\n}\n</pre> ml.crop.cropfiles = {     \"grassd\": load_crp(         testcase.get_path(\"grassgrowth\", \"grassd\"), crptype=\"grass\", name=\"grassd\"     ) } In\u00a0[7]: Copied! <pre>print(ml.crop.cropfiles.get(\"grassd\").crp)\n</pre> print(ml.crop.cropfiles.get(\"grassd\").crp) <pre>\nSWCF = 2\n  DNR   CH  CF\n  0.0 12.0 1.0\n180.0 12.0 1.0\n366.0 12.0 1.0\n\nALBEDO = 0.23\nRSC = 100.00\nRSW = 0.00\nTBASE = 0.00\nKDIF = 0.60\nKDIR = 0.75\nSWRD = 2\nRDTB = \n  1.0 10.0\n180.0 40.0\n366.0 40.0\n\nRDI = 10.00\nRRI = 1.00\nRDC = 40.00\nSWDMI2RD = 1\nRLWTB = \n 300.0 10.0\n2500.0 40.0\n\nWRTMAX = 3000.00\nSWRDC = 0\nRDCTB = \n0.0 1.0\n1.0 0.0\n\nTDWI = 1000.0\nLAIEM = 0.63\nRGRLAI = 0.007\nSSA = 0.0004\nSPAN = 30.0\nSLATB = \n  1.0 0.0015\n 80.0 0.0015\n300.0 0.0020\n366.0 0.0020\n\nEFF = 0.5\nAMAXTB = \n  1.0 40.0\n 95.0 40.0\n200.0 35.0\n275.0 25.0\n366.0 25.0\n\nTMPFTB = \n 0.0 0.0\n 5.0 0.7\n15.0 1.0\n25.0 1.0\n40.0 0.0\n\nTMNFTB = \n0.0 0.0\n4.0 1.0\n\nCVL = 0.685\nCVR = 0.694\nCVS = 0.662\nQ10 = 2.0\nRML = 0.03\nRMR = 0.015\nRMS = 0.015\nRFSETB = \n  1.0 1.0\n366.0 1.0\n\nFRTB = \n  1.0 0.3\n366.0 0.3\n\nFLTB = \n  1.0 0.6\n366.0 0.6\n\nFSTB = \n  1.0 0.4\n366.0 0.4\n\nPERDL = 0.05\nRDRRTB = \n  1.0 0.00\n180.0 0.02\n366.0 0.02\n\nRDRSTB = \n  1.0 0.00\n180.0 0.02\n366.0 0.02\n\nSWTSUM = 1\nTSUMTEMP = 8.0\nTSUMDEPTH = 10.0\nTSUMTIME = 3.0\nSWOXYGEN = 1\nSWWRTNONOX = 1\nAERATECRIT = 0.5\nHLIM1 = 0.0\nHLIM2U = 1.0\nHLIM2L = -1.0\nSWDROUGHT = 1\nHLIM3H = -200.0\nHLIM3L = -800.0\nHLIM4 = -8000.0\nADCRH = 0.5\nADCRL = 0.1\nSWSALINITY = 0\nSWCOMPENSATE = 0\nSWSTRESSOR = 1\nALPHACRIT = 0.7\nDCRITRTZ = 16.0\nSWINTER = 1\nCOFAB = 0.25\nSCHEDULE = 0\nSEQGRAZMOW = 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\nSWHARVEST = 2\nDATEHARVEST = \n1980-05-06\n1980-05-28\n1980-06-24\n1980-07-24\n1980-08-19\n1980-09-17\n1980-10-23\n1981-04-14\n1981-05-19\n1981-06-16\n1981-07-14\n1981-08-05\n1981-09-08\n1981-10-28\n1982-05-11\n1982-06-01\n1982-07-06\n1982-08-10\n1982-10-13\n1983-05-19\n1983-06-15\n1983-07-13\n1983-08-17\n1983-10-28\n1984-05-15\n1984-06-07\n1984-07-05\n1984-08-02\n1984-09-11\n1984-11-07\n\nSWDMGRZ = 2\nDMGRAZING = 2400.00\nDMGRZTB = \n152.0 2400.0\n244.0 1800.0\n366.0 1800.0\n\nMAXDAYGRZ = 28\nSWLOSSGRZ = 0\nTAGPREST = 700.00\nDEWREST = 850.00\nSWDMMOW = 2\nDMHARVEST = 4200.00\nDAYLASTHARVEST = 289\nDMLASTHARVEST = 2700.00\nDMMOWTB = \n120.0 4700.0\n152.0 3700.0\n182.0 3200.0\n213.0 2700.0\n366.0 2700.0\n\nMAXDAYMOW = 42\nSWLOSSMOW = 0\nMOWREST = 700.00\n DMMOWDELAY  DAYDELAY\n        0.0         2\n     2000.0         3\n     4000.0         4\n\nSWPOTRELMF = 1\nRELMF = 0.90\nSWCO2 = 0\n</pre> In\u00a0[8]: Copied! <pre>ml.lateraldrainage.drafile = load_dra(testcase.get_path(\"grassgrowth\", \"dra\"))\n</pre> ml.lateraldrainage.drafile = load_dra(testcase.get_path(\"grassgrowth\", \"dra\")) In\u00a0[9]: Copied! <pre>ml.meteorology.metfile = psp.components.meteorology.metfile_from_csv(\n    \"260.met\", testcase.get_path(\"grassgrowth\", \"met\")\n)\n</pre> ml.meteorology.metfile = psp.components.meteorology.metfile_from_csv(     \"260.met\", testcase.get_path(\"grassgrowth\", \"met\") ) In\u00a0[10]: Copied! <pre>ml.get_inputs()\n</pre> ml.get_inputs() Out[10]: <pre>{'swp': \"PROJECT = 'pySWAP test - hupselbrook'\\nSWWBA = 0\\nSWEND = 0\\nSWVAP = 0\\nSWBAL = 0\\nSWBLC = 0\\nSWSBA = 0\\nSWATE = 0\\nSWBMA = 0\\nSWDRF = 0\\nSWSWB = 0\\nSWINI = 0\\nSWINC = 0\\nSWCRP = 0\\nSWSTR = 0\\nSWIRG = 0\\nSWCSV = 1\\nSWCSV_TZ = 0\\nPATHWORK = './'\\nPATHATM = './'\\nPATHCROP = './'\\nPATHDRAIN = './'\\nSWSCRE = 0\\nSWERROR = 0\\nTSTART = 1980-01-01\\nTEND = 1984-12-31\\nNPRINTDAY = 1\\nSWMONTH = 0\\nSWYRVAR = 0\\nPERIOD = 1\\nSWRES = 0\\nSWODAT = 0\\nDATEFIX = 31 12\\nOUTFIL = 'result'\\nSWHEADER = 0\\nINLIST_CSV = 'pgrassdm,grassdm,pmowdm,mowdm'\\nSWAFO = 0\\nSWAUN = 0\\nSWDISCRVERT = 0\\nLAT = 52.10\\nSWETR = 0\\nSWDIVIDE = 1\\nSWRAIN = 2\\nSWETSINE = 0\\nMETFIL = '260.met'\\nALT = 1.90\\nALTW = 10.00\\nANGSTROMA = 0.25\\nANGSTROMB = 0.50\\nSWMETDETAIL = 0\\nSWCROP = 1\\nRDS = 200.0\\n CROPSTART    CROPEND  CROPFIL  CROPTYPE\\n1980-01-01 1980-12-31 'grassd'         3\\n1981-01-01 1981-12-31 'grassd'         3\\n1982-01-01 1982-12-31 'grassd'         3\\n1983-01-01 1983-12-31 'grassd'         3\\n1984-01-01 1984-12-31 'grassd'         3\\n\\nSWIRFIX = 0\\nIRGFIL = 'swap'\\nSWINCO = 2\\nGWLI = -75.00\\nSWPONDMX = 0\\nSWRUNON = 0\\nRSRO = 0.500\\nRSROEXP = 1.00\\nPONDMX = 0.20\\nSWCFBS = 0\\nSWREDU = 1\\nCFEVAPPOND = 1.25\\nRSOIL = 600.00\\nCOFREDBL = 0.35\\nRSIGNI = 0.50\\nSWSOPHY = 0\\nSWHYST = 0\\nSWMACRO = 0\\n ISUBLAY  ISOILLAY  HSUBLAY  HCOMP  NCOMP\\n       1         1      5.0    1.0      5\\n       2         1     10.0    2.5      4\\n       3         2     10.0    5.0      2\\n       4         3      5.0    5.0      1\\n       5         3     20.0   10.0      2\\n       6         4     50.0   10.0      5\\n       7         4     20.0   20.0      1\\n       8         5    100.0   20.0      5\\n       9         5    120.0   40.0      3\\n\\n ORES  OSAT   ALFA  NPAR  KSATFIT   LEXP  H_ENPR  KSATEXM  BDENS\\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\\n 0.02  0.40 0.0227 1.548     9.65 -0.983     0.0     9.65 1300.0\\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\\n 0.01  0.36 0.0216 1.540    13.10 -0.520     0.0    13.10 1300.0\\n\\nSWSNOW = 0\\nSWFROST = 0\\nSWKMEAN = 1\\nSWKIMPL = 0\\nDTMIN = 1e-06\\nDTMAX = 0.04\\nGWLCONV = 100.0\\nCRITDEVH1CP = 0.01\\nCRITDEVH2CP = 0.1\\nCRITDEVPONDDT = 0.0001\\nMAXIT = 30\\nMAXBACKTR = 3\\nSWDRA = 1\\nDRFIL = 'swap'\\nSWBBCFILE = 1\\nBBCFIL = 'swap'\\nSWHEA = 1\\nSWCALT = 2\\nSWTOPBHEA = 1\\nSWBOTBHEA = 1\\n PSAND  PSILT  PCLAY  ORGMAT\\n  0.68   0.27   0.05   0.113\\n  0.68   0.28   0.04   0.053\\n  0.77   0.19   0.04   0.018\\n  0.86   0.08   0.06   0.019\\n  0.88   0.09   0.03   0.011\\n\\n   ZH  TSOIL\\n-10.0   15.0\\n-40.0   12.0\\n-70.0   10.0\\n-95.0    9.0\\n\\nSWSOLU = 0\",\n 'dra': 'DRAMET = 3\\nSWDIVD = 1\\nCOFANI = 1.00 1.00 1.00 1.00 1.00\\nSWDISLAY = 0\\nNRLEVS = 1\\nSWINTFL = 0\\nDRARES1 = 750.0\\nINFRES1 = 2000.0\\nSWALLO1 = 1\\nL1 = 500.0\\nZBOTDR1 = -55.0\\nSWDTYP1 = 2\\n   DATOWL1  LEVEL1\\n1980-01-01   -60.0\\n1984-12-31   -60.0\\n',\n 'crop': {'grassd': CropFile(name='grassd', path=None, prep=Preparation(swprep=None, swsow=None, swgerm=None, swharv=None, dvsend=None, zprep=None, hprep=None, maxprepdelay=None, zsow=None, hsow=None, ztempsow=None, tempsow=None, maxsowdelay=None, tsumemeopt=None, tbasem=None, teffmx=None, hdrygerm=None, hwetgerm=None, zgerm=None, agerm=None), cropdev_settings=CropDevelopmentSettingsGrass(wofost_variety=None, swcf=2, cftb=     DNR    CH   CF\n  0    0.0  12.0  1.0\n  1  180.0  12.0  1.0\n  2  366.0  12.0  1.0, albedo=0.23, rsc=100.0, rsw=0.0, tsum1=None, tsum2=None, tbase=0.0, kdif=0.6, kdir=0.75, swrd=2, rdtb=     DNR    RD\n  0    1.0  10.0\n  1  180.0  40.0\n  2  366.0  40.0, rdi=10.0, rri=1.0, rdc=40.0, swdmi2rd=1, rlwtb=       RW    RL\n  0   300.0  10.0\n  1  2500.0  40.0, wrtmax=3000.0, swrdc=0, rdctb=   RRD  RDENS\n  0  0.0    1.0\n  1  1.0    0.0, idsl=None, dtsmtb=None, dlo=None, dlc=None, vernsat=None, vernbase=None, verndvs=None, verntb=None, tdwi=1000.0, laiem=0.63, rgrlai=0.007, spa=None, ssa=0.0004, span=30.0, slatb=     DNR     SLA\n  0    1.0  0.0015\n  1   80.0  0.0015\n  2  300.0  0.0020\n  3  366.0  0.0020, eff=0.5, amaxtb=     DNR  AMAX\n  0    1.0  40.0\n  1   95.0  40.0\n  2  200.0  35.0\n  3  275.0  25.0\n  4  366.0  25.0, tmpftb=   TAVD  TMPF\n  0   0.0   0.0\n  1   5.0   0.7\n  2  15.0   1.0\n  3  25.0   1.0\n  4  40.0   0.0, tmnftb=   TMNR  TMNF\n  0   0.0   0.0\n  1   4.0   1.0, cvo=None, cvl=0.685, cvr=0.694, cvs=0.662, q10=2.0, rml=0.03, rmo=None, rmr=0.015, rms=0.015, rfsetb=     DNR  RFSE\n  0    1.0   1.0\n  1  366.0   1.0, frtb=     DNR   FR\n  0    1.0  0.3\n  1  366.0  0.3, fltb=     DNR   FL\n  0    1.0  0.6\n  1  366.0  0.6, fstb=     DNR   FS\n  0    1.0  0.4\n  1  366.0  0.4, fotb=None, perdl=0.05, rdrrtb=     DNR  RDRR\n  0    1.0  0.00\n  1  180.0  0.02\n  2  366.0  0.02, rdrstb=     DNR  RDRS\n  0    1.0  0.00\n  1  180.0  0.02\n  2  366.0  0.02, swtsum=1, tsumtemp=8.0, tsumdepth=10.0, tsumtime=3.0), oxygenstress=OxygenStress(swoxygen=1, swwrtnonox=1, swoxygentype=None, aeratecrit=0.5, hlim1=0.0, hlim2u=1.0, hlim2l=-1.0, q10_microbial=None, specific_resp_humus=None, srl=None, swrootradius=None, dry_mat_cont_roots=None, air_filled_root_por=None, spec_weight_root_tissue=None, var_a=None, root_radiuso2=None, q10_root=None, f_senes=None, c_mroot=None, mrftb=None, wrtb=None), droughtstress=DroughtStress(swdrought=1, swjarvis=None, alphcrit=None, hlim3h=-200.0, hlim3l=-800.0, hlim4=-8000.0, adcrh=0.5, adcrl=0.1, wiltpoint=None, kstem=None, rxylem=None, rootradius=None, kroot=None, rootcoefa=None, swhydrlift=None, rooteff=None, stephr=None, criterhr=None, taccur=None), saltstress=SaltStress(swsalinity=0, saltmax=None, saltslope=None, salthead=None), compensaterwu=CompensateRWUStress(swcompensate=0, swstressor=1, alphacrit=0.7, dcritrtz=16.0), interception=Interception(swinter=1, cofab=0.25, intertb=None), scheduledirrigation=ScheduledIrrigation(schedule=0, startirr=None, endirr=None, cirrs=None, isuas=None, tcs=None, phfieldcapacity=None, irgthreshold=None, dcrit=None, swcirrthres=None, cirrthres=None, perirrsurp=None, tcsfix=None, irgdayfix=None, dcs=None, dcslim=None, irgdepmin=None, irgdepmax=None, tc1tb=None, tc2tb=None, tc3tb=None, tc4tb=None, tc7tb=None, tc8tb=None, dc1tb=None, dc2tb=None), grasslandmanagement=GrasslandManagement(seqgrazmow=[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], swharvest=2, dateharvest=   DATEHARVEST\n  0   1980-05-06\n  1   1980-05-28\n  2   1980-06-24\n  3   1980-07-24\n  4   1980-08-19\n  5   1980-09-17\n  6   1980-10-23\n  7   1981-04-14\n  8   1981-05-19\n  9   1981-06-16\n  10  1981-07-14\n  11  1981-08-05\n  12  1981-09-08\n  13  1981-10-28\n  14  1982-05-11\n  15  1982-06-01\n  16  1982-07-06\n  17  1982-08-10\n  18  1982-10-13\n  19  1983-05-19\n  20  1983-06-15\n  21  1983-07-13\n  22  1983-08-17\n  23  1983-10-28\n  24  1984-05-15\n  25  1984-06-07\n  26  1984-07-05\n  27  1984-08-02\n  28  1984-09-11\n  29  1984-11-07, swdmgrz=2, dmgrazing=2400.0, dmgrztb=     DNR   DMGRZ\n  0  152.0  2400.0\n  1  244.0  1800.0\n  2  366.0  1800.0, maxdaygrz=28, swlossgrz=0, tagprest=700.0, dewrest=850.0, lsda=None, lsdb=None, swdmmow=2, dmharvest=4200.0, daylastharvest=289, dmlastharvest=2700.0, dmmowtb=     DNR   DMMOW\n  0  120.0  4700.0\n  1  152.0  3700.0\n  2  182.0  3200.0\n  3  213.0  2700.0\n  4  366.0  2700.0, maxdaymow=42, swlossmow=0, mowrest=700.0, dmmowdelay=   DMMOWDELAY  DAYDELAY\n  0         0.0         2\n  1      2000.0         3\n  2      4000.0         4, swpotrelmf=1, relmf=0.9), co2correction=CO2Correction(wofost_variety=None, swco2=0, atmofil=None, co2amaxtb=None, co2efftb=None, co2tratb=None))},\n 'met': \"Station,DD,MM,YYYY,Rad,Tmin,Tmax,Hum,Wind,Rain,ETref,Wet\\n'260',1,1,1980,2530.0,-0.8,2.3,0.594468,2.6,5.8,0.3,0.092\\n'260',2,1,1980,2550.0,-2.1,2.9,0.582676,1.5,0.6,0.3,0.008\\n'260',3,1,1980,800.0,-6.3,0.5,0.470635,2.6,1.3,0.1,0.246\\n'260',4,1,1980,400.0,-0.4,3.8,0.666533,5.1,9.1,0.0,0.4\\n'260',5,1,1980,970.0,3.0,4.9,0.782227,3.6,4.2,0.1,0.279\\n'260',6,1,1980,1010.0,4.0,6.3,0.836957,2.6,6.2,0.1,0.321\\n'260',7,1,1980,1250.0,0.8,4.7,0.725125,2.1,0.3,0.1,0.012\\n'260',8,1,1980,620.0,-0.4,3.1,0.645561,2.6,0.8,0.1,0.025\\n'260',9,1,1980,1230.0,-0.4,1.0,0.573076,3.1,0.0,0.1,0.0\\n'260',10,1,1980,1310.0,-1.7,0.5,0.472431,2.6,0.0,0.1,0.0\\n'260',11,1,1980,520.0,-6.0,-1.4,0.365004,3.1,0.0,0.0,0.0\\n'260',12,1,1980,4880.0,-7.3,-2.7,0.332196,3.6,0.0,0.4,0.0\\n'260',13,1,1980,4630.0,-10.0,-1.8,0.30718,1.5,0.0,0.4,0.0\\n'260',14,1,1980,2080.0,-11.0,-2.7,0.340891,2.1,0.0,0.2,0.0\\n'260',15,1,1980,1620.0,-7.0,-1.8,0.395652,1.5,0.0,0.1,0.0\\n'260',16,1,1980,3080.0,-4.1,-0.1,0.486942,2.6,0.0,0.3,0.0\\n'260',17,1,1980,4410.0,-5.8,-0.7,0.407989,2.6,0.0,0.4,0.0\\n'260',18,1,1980,4340.0,-7.4,-2.0,0.365053,3.1,0.0,0.4,0.0\\n'260',19,1,1980,4130.0,-7.3,3.1,0.403998,2.6,0.0,0.4,0.0\\n'260',20,1,1980,950.0,-4.1,1.6,0.497638,3.1,0.3,0.1,0.067\\n'260',21,1,1980,1370.0,-0.4,4.7,0.615291,6.7,5.6,0.2,0.129\\n'260',22,1,1980,1100.0,2.0,5.3,0.652495,6.2,0.9,0.1,0.108\\n'260',23,1,1980,2020.0,1.8,5.0,0.703739,4.6,1.0,0.2,0.1\\n'260',24,1,1980,1410.0,-0.1,3.4,0.655714,3.6,0.3,0.2,0.008\\n'260',25,1,1980,2120.0,0.4,5.0,0.687573,3.1,2.0,0.2,0.021\\n'260',26,1,1980,3220.0,-1.7,4.2,0.580339,2.6,0.7,0.4,0.012\\n'260',27,1,1980,4640.0,-0.8,4.7,0.572741,2.1,0.5,0.5,0.004\\n'260',28,1,1980,1020.0,-2.7,0.1,0.512409,2.1,3.4,0.1,0.129\\n'260',29,1,1980,1480.0,-0.2,3.2,0.617771,2.1,0.1,0.2,0.008\\n'260',30,1,1980,2390.0,3.0,9.1,0.831843,5.7,0.6,0.3,0.021\\n'260',31,1,1980,3210.0,2.9,10.7,0.821718,4.1,23.9,0.4,0.354\\n'260',1,2,1980,5150.0,-0.9,4.0,0.461131,3.6,0.5,0.6,0.021\\n'260',2,2,1980,560.0,-0.8,6.5,0.676299,4.1,10.9,0.1,0.337\\n'260',3,2,1980,790.0,2.1,6.1,0.716626,3.1,9.4,0.1,0.258\\n'260',4,2,1980,2610.0,0.3,4.3,0.614241,3.6,5.3,0.3,0.175\\n'260',5,2,1980,980.0,4.3,8.6,0.90567,5.1,15.7,0.1,0.408\\n'260',6,2,1980,870.0,6.0,7.8,0.949671,3.1,4.7,0.1,0.279\\n'260',7,2,1980,1600.0,3.3,8.9,0.837248,3.6,1.2,0.2,0.067\\n'260',8,2,1980,2390.0,3.2,10.6,0.866174,3.6,0.5,0.3,0.025\\n'260',9,2,1980,5040.0,5.8,12.3,0.847187,3.1,0.0,0.7,0.0\\n'260',10,2,1980,3170.0,3.2,9.2,0.780156,3.6,0.4,0.4,0.017\\n'260',11,2,1980,2340.0,1.3,8.8,0.781878,2.6,0.4,0.3,0.012\\n'260',12,2,1980,1500.0,1.0,7.2,0.78542,1.5,0.0,0.2,0.0\\n'260',13,2,1980,3820.0,0.7,8.0,0.703234,1.5,0.0,0.5,0.0\\n'260',14,2,1980,4200.0,-2.1,5.2,0.599699,1.5,0.0,0.5,0.0\\n'260',15,2,1980,2020.0,2.9,7.1,0.796119,3.1,3.3,0.3,0.267\\n'260',16,2,1980,2930.0,5.1,7.5,0.875449,2.1,0.0,0.4,0.0\\n'260',17,2,1980,4400.0,1.8,9.8,0.849719,1.5,0.0,0.6,0.0\\n'260',18,2,1980,6250.0,1.9,8.9,0.795926,2.6,0.0,0.8,0.0\\n'260',19,2,1980,8990.0,-0.6,6.6,0.554511,4.1,0.0,1.1,0.0\\n'260',20,2,1980,8540.0,-0.3,8.9,0.567567,4.1,0.0,1.1,0.0\\n'260',21,2,1980,9460.0,1.4,10.3,0.567178,3.1,0.0,1.2,0.0\\n'260',22,2,1980,9500.0,0.8,11.3,0.570374,3.6,0.0,1.2,0.0\\n'260',23,2,1980,1290.0,3.1,5.7,0.674659,2.1,1.8,0.2,0.183\\n'260',24,2,1980,7310.0,1.3,11.8,0.66564,2.1,0.0,0.9,0.0\\n'260',25,2,1980,4600.0,-0.8,8.9,0.741261,1.0,0.0,0.6,0.0\\n'260',26,2,1980,2290.0,0.8,5.3,0.711121,3.1,0.0,0.3,0.0\\n'260',27,2,1980,2910.0,0.8,4.5,0.585121,3.6,0.0,0.3,0.0\\n'260',28,2,1980,2830.0,1.9,5.3,0.624483,2.1,0.0,0.3,0.0\\n'260',29,2,1980,3330.0,4.2,8.2,0.820008,2.6,0.0,0.4,0.0\\n'260',1,3,1980,8490.0,-0.2,10.7,0.635956,2.6,0.0,1.1,0.0\\n'260',2,3,1980,3670.0,-0.6,8.0,0.616108,3.1,0.1,0.4,0.004\\n'260',3,3,1980,7870.0,-1.4,7.1,0.503969,3.1,0.7,0.9,0.012\\n'260',4,3,1980,2440.0,0.5,6.7,0.631057,2.1,0.4,0.3,0.008\\n'260',5,3,1980,9320.0,-1.0,8.3,0.573818,3.1,0.0,1.1,0.0\\n'260',6,3,1980,1950.0,1.6,7.1,0.695715,4.6,7.3,0.2,0.346\\n'260',7,3,1980,2380.0,4.7,8.5,0.826216,5.7,9.1,0.3,0.242\\n'260',8,3,1980,4610.0,0.8,8.9,0.693481,2.6,2.6,0.6,0.104\\n'260',9,3,1980,3850.0,-1.2,6.2,0.667618,1.0,0.0,0.5,0.0\\n'260',10,3,1980,6090.0,4.0,8.6,0.757588,2.1,2.8,0.8,0.25\\n'260',11,3,1980,2350.0,2.6,7.6,0.79933,1.0,0.4,0.3,0.058\\n'260',12,3,1980,1630.0,2.5,7.4,0.803274,4.6,16.0,0.2,0.517\\n'260',13,3,1980,4450.0,5.8,8.6,0.883074,3.1,12.2,0.6,0.242\\n'260',14,3,1980,5000.0,2.0,6.5,0.670443,5.7,0.5,0.6,0.012\\n'260',15,3,1980,2470.0,1.0,3.5,0.612193,5.7,0.0,0.3,0.0\\n'260',16,3,1980,3080.0,2.2,5.0,0.667907,3.1,0.0,0.4,0.0\\n'260',17,3,1980,5930.0,3.9,7.6,0.713596,2.1,0.0,0.8,0.0\\n'260',18,3,1980,9010.0,1.6,7.1,0.575686,5.1,0.0,1.1,0.0\\n'260',19,3,1980,5160.0,-1.4,2.7,0.450271,7.7,0.0,0.6,0.0\\n'260',20,3,1980,15050.0,-4.0,3.7,0.339831,6.2,0.0,1.6,0.0\\n'260',21,3,1980,8560.0,-4.1,1.5,0.413882,4.1,0.1,0.9,0.004\\n'260',22,3,1980,5970.0,-2.8,4.8,0.451789,2.1,0.5,0.7,0.021\\n'260',23,3,1980,9690.0,-3.7,7.7,0.561069,2.6,0.0,1.1,0.0\\n'260',24,3,1980,13810.0,-2.3,11.7,0.599092,2.6,0.0,1.8,0.0\\n'260',25,3,1980,11950.0,1.0,14.6,0.619392,2.6,1.3,1.6,0.033\\n'260',26,3,1980,9010.0,2.8,11.0,0.779573,2.6,0.0,1.2,0.0\\n'260',27,3,1980,3990.0,5.9,14.4,0.983585,4.6,7.7,0.6,0.2\\n'260',28,3,1980,4400.0,7.5,15.0,0.994046,4.6,2.1,0.6,0.067\\n'260',29,3,1980,2000.0,5.6,8.9,0.799307,7.7,7.0,0.3,0.329\\n'260',30,3,1980,9950.0,1.9,10.6,0.703471,4.1,0.0,1.3,0.0\\n'260',31,3,1980,11360.0,0.4,11.8,0.679333,2.6,2.8,1.5,0.125\\n'260',1,4,1980,3980.0,6.1,12.8,1.107124,3.6,26.3,0.6,0.475\\n'260',2,4,1980,10120.0,4.6,9.5,0.802402,5.1,5.0,1.4,0.133\\n'260',3,4,1980,8250.0,2.6,8.4,0.682357,4.6,1.1,1.1,0.029\\n'260',4,4,1980,12850.0,3.1,8.4,0.656319,4.1,0.0,1.6,0.0\\n'260',5,4,1980,18010.0,0.4,11.1,0.59884,2.1,0.0,2.3,0.0\\n'260',6,4,1980,14220.0,4.0,11.3,0.735908,2.1,0.0,1.9,0.0\\n'260',7,4,1980,5930.0,2.0,9.6,0.752212,1.5,0.1,0.7,0.004\\n'260',8,4,1980,6710.0,1.9,7.6,0.687712,3.6,1.8,0.9,0.046\\n'260',9,4,1980,10520.0,2.7,8.0,0.654377,3.1,0.4,1.3,0.021\\n'260',10,4,1980,11900.0,1.3,10.2,0.695954,2.1,0.1,1.6,0.004\\n'260',11,4,1980,13230.0,-1.0,12.1,0.638217,1.0,0.0,1.7,0.0\\n'260',12,4,1980,20350.0,2.1,15.5,0.633249,3.6,0.0,3.0,0.0\\n'260',13,4,1980,19890.0,7.5,19.8,0.773397,3.6,0.0,3.2,0.0\\n'260',14,4,1980,19750.0,7.1,21.9,0.845323,1.5,0.0,3.2,0.0\\n'260',15,4,1980,19390.0,6.8,22.3,0.720615,1.5,0.0,3.2,0.0\\n'260',16,4,1980,19290.0,5.4,21.7,0.827961,1.5,0.0,3.1,0.0\\n'260',17,4,1980,18500.0,6.9,18.0,0.952317,3.6,0.0,2.8,0.0\\n'260',18,4,1980,3740.0,3.9,9.6,0.871936,3.1,1.5,0.5,0.379\\n'260',19,4,1980,11440.0,1.3,9.6,0.624324,5.7,2.4,1.5,0.062\\n'260',20,4,1980,13030.0,0.9,9.1,0.651406,5.1,5.9,1.7,0.129\\n'260',21,4,1980,12930.0,3.2,9.6,0.723285,3.1,1.2,1.7,0.05\\n'260',22,4,1980,7670.0,2.2,8.7,0.608987,2.1,0.0,1.0,0.0\\n'260',23,4,1980,17690.0,-1.0,10.9,0.623762,2.6,0.0,2.3,0.0\\n'260',24,4,1980,13640.0,4.6,11.8,0.833575,4.6,0.1,1.9,0.012\\n'260',25,4,1980,3250.0,4.2,8.0,0.789099,3.6,1.5,0.4,0.104\\n'260',26,4,1980,7690.0,3.0,11.1,0.784749,2.1,3.7,1.0,0.263\\n'260',27,4,1980,17510.0,1.6,14.8,0.797396,2.1,0.8,2.4,0.021\\n'260',28,4,1980,2960.0,3.4,8.8,0.802822,2.1,0.0,0.4,0.0\\n'260',29,4,1980,6770.0,4.8,10.1,0.852297,1.5,1.7,0.9,0.083\\n'260',30,4,1980,19370.0,5.4,17.5,0.863997,3.1,0.0,3.0,0.0\\n'260',1,5,1980,19770.0,6.8,18.9,0.908205,5.1,0.0,3.1,0.0\\n'260',2,5,1980,22710.0,6.8,15.0,0.871894,6.2,0.0,3.4,0.0\\n'260',3,5,1980,22640.0,3.6,13.0,0.580652,5.7,0.0,3.2,0.0\\n'260',4,5,1980,23870.0,3.2,13.7,0.531528,4.6,0.0,3.4,0.0\\n'260',5,5,1980,25480.0,2.3,12.3,0.524302,4.1,0.0,3.5,0.0\\n'260',6,5,1980,15280.0,3.2,16.9,0.63667,3.1,0.6,2.2,0.017\\n'260',7,5,1980,10750.0,7.3,13.2,0.971368,2.6,0.0,1.6,0.0\\n'260',8,5,1980,6510.0,4.1,10.0,0.722616,2.6,0.0,0.9,0.0\\n'260',9,5,1980,23220.0,3.3,12.9,0.701874,3.1,0.0,3.3,0.0\\n'260',10,5,1980,26710.0,0.6,18.2,0.62063,2.6,0.0,4.0,0.0\\n'260',11,5,1980,26280.0,5.9,21.0,0.614183,3.6,0.0,4.3,0.0\\n'260',12,5,1980,25520.0,8.4,23.2,0.731126,4.6,0.0,4.4,0.0\\n'260',13,5,1980,25950.0,9.3,21.2,0.581549,5.7,0.0,4.3,0.0\\n'260',14,5,1980,26720.0,8.5,20.1,0.58821,5.7,0.0,4.4,0.0\\n'260',15,5,1980,25930.0,5.5,18.7,0.782108,4.1,0.0,4.1,0.0\\n'260',16,5,1980,21360.0,7.7,18.7,0.806426,2.6,0.0,3.4,0.0\\n'260',17,5,1980,20100.0,6.4,19.7,0.803554,2.6,0.0,3.3,0.0\\n'260',18,5,1980,21310.0,10.9,23.2,1.014525,2.6,0.0,3.6,0.0\\n'260',19,5,1980,25860.0,8.6,23.5,0.965096,2.1,0.0,4.4,0.0\\n'260',20,5,1980,17920.0,8.2,24.0,1.031771,2.1,0.0,3.0,0.0\\n'260',21,5,1980,24480.0,9.0,21.2,1.143842,4.1,0.0,4.0,0.0\\n'260',22,5,1980,26520.0,5.7,14.5,0.702974,5.1,0.0,3.9,0.0\\n'260',23,5,1980,14350.0,4.2,13.5,0.745136,2.6,0.0,2.1,0.0\\n'260',24,5,1980,7940.0,9.5,13.3,1.092684,2.6,0.3,1.2,0.008\\n'260',25,5,1980,11970.0,7.4,14.8,1.025957,1.5,0.3,1.8,0.008\\n'260',26,5,1980,20520.0,7.9,19.3,0.953877,2.1,0.0,3.3,0.0\\n'260',27,5,1980,11660.0,8.8,20.1,1.003338,1.0,0.0,1.9,0.0\\n'260',28,5,1980,14370.0,9.2,19.9,1.081442,1.0,1.5,2.3,0.046\\n'260',29,5,1980,9790.0,7.1,16.5,1.080558,1.5,1.7,1.5,0.208\\n'260',30,5,1980,23100.0,4.6,15.2,0.770076,2.6,0.0,3.5,0.0\\n'260',31,5,1980,12080.0,4.1,17.3,0.797971,2.1,8.4,1.8,0.258\\n'260',1,6,1980,18090.0,8.7,18.4,0.931548,3.1,1.2,2.8,0.083\\n'260',2,6,1980,26610.0,7.0,19.9,0.95728,2.6,0.0,4.3,0.0\\n'260',3,6,1980,6900.0,7.9,18.3,1.326509,1.5,1.6,1.1,0.146\\n'260',4,6,1980,17160.0,8.6,22.7,1.361392,1.5,0.0,2.9,0.0\\n'260',5,6,1980,25850.0,11.8,26.8,1.287975,1.5,0.0,4.7,0.0\\n'260',6,6,1980,22820.0,12.1,27.0,1.34433,2.1,0.0,4.1,0.0\\n'260',7,6,1980,16680.0,10.3,20.1,1.166047,2.6,1.0,2.8,0.033\\n'260',8,6,1980,18760.0,7.2,20.2,1.055709,1.5,0.0,3.1,0.0\\n'260',9,6,1980,18130.0,10.0,24.1,1.060852,3.1,0.0,3.2,0.0\\n'260',10,6,1980,11430.0,14.7,20.3,1.507874,1.5,0.3,2.0,0.021\\n'260',11,6,1980,16690.0,12.9,22.6,1.489491,2.1,1.0,2.9,0.037\\n'260',12,6,1980,24420.0,10.3,23.5,1.236444,2.1,0.0,4.3,0.0\\n'260',13,6,1980,22090.0,15.5,27.7,1.509887,2.6,0.0,4.1,0.0\\n'260',14,6,1980,15930.0,15.9,29.1,1.50416,4.1,0.8,3.0,0.017\\n'260',15,6,1980,16770.0,12.3,22.1,1.263727,3.1,4.7,2.9,0.021\\n'260',16,6,1980,7140.0,11.0,19.8,1.456535,2.6,2.8,1.2,0.046\\n'260',17,6,1980,10400.0,11.1,18.3,1.282401,2.6,8.2,1.7,0.112\\n'260',18,6,1980,15060.0,9.7,18.6,1.188476,2.1,0.4,2.5,0.012\\n'260',19,6,1980,5870.0,9.6,16.8,1.17291,3.6,3.2,0.9,0.046\\n'260',20,6,1980,11850.0,9.6,15.1,1.051015,4.6,13.6,1.8,0.125\\n'260',21,6,1980,14960.0,10.5,17.4,1.103553,4.1,2.9,2.4,0.037\\n'260',22,6,1980,13090.0,9.4,17.3,1.14091,2.6,21.3,2.0,0.108\\n'260',23,6,1980,13870.0,9.3,15.5,1.13176,3.1,3.8,2.1,0.067\\n'260',24,6,1980,11570.0,10.3,16.2,1.159758,3.1,4.1,1.8,0.108\\n'260',25,6,1980,20780.0,8.3,17.7,1.047491,2.6,3.1,3.3,0.058\\n'260',26,6,1980,14850.0,7.0,18.3,1.122382,1.5,7.0,2.3,0.029\\n'260',27,6,1980,17190.0,9.1,16.5,1.024097,2.6,1.1,2.7,0.029\\n'260',28,6,1980,7650.0,9.5,13.2,1.175303,2.6,5.8,1.2,0.292\\n'260',29,6,1980,16410.0,9.9,16.1,1.125314,3.6,3.3,2.6,0.088\\n'260',30,6,1980,17460.0,11.8,18.1,1.297889,3.1,1.2,2.9,0.1\\n'260',1,7,1980,11080.0,11.6,16.6,1.276482,2.6,14.5,1.8,0.383\\n'260',2,7,1980,12770.0,12.5,18.9,1.496481,3.6,5.0,2.1,0.054\\n'260',3,7,1980,11050.0,11.7,17.4,1.314365,2.6,0.0,1.8,0.0\\n'260',4,7,1980,9070.0,8.6,16.8,1.186878,1.5,0.7,1.5,0.062\\n'260',5,7,1980,13760.0,11.4,18.2,1.183736,3.1,0.6,2.3,0.079\\n'260',6,7,1980,20300.0,10.2,20.8,1.168613,1.5,10.6,3.4,0.1\\n'260',7,7,1980,8410.0,13.7,18.2,1.442248,3.1,21.0,1.4,0.196\\n'260',8,7,1980,6830.0,13.7,17.0,1.546988,2.1,3.8,1.1,0.104\\n'260',9,7,1980,7510.0,13.6,17.1,1.537405,2.1,14.6,1.2,0.171\\n'260',10,7,1980,7630.0,13.5,17.7,1.583315,2.6,10.6,1.3,0.104\\n'260',11,7,1980,7790.0,12.6,16.0,1.227637,2.6,0.2,1.2,0.012\\n'260',12,7,1980,13910.0,11.6,16.9,1.233323,3.1,6.2,2.2,0.138\\n'260',13,7,1980,14460.0,10.1,17.5,1.167199,2.1,13.6,2.3,0.192\\n'260',14,7,1980,7530.0,10.3,18.4,1.363307,3.6,17.8,1.2,0.333\\n'260',15,7,1980,20000.0,12.3,18.1,1.228541,3.1,0.0,3.3,0.0\\n'260',16,7,1980,12810.0,9.0,15.3,1.070015,3.1,0.8,2.0,0.029\\n'260',17,7,1980,12760.0,7.9,17.3,1.157034,2.6,0.1,2.0,0.004\\n'260',18,7,1980,9650.0,12.8,18.9,1.353776,4.1,3.7,1.6,0.117\\n'260',19,7,1980,3710.0,14.3,16.9,1.581473,4.6,10.0,0.6,0.408\\n'260',20,7,1980,4440.0,12.3,16.6,1.385651,3.1,8.5,0.7,0.292\\n'260',21,7,1980,5700.0,7.8,15.1,1.039317,4.1,2.8,0.9,0.088\\n'260',22,7,1980,21820.0,5.4,20.3,0.985844,1.0,0.0,3.5,0.0\\n'260',23,7,1980,25130.0,9.9,23.5,1.16459,1.5,0.0,4.4,0.0\\n'260',24,7,1980,20800.0,11.0,24.3,1.283288,2.1,0.0,3.6,0.0\\n'260',25,7,1980,23430.0,12.2,26.8,1.471299,2.6,0.0,4.3,0.0\\n'260',26,7,1980,21920.0,17.2,29.2,1.81701,2.6,0.2,4.2,0.012\\n'260',27,7,1980,15000.0,14.5,24.5,1.71498,1.5,0.0,2.7,0.0\\n'260',28,7,1980,19620.0,13.6,24.3,1.682037,2.6,0.0,3.6,0.0\\n'260',29,7,1980,21240.0,17.0,26.9,1.904841,3.6,0.0,4.0,0.0\\n'260',30,7,1980,7230.0,12.6,20.3,1.419566,2.6,1.4,1.3,0.062\\n'260',31,7,1980,20380.0,10.6,24.2,1.284318,1.0,0.0,3.6,0.0\\n'260',1,8,1980,15970.0,14.5,25.3,1.411618,2.1,0.2,2.9,0.017\\n'260',2,8,1980,20550.0,13.2,27.7,1.582703,2.1,0.0,3.9,0.0\\n'260',3,8,1980,16720.0,15.9,29.3,1.897687,2.6,0.0,3.2,0.0\\n'260',4,8,1980,12520.0,13.9,23.5,1.644097,3.6,1.0,2.2,0.075\\n'260',5,8,1980,14570.0,16.9,21.2,1.546997,5.1,1.3,2.6,0.096\\n'260',6,8,1980,13640.0,16.3,21.7,1.527556,4.6,0.0,2.4,0.0\\n'260',7,8,1980,10240.0,15.1,22.7,1.761864,2.1,0.0,1.8,0.0\\n'260',8,8,1980,13790.0,10.1,21.9,1.434298,3.1,0.2,2.4,0.012\\n'260',9,8,1980,13190.0,6.8,19.8,1.094558,1.0,0.0,2.2,0.0\\n'260',10,8,1980,16100.0,11.0,21.5,1.289678,1.0,0.0,2.7,0.0\\n'260',11,8,1980,11130.0,13.0,24.0,1.591755,2.6,5.6,2.0,0.204\\n'260',12,8,1980,11560.0,13.7,17.7,1.423181,3.6,9.6,1.9,0.129\\n'260',13,8,1980,11530.0,13.3,19.6,1.58477,2.6,0.1,2.0,0.008\\n'260',14,8,1980,9630.0,15.9,21.7,1.92762,2.1,5.5,1.7,0.088\\n'260',15,8,1980,18310.0,14.5,25.9,1.736495,2.6,12.7,3.3,0.05\\n'260',16,8,1980,8270.0,17.0,22.3,1.989938,1.4,0.0,1.5,0.0\\n'260',17,8,1980,17330.0,15.9,24.2,1.785328,1.0,0.0,3.1,0.0\\n'260',18,8,1980,10150.0,16.1,22.2,1.729877,1.5,0.0,1.8,0.0\\n'260',19,8,1980,13420.0,11.2,20.4,1.35889,2.1,0.0,2.3,0.0\\n'260',20,8,1980,12210.0,14.4,21.5,1.665034,5.1,0.0,2.2,0.0\\n'260',21,8,1980,16250.0,13.5,19.5,1.40018,5.1,3.5,2.8,0.033\\n'260',22,8,1980,11910.0,11.2,16.7,1.172776,3.6,3.2,1.9,0.142\\n'260',23,8,1980,9470.0,10.5,15.7,1.152295,2.6,1.6,1.5,0.058\\n'260',24,8,1980,6110.0,7.9,15.7,1.117903,1.5,1.8,0.9,0.108\\n'260',25,8,1980,18680.0,4.6,19.3,0.948728,1.0,0.0,2.9,0.0\\n'260',26,8,1980,19900.0,8.2,22.3,1.022457,2.1,0.0,3.3,0.0\\n'260',27,8,1980,17450.0,8.3,24.8,1.297927,1.0,0.0,3.0,0.0\\n'260',28,8,1980,5390.0,11.0,19.5,1.452743,2.6,0.0,0.9,0.0\\n'260',29,8,1980,8210.0,15.3,21.1,1.706505,3.1,3.3,1.4,0.213\\n'260',30,8,1980,8100.0,14.0,18.6,1.536143,4.1,11.9,1.4,0.358\\n'260',31,8,1980,6560.0,10.7,17.4,1.289859,3.1,2.6,1.1,0.296\\n'260',1,9,1980,17840.0,8.9,20.1,1.187953,1.5,0.0,2.9,0.0\\n'260',2,9,1980,17650.0,7.3,20.5,1.109139,1.5,0.0,2.9,0.0\\n'260',3,9,1980,18550.0,9.0,22.5,1.222431,1.5,0.0,3.1,0.0\\n'260',4,9,1980,9010.0,10.1,18.8,1.479977,1.5,0.0,1.5,0.0\\n'260',5,9,1980,7930.0,12.1,19.3,1.34107,1.5,4.1,1.3,0.104\\n'260',6,9,1980,14740.0,12.4,20.3,1.360661,2.6,0.2,2.5,0.012\\n'260',7,9,1980,17690.0,11.2,22.5,1.346856,2.1,0.0,3.1,0.0\\n'260',8,9,1980,14750.0,11.5,22.4,1.450557,2.1,2.0,2.5,0.088\\n'260',9,9,1980,13580.0,9.3,17.6,1.147657,2.6,0.4,2.2,0.021\\n'260',10,9,1980,2750.0,11.1,16.8,1.256128,4.6,2.7,0.4,0.104\\n'260',11,9,1980,13760.0,13.1,18.8,1.388847,3.6,9.5,2.3,0.096\\n'260',12,9,1980,7850.0,13.4,19.3,1.398422,5.7,1.3,1.3,0.075\\n'260',13,9,1980,11250.0,12.4,17.3,1.278309,4.1,5.6,1.8,0.15\\n'260',14,9,1980,5260.0,12.3,17.9,1.449602,3.6,10.7,0.9,0.242\\n'260',15,9,1980,7720.0,11.5,18.5,1.399696,1.5,0.0,1.3,0.0\\n'260',16,9,1980,11600.0,10.6,20.4,1.345369,1.5,0.0,1.9,0.0\\n'260',17,9,1980,11500.0,13.2,19.1,1.424899,2.6,1.6,1.9,0.083\\n'260',18,9,1980,13510.0,12.3,20.0,1.318001,1.5,0.0,2.3,0.0\\n'260',19,9,1980,8810.0,13.9,22.8,1.805231,2.1,0.0,1.5,0.0\\n'260',20,9,1980,13310.0,16.0,25.0,1.777938,2.1,0.0,2.4,0.0\\n'260',21,9,1980,6950.0,16.2,21.4,1.72081,1.5,0.0,1.2,0.0\\n'260',22,9,1980,5410.0,12.8,20.8,1.707008,1.0,0.4,0.9,0.008\\n'260',23,9,1980,10190.0,9.9,20.9,1.394747,1.0,0.0,1.7,0.0\\n'260',24,9,1980,3290.0,8.1,17.1,1.319015,1.0,1.1,0.5,0.029\\n'260',25,9,1980,7770.0,6.0,16.4,1.09707,0.5,0.0,1.2,0.0\\n'260',26,9,1980,13120.0,5.5,17.9,1.000881,1.5,0.0,2.0,0.0\\n'260',27,9,1980,9100.0,9.4,17.6,1.338573,1.0,0.2,1.4,0.008\\n'260',28,9,1980,10260.0,11.1,23.1,1.55199,1.0,0.0,1.7,0.0\\n'260',29,9,1980,7150.0,12.4,19.1,1.497749,1.0,0.4,1.2,0.021\\n'260',30,9,1980,10690.0,7.3,18.1,1.061906,2.1,0.4,1.7,0.025\\n'260',1,10,1980,9340.0,4.9,17.4,0.98526,2.6,1.9,1.5,0.088\\n'260',2,10,1980,7130.0,5.1,16.3,1.019128,1.5,0.0,1.1,0.0\\n'260',3,10,1980,10640.0,2.9,16.0,0.89222,1.0,0.0,1.5,0.0\\n'260',4,10,1980,5260.0,5.2,14.9,1.060364,1.5,0.6,0.8,0.021\\n'260',5,10,1980,6420.0,4.4,15.9,0.947018,2.1,0.1,0.9,0.004\\n'260',6,10,1980,3010.0,10.4,15.2,1.326267,5.1,7.4,0.5,0.188\\n'260',7,10,1980,8250.0,7.8,14.8,0.922582,7.2,19.6,1.3,0.3\\n'260',8,10,1980,6870.0,7.2,13.7,0.960621,5.7,5.4,1.0,0.204\\n'260',9,10,1980,6670.0,4.7,13.0,0.871113,3.1,2.5,0.9,0.042\\n'260',10,10,1980,9540.0,6.0,12.6,0.901715,3.1,0.0,1.3,0.0\\n'260',11,10,1980,3140.0,6.1,10.3,0.802655,6.2,0.0,0.4,0.0\\n'260',12,10,1980,10590.0,5.3,12.5,0.868517,3.1,0.0,1.5,0.0\\n'260',13,10,1980,9820.0,1.3,14.2,0.72085,0.5,0.0,1.3,0.0\\n'260',14,10,1980,7200.0,0.1,13.3,0.736791,0.5,0.0,0.9,0.0\\n'260',15,10,1980,6220.0,-0.2,12.7,0.764925,0.5,0.0,0.8,0.0\\n'260',16,10,1980,3910.0,4.6,14.1,1.027067,3.1,1.9,0.6,0.133\\n'260',17,10,1980,1920.0,10.0,13.0,1.238254,3.6,1.2,0.3,0.163\\n'260',18,10,1980,5480.0,5.4,12.2,0.924226,3.6,2.7,0.8,0.075\\n'260',19,10,1980,5430.0,1.7,10.5,0.794951,3.6,9.8,0.7,0.267\\n'260',20,10,1980,5480.0,0.1,11.6,0.724936,1.5,0.2,0.7,0.012\\n'260',21,10,1980,4760.0,7.6,13.0,1.07771,2.6,0.0,0.7,0.0\\n'260',22,10,1980,3090.0,6.2,14.3,1.017453,2.6,0.8,0.5,0.054\\n'260',23,10,1980,4870.0,9.9,13.9,1.139533,5.1,3.5,0.8,0.096\\n'260',24,10,1980,6160.0,8.4,13.3,0.972078,4.1,2.2,0.9,0.054\\n'260',25,10,1980,5140.0,3.0,12.1,0.844272,2.1,5.2,0.7,0.104\\n'260',26,10,1980,4240.0,3.7,11.1,0.888337,2.6,2.6,0.6,0.163\\n'260',27,10,1980,2340.0,10.2,17.7,1.430091,5.7,1.6,0.4,0.104\\n'260',28,10,1980,3440.0,10.5,18.1,1.401037,4.6,10.8,0.6,0.196\\n'260',29,10,1980,2470.0,8.3,12.9,1.040871,4.6,4.5,0.4,0.054\\n'260',30,10,1980,6810.0,0.9,12.3,0.698569,1.5,0.4,0.9,0.017\\n'260',31,10,1980,6980.0,-0.1,9.5,0.798743,2.1,0.0,0.9,0.0\\n'260',1,11,1980,7150.0,-0.8,5.8,0.462726,4.1,0.0,0.8,0.0\\n'260',2,11,1980,7830.0,-3.8,1.5,0.364649,5.1,0.0,0.8,0.0\\n'260',3,11,1980,7080.0,-5.4,-0.9,0.34644,4.6,0.0,0.6,0.0\\n'260',4,11,1980,3070.0,-6.2,0.7,0.380501,3.1,0.1,0.3,0.042\\n'260',5,11,1980,5830.0,-4.0,1.4,0.360711,6.2,0.0,0.6,0.0\\n'260',6,11,1980,1290.0,-1.2,0.7,0.497095,5.7,1.0,0.1,0.229\\n'260',7,11,1980,2710.0,-0.6,0.6,0.577292,2.1,8.8,0.3,0.629\\n'260',8,11,1980,5860.0,-1.2,2.2,0.530597,1.5,0.0,0.6,0.0\\n'260',9,11,1980,6150.0,-3.1,7.6,0.552019,1.0,0.0,0.7,0.0\\n'260',10,11,1980,3340.0,-1.1,6.7,0.625923,1.0,0.0,0.4,0.0\\n'260',11,11,1980,1430.0,2.6,5.8,0.692005,3.6,7.2,0.2,0.183\\n'260',12,11,1980,4290.0,1.1,8.6,0.707566,2.1,3.2,0.5,0.079\\n'260',13,11,1980,2130.0,0.1,7.8,0.731419,3.1,1.2,0.3,0.021\\n'260',14,11,1980,1430.0,5.3,8.2,0.811124,5.7,6.5,0.2,0.367\\n'260',15,11,1980,470.0,6.4,14.4,1.17169,6.7,15.5,0.1,0.746\\n'260',16,11,1980,1270.0,10.3,13.7,1.261405,6.2,1.3,0.2,0.067\\n'260',17,11,1980,1830.0,10.2,14.9,1.207877,6.7,2.1,0.3,0.2\\n'260',18,11,1980,2360.0,6.7,12.2,0.776787,7.7,1.2,0.3,0.008\\n'260',19,11,1980,1780.0,3.9,10.8,0.834527,3.6,3.6,0.2,0.225\\n'260',20,11,1980,3920.0,8.4,12.6,1.008661,4.1,0.0,0.6,0.0\\n'260',21,11,1980,2260.0,10.9,12.6,1.115932,6.2,0.0,0.3,0.0\\n'260',22,11,1980,780.0,10.4,13.2,1.147957,6.2,7.3,0.1,0.2\\n'260',23,11,1980,600.0,12.1,14.4,1.22002,5.7,0.2,0.1,0.008\\n'260',24,11,1980,1060.0,12.2,14.4,1.355894,5.1,0.4,0.2,0.025\\n'260',25,11,1980,1820.0,6.5,12.2,0.987887,3.1,0.2,0.3,0.008\\n'260',26,11,1980,2760.0,-1.0,7.2,0.584549,2.1,0.9,0.3,0.012\\n'260',27,11,1980,1130.0,-0.9,4.9,0.602311,4.1,5.3,0.1,0.104\\n'260',28,11,1980,2330.0,0.8,5.6,0.607607,4.1,16.1,0.3,0.371\\n'260',29,11,1980,2360.0,-0.2,3.9,0.460808,5.7,0.6,0.3,0.037\\n'260',30,11,1980,4250.0,-3.7,0.4,0.374493,4.6,0.0,0.4,0.0\\n'260',1,12,1980,4290.0,-7.0,2.1,0.354498,1.5,0.0,0.4,0.0\\n'260',2,12,1980,670.0,-0.7,3.5,0.562233,3.6,3.8,0.1,0.092\\n'260',3,12,1980,3790.0,-0.4,4.3,0.493001,3.1,0.6,0.4,0.012\\n'260',4,12,1980,2430.0,-1.0,4.1,0.530181,2.6,5.7,0.3,0.25\\n'260',5,12,1980,400.0,-0.7,7.3,0.678948,3.6,9.1,0.0,0.242\\n'260',6,12,1980,2800.0,-4.0,3.7,0.46432,3.6,2.6,0.3,0.075\\n'260',7,12,1980,2790.0,-11.0,-0.3,0.366025,1.5,5.7,0.3,0.088\\n'260',8,12,1980,3530.0,-8.9,2.8,0.386769,1.5,0.0,0.3,0.0\\n'260',9,12,1980,2460.0,-3.1,0.8,0.380474,6.2,0.0,0.3,0.0\\n'260',10,12,1980,1620.0,-1.7,5.6,0.519218,6.7,0.0,0.2,0.0\\n'260',11,12,1980,270.0,5.4,8.5,0.870002,6.2,3.3,0.0,0.2\\n'260',12,12,1980,510.0,4.7,7.5,0.798814,3.6,0.0,0.1,0.0\\n'260',13,12,1980,340.0,5.2,10.8,0.821416,6.2,2.0,0.0,0.092\\n'260',14,12,1980,690.0,6.5,12.1,0.986608,5.7,3.6,0.1,0.246\\n'260',15,12,1980,3230.0,4.4,8.7,0.765967,4.6,6.0,0.4,0.058\\n'260',16,12,1980,3470.0,1.4,7.8,0.686151,2.6,2.6,0.4,0.054\\n'260',17,12,1980,1570.0,0.9,5.0,0.616103,6.2,13.5,0.2,0.35\\n'260',18,12,1980,1940.0,1.6,6.0,0.650812,3.1,9.0,0.2,0.229\\n'260',19,12,1980,1230.0,0.2,2.3,0.583766,4.1,0.6,0.1,0.029\\n'260',20,12,1980,640.0,-0.3,2.8,0.578952,4.6,7.5,0.1,0.233\\n'260',21,12,1980,780.0,0.3,4.3,0.645375,2.1,4.4,0.1,0.104\\n'260',22,12,1980,910.0,-0.5,8.0,0.719576,3.1,0.3,0.1,0.012\\n'260',23,12,1980,980.0,7.2,11.3,1.044889,4.6,2.5,0.1,0.062\\n'260',24,12,1980,990.0,8.1,11.5,0.967636,6.2,0.0,0.1,0.0\\n'260',25,12,1980,2020.0,3.4,9.9,0.738919,5.1,2.3,0.3,0.096\\n'260',26,12,1980,3080.0,1.4,6.3,0.645067,3.6,1.1,0.4,0.029\\n'260',27,12,1980,3700.0,-2.9,5.3,0.556971,1.5,1.2,0.4,0.033\\n'260',28,12,1980,1380.0,-3.6,4.1,0.565755,3.6,0.6,0.2,0.071\\n'260',29,12,1980,350.0,4.1,8.1,0.838572,4.1,0.1,0.0,0.042\\n'260',30,12,1980,580.0,7.0,8.4,0.917826,4.6,0.0,0.1,0.0\\n'260',31,12,1980,530.0,6.0,9.1,0.83333,7.7,0.0,0.1,0.0\\n'260',1,1,1981,2300.0,0.7,8.0,0.652809,6.2,5.7,0.3,0.108\\n'260',2,1,1981,290.0,3.4,8.4,0.854375,5.7,20.1,0.0,0.646\\n'260',3,1,1981,1520.0,3.8,10.4,0.780491,7.7,7.5,0.2,0.121\\n'260',4,1,1981,2100.0,0.3,6.3,0.641691,4.6,3.7,0.3,0.112\\n'260',5,1,1981,3180.0,0.2,4.5,0.588083,2.6,0.6,0.4,0.05\\n'260',6,1,1981,2600.0,-2.4,2.3,0.559837,2.6,4.9,0.3,0.175\\n'260',7,1,1981,4000.0,-3.1,2.9,0.518952,1.5,0.0,0.4,0.0\\n'260',8,1,1981,870.0,-4.0,2.7,0.558661,2.6,0.7,0.1,0.037\\n'260',9,1,1981,1140.0,2.7,7.0,0.821728,3.6,11.0,0.1,0.554\\n'260',10,1,1981,2960.0,1.1,4.9,0.627301,3.6,1.5,0.3,0.125\\n'260',11,1,1981,4620.0,-3.6,3.6,0.514014,2.1,0.0,0.5,0.0\\n'260',12,1,1981,570.0,-3.5,1.3,0.525379,4.1,10.0,0.1,0.292\\n'260',13,1,1981,4100.0,-2.5,2.5,0.540424,2.6,1.3,0.4,0.046\\n'260',14,1,1981,380.0,-0.5,7.5,0.69068,6.7,20.1,0.0,0.588\\n'260',15,1,1981,2550.0,-0.9,4.3,0.586273,4.1,7.8,0.3,0.204\\n'260',16,1,1981,2870.0,-2.7,3.7,0.550421,3.1,5.1,0.3,0.254\\n'260',17,1,1981,2110.0,2.3,5.7,0.724184,3.6,1.1,0.3,0.133\\n'260',18,1,1981,3370.0,-0.1,3.0,0.532024,2.6,0.0,0.4,0.0\\n'260',19,1,1981,1410.0,-0.1,6.3,0.665974,5.1,5.4,0.2,0.2\\n'260',20,1,1981,2760.0,-1.1,2.8,0.569424,2.1,1.2,0.3,0.037\\n'260',21,1,1981,2200.0,-1.6,1.6,0.56032,2.6,0.1,0.2,0.004\\n'260',22,1,1981,800.0,1.3,3.8,0.708408,2.1,0.8,0.1,0.183\\n'260',23,1,1981,1010.0,3.8,6.0,0.868497,1.5,0.1,0.1,0.042\\n'260',24,1,1981,570.0,1.7,6.5,0.809946,2.6,1.8,0.1,0.054\\n'260',25,1,1981,1860.0,1.1,6.5,0.742122,2.6,0.0,0.2,0.0\\n'260',26,1,1981,4840.0,-2.4,7.0,0.604089,1.0,2.5,0.6,0.108\\n'260',27,1,1981,970.0,3.3,7.4,0.886436,1.5,1.1,0.1,0.083\\n'260',28,1,1981,1380.0,4.0,6.1,0.849184,1.0,0.0,0.2,0.0\\n'260',29,1,1981,1260.0,3.2,5.3,0.763474,1.0,0.0,0.2,0.0\\n'260',30,1,1981,1130.0,-0.6,4.8,0.657907,1.5,0.0,0.1,0.0\\n'260',31,1,1981,4350.0,0.3,8.3,0.646073,2.1,0.0,0.5,0.0\\n'260',1,2,1981,1590.0,-1.5,5.6,0.682913,2.1,0.0,0.2,0.0\\n'260',2,2,1981,5750.0,-0.4,8.0,0.676887,4.1,0.0,0.7,0.0\\n'260',3,2,1981,3890.0,4.8,9.3,0.822937,5.7,15.9,0.5,0.337\\n'260',4,2,1981,2190.0,0.9,5.4,0.666446,3.1,1.7,0.3,0.138\\n'260',5,2,1981,2210.0,-0.7,4.4,0.582602,2.6,1.6,0.3,0.129\\n'260',6,2,1981,1350.0,3.8,9.4,0.896079,3.6,1.6,0.2,0.079\\n'260',7,2,1981,2200.0,7.6,10.7,1.054377,4.6,0.0,0.3,0.0\\n'260',8,2,1981,1740.0,7.3,9.6,0.974175,4.1,0.6,0.2,0.029\\n'260',9,2,1981,1760.0,5.3,8.3,0.872009,2.6,0.0,0.2,0.0\\n'260',10,2,1981,2630.0,0.4,5.6,0.580976,6.2,5.6,0.3,0.425\\n'260',11,2,1981,5940.0,-2.4,4.2,0.503433,2.1,0.6,0.6,0.046\\n'260',12,2,1981,4490.0,-4.2,3.1,0.521365,1.0,0.1,0.5,0.042\\n'260',13,2,1981,8280.0,-4.1,2.2,0.425851,2.1,0.0,0.8,0.0\\n'260',14,2,1981,7820.0,-6.5,2.3,0.411266,0.5,0.0,0.7,0.0\\n'260',15,2,1981,6550.0,-4.0,3.6,0.499903,0.5,0.0,0.7,0.0\\n'260',16,2,1981,6090.0,-6.1,3.3,0.418109,1.0,0.0,0.6,0.0\\n'260',17,2,1981,2530.0,0.4,3.5,0.619787,2.6,0.0,0.3,0.0\\n'260',18,2,1981,1940.0,-1.7,2.0,0.511833,4.1,0.0,0.2,0.0\\n'260',19,2,1981,2040.0,-1.5,0.8,0.520862,4.1,0.0,0.2,0.0\\n'260',20,2,1981,4460.0,-4.7,-0.2,0.418805,3.6,1.2,0.4,0.208\\n'260',21,2,1981,9030.0,-6.9,-0.3,0.352389,2.1,0.0,0.8,0.0\\n'260',22,2,1981,8450.0,-6.8,1.4,0.367526,3.6,0.0,0.8,0.0\\n'260',23,2,1981,7760.0,-6.4,1.5,0.408589,3.1,0.0,0.7,0.0\\n'260',24,2,1981,3110.0,-4.2,0.1,0.476828,4.1,0.8,0.3,0.129\\n'260',25,2,1981,7660.0,-1.9,3.0,0.515726,2.6,0.0,0.8,0.0\\n'260',26,2,1981,5860.0,-2.3,3.9,0.514083,3.1,0.0,0.6,0.0\\n'260',27,2,1981,10010.0,-2.9,7.4,0.366573,6.2,0.0,1.2,0.0\\n'260',28,2,1981,3430.0,0.0,3.6,0.481141,6.7,8.6,0.4,0.321\\n'260',1,3,1981,7470.0,1.8,8.6,0.798982,3.1,0.1,0.9,0.042\\n'260',2,3,1981,3200.0,4.8,8.5,0.914138,2.6,0.5,0.4,0.088\\n'260',3,3,1981,1990.0,0.2,5.4,0.726965,4.1,1.6,0.2,0.104\\n'260',4,3,1981,5230.0,-0.7,1.9,0.502774,3.1,0.0,0.6,0.0\\n'260',5,3,1981,4760.0,-0.1,5.4,0.570696,2.1,0.9,0.5,0.046\\n'260',6,3,1981,3000.0,1.9,8.3,0.773806,3.1,0.8,0.4,0.037\\n'260',7,3,1981,1270.0,7.8,13.3,1.154763,6.7,4.9,0.2,0.288\\n'260',8,3,1981,2300.0,9.2,14.0,1.205994,6.7,5.3,0.3,0.229\\n'260',9,3,1981,1700.0,8.4,10.9,1.158548,4.6,26.1,0.2,0.888\\n'260',10,3,1981,1180.0,7.9,14.7,1.251997,3.6,15.1,0.2,0.567\\n'260',11,3,1981,1510.0,9.8,14.3,1.261983,7.7,26.3,0.2,0.529\\n'260',12,3,1981,2960.0,8.3,11.2,1.101858,4.1,7.9,0.4,0.213\\n'260',13,3,1981,4900.0,6.9,11.8,0.987798,3.6,8.9,0.7,0.104\\n'260',14,3,1981,2250.0,6.3,8.7,0.935534,3.6,8.7,0.3,0.479\\n'260',15,3,1981,2140.0,3.6,7.5,0.818911,2.1,3.3,0.3,0.267\\n'260',16,3,1981,6580.0,0.1,8.0,0.655491,1.5,3.4,0.8,0.167\\n'260',17,3,1981,9540.0,-1.7,6.4,0.612999,1.0,0.3,1.1,0.017\\n'260',18,3,1981,5800.0,-1.3,6.7,0.611364,3.6,0.8,0.7,0.133\\n'260',19,3,1981,4840.0,6.2,9.5,0.776996,6.7,0.0,0.7,0.0\\n'260',20,3,1981,11390.0,6.1,12.1,0.833138,4.6,0.0,1.6,0.0\\n'260',21,3,1981,9640.0,6.8,15.7,0.950995,5.7,0.2,1.5,0.008\\n'260',22,3,1981,3710.0,2.0,14.2,0.73756,6.2,1.9,0.5,0.083\\n'260',23,3,1981,3210.0,0.4,12.4,0.862513,4.6,6.0,0.4,0.163\\n'260',24,3,1981,6270.0,9.2,12.8,1.034283,5.7,2.5,0.9,0.229\\n'260',25,3,1981,4250.0,11.3,16.6,1.333514,4.1,5.9,0.7,0.238\\n'260',26,3,1981,6520.0,4.6,15.1,0.93065,4.1,1.5,0.9,0.067\\n'260',27,3,1981,17230.0,1.9,15.5,0.665584,3.6,0.0,2.5,0.0\\n'260',28,3,1981,8940.0,8.9,16.1,0.76749,3.1,0.0,1.4,0.0\\n'260',29,3,1981,10300.0,9.5,17.6,0.971689,2.6,0.7,1.6,0.129\\n'260',30,3,1981,6200.0,7.5,15.1,1.072634,2.1,0.7,0.9,0.058\\n'260',31,3,1981,5520.0,6.9,14.0,1.056116,2.6,0.0,0.8,0.0\\n'260',1,4,1981,2660.0,7.8,11.2,1.066669,2.1,0.0,0.4,0.0\\n'260',2,4,1981,3070.0,7.2,9.8,1.001488,1.5,0.1,0.4,0.004\\n'260',3,4,1981,3620.0,7.5,10.5,1.046487,3.1,0.0,0.5,0.0\\n'260',4,4,1981,2500.0,5.5,7.5,0.819162,2.6,0.1,0.3,0.004\\n'260',5,4,1981,8410.0,4.3,9.5,0.784012,2.6,0.0,1.1,0.0\\n'260',6,4,1981,11000.0,2.6,11.3,0.725472,2.6,0.0,1.5,0.0\\n'260',7,4,1981,10170.0,3.6,14.9,0.914377,1.5,0.0,1.5,0.0\\n'260',8,4,1981,11810.0,5.9,15.8,0.804482,1.5,0.0,1.7,0.0\\n'260',9,4,1981,15600.0,4.1,19.1,0.93608,1.0,0.0,2.4,0.0\\n'260',10,4,1981,18370.0,5.0,20.6,0.80791,2.6,0.0,3.0,0.0\\n'260',11,4,1981,16030.0,9.2,20.9,1.132884,3.1,0.0,2.6,0.0\\n'260',12,4,1981,9070.0,8.2,16.1,1.175324,1.5,0.3,1.4,0.012\\n'260',13,4,1981,13700.0,4.2,14.8,0.766097,4.6,0.0,2.0,0.0\\n'260',14,4,1981,21090.0,3.1,18.3,0.645508,3.6,0.0,3.1,0.0\\n'260',15,4,1981,21990.0,4.1,17.2,0.645684,3.6,0.0,3.2,0.0\\n'260',16,4,1981,20650.0,4.7,16.9,0.685016,4.1,0.0,3.0,0.0\\n'260',17,4,1981,20130.0,1.3,10.4,0.478677,4.1,0.0,2.6,0.0\\n'260',18,4,1981,14180.0,0.1,10.4,0.557576,3.1,0.0,1.8,0.0\\n'260',19,4,1981,8800.0,3.9,8.8,0.734759,5.1,2.3,1.1,0.071\\n'260',20,4,1981,19420.0,1.3,11.2,0.578098,4.6,0.0,2.5,0.0\\n'260',21,4,1981,6920.0,0.4,8.2,0.604028,2.6,0.0,0.9,0.0\\n'260',22,4,1981,14060.0,2.0,8.8,0.585844,2.6,0.3,1.8,0.021\\n'260',23,4,1981,18200.0,-3.3,7.6,0.45142,2.1,0.2,2.1,0.004\\n'260',24,4,1981,20150.0,-4.4,9.3,0.382191,3.6,0.0,2.5,0.0\\n'260',25,4,1981,7770.0,4.5,13.5,0.602251,3.1,0.1,1.1,0.004\\n'260',26,4,1981,8120.0,5.3,10.9,0.829095,2.1,0.3,1.1,0.021\\n'260',27,4,1981,16650.0,3.5,13.2,0.775309,4.6,0.0,2.3,0.0\\n'260',28,4,1981,7420.0,0.4,8.1,0.696065,2.6,4.3,0.9,0.492\\n'260',29,4,1981,8540.0,6.6,12.6,0.968785,3.1,0.6,1.2,0.108\\n'260',30,4,1981,2680.0,7.6,10.3,1.05233,3.6,7.5,0.4,0.683\\n'260',1,5,1981,18370.0,2.2,10.4,0.650894,3.6,0.1,2.4,0.004\\n'260',2,5,1981,17900.0,0.8,10.4,0.584942,3.1,0.0,2.3,0.0\\n'260',3,5,1981,13110.0,-2.0,10.3,0.568021,3.6,2.3,1.7,0.071\\n'260',4,5,1981,7520.0,4.2,10.8,0.828071,3.1,8.5,1.0,0.258\\n'260',5,5,1981,7930.0,0.6,9.4,0.680954,3.1,9.1,1.0,0.142\\n'260',6,5,1981,6820.0,1.0,15.3,0.89223,2.6,0.7,1.0,0.083\\n'260',7,5,1981,20210.0,5.0,20.4,0.95147,4.1,0.0,3.3,0.0\\n'260',8,5,1981,7980.0,10.3,17.0,1.246507,2.6,5.4,1.3,0.083\\n'260',9,5,1981,18120.0,11.0,23.1,1.229221,2.1,4.2,3.1,0.029\\n'260',10,5,1981,22810.0,13.2,27.1,1.182875,2.6,0.0,4.2,0.0\\n'260',11,5,1981,23340.0,14.5,25.4,1.34232,3.1,0.0,4.2,0.0\\n'260',12,5,1981,22140.0,13.0,21.5,1.306591,2.1,1.9,3.8,0.008\\n'260',13,5,1981,17840.0,11.0,19.7,1.258024,1.5,0.4,3.0,0.012\\n'260',14,5,1981,8160.0,11.2,15.9,1.203372,1.5,0.6,1.3,0.058\\n'260',15,5,1981,20430.0,10.6,18.8,1.123523,2.1,0.0,3.3,0.0\\n'260',16,5,1981,11310.0,7.8,17.9,1.11798,2.6,2.5,1.8,0.042\\n'260',17,5,1981,18010.0,6.0,15.9,0.914238,2.6,5.1,2.7,0.083\\n'260',18,5,1981,22040.0,4.9,18.1,0.937655,2.1,0.0,3.5,0.0\\n'260',19,5,1981,14020.0,11.6,22.7,1.386911,2.1,0.3,2.4,0.008\\n'260',20,5,1981,22250.0,13.1,27.2,1.339863,2.6,0.0,4.1,0.0\\n'260',21,5,1981,19870.0,13.3,25.6,1.594318,1.5,9.8,3.6,0.125\\n'260',22,5,1981,14310.0,9.1,17.5,1.256357,2.1,17.7,2.3,0.188\\n'260',23,5,1981,11050.0,8.3,17.3,1.206878,3.1,4.6,1.7,0.217\\n'260',24,5,1981,15030.0,8.3,14.1,1.131827,3.1,7.7,2.3,0.125\\n'260',25,5,1981,11560.0,7.2,14.6,1.090907,2.6,4.3,1.7,0.062\\n'260',26,5,1981,16090.0,7.1,16.0,1.034734,2.1,0.4,2.5,0.012\\n'260',27,5,1981,16190.0,5.7,18.6,1.021288,1.5,1.1,2.5,0.071\\n'260',28,5,1981,13950.0,8.9,17.0,1.060856,2.6,2.5,2.1,0.129\\n'260',29,5,1981,19910.0,6.3,18.8,1.08499,1.0,0.0,3.2,0.0\\n'260',30,5,1981,19590.0,12.8,20.9,1.334912,1.5,0.0,3.3,0.0\\n'260',31,5,1981,20680.0,14.2,26.6,1.645541,2.1,6.4,3.7,0.133\\n'260',1,6,1981,22840.0,13.5,24.9,1.560973,1.0,0.0,4.1,0.0\\n'260',2,6,1981,20650.0,14.3,26.0,1.823936,2.1,0.2,3.7,0.004\\n'260',3,6,1981,19360.0,13.6,20.9,1.323424,2.1,0.4,3.3,0.012\\n'260',4,6,1981,24060.0,11.6,18.6,1.073473,3.1,0.0,4.0,0.0\\n'260',5,6,1981,17650.0,11.4,18.4,1.126158,3.1,6.7,2.9,0.25\\n'260',6,6,1981,19160.0,10.8,19.1,1.269482,3.1,0.3,3.2,0.008\\n'260',7,6,1981,16670.0,11.2,18.2,1.165797,2.6,0.2,2.8,0.004\\n'260',8,6,1981,10300.0,14.2,21.0,1.718071,2.6,3.2,1.8,0.067\\n'260',9,6,1981,13860.0,12.8,18.2,1.263964,3.6,0.0,2.3,0.0\\n'260',10,6,1981,18400.0,10.6,17.4,1.048627,4.1,0.0,3.0,0.0\\n'260',11,6,1981,7010.0,10.6,17.4,1.316224,2.6,6.6,1.1,0.246\\n'260',12,6,1981,14530.0,6.2,15.9,0.928694,2.6,0.0,2.3,0.0\\n'260',13,6,1981,25130.0,4.2,20.1,0.843533,2.1,0.0,4.0,0.0\\n'260',14,6,1981,11240.0,13.2,20.9,1.54994,2.1,0.0,2.0,0.0\\n'260',15,6,1981,12850.0,13.6,21.7,1.573156,3.1,0.1,2.2,0.004\\n'260',16,6,1981,17720.0,10.2,16.2,1.007999,3.6,1.0,2.8,0.012\\n'260',17,6,1981,12710.0,9.1,15.2,1.072968,3.1,4.8,1.9,0.142\\n'260',18,6,1981,9030.0,9.2,13.0,0.92724,2.6,0.0,1.4,0.0\\n'260',19,6,1981,19370.0,9.0,16.1,0.990079,1.5,0.0,3.0,0.0\\n'260',20,6,1981,7830.0,9.2,14.8,1.104461,1.5,0.2,1.2,0.033\\n'260',21,6,1981,12580.0,7.2,14.0,0.907589,2.6,0.1,1.9,0.008\\n'260',22,6,1981,18430.0,8.7,18.8,1.168937,3.1,0.0,3.0,0.0\\n'260',23,6,1981,19430.0,8.8,20.9,1.104447,1.5,0.0,3.2,0.0\\n'260',24,6,1981,21390.0,9.2,22.3,1.122192,1.0,0.0,3.6,0.0\\n'260',25,6,1981,11380.0,12.0,17.3,1.375602,2.6,0.0,1.9,0.0\\n'260',26,6,1981,2080.0,11.0,13.0,1.234849,3.1,10.1,0.3,0.413\\n'260',27,6,1981,9510.0,10.8,16.1,1.284355,2.1,0.2,1.5,0.017\\n'260',28,6,1981,2440.0,11.5,12.7,1.347836,3.6,17.1,0.4,0.8\\n'260',29,6,1981,5560.0,9.0,12.6,1.090909,4.1,8.4,0.8,0.421\\n'260',30,6,1981,6090.0,8.6,15.1,1.225891,3.6,1.3,1.0,0.067\\n'260',1,7,1981,11890.0,12.4,18.0,1.375431,3.6,0.0,2.0,0.0\\n'260',2,7,1981,7940.0,12.1,18.4,1.450209,1.5,16.8,1.3,0.233\\n'260',3,7,1981,16570.0,12.0,18.0,1.385706,3.1,0.9,2.7,0.088\\n'260',4,7,1981,15610.0,12.2,19.9,1.344457,3.1,0.8,2.6,0.012\\n'260',5,7,1981,18260.0,12.2,22.1,1.513894,2.1,0.0,3.2,0.0\\n'260',6,7,1981,17020.0,13.1,22.0,1.482961,2.6,0.0,3.0,0.0\\n'260',7,7,1981,20940.0,12.9,22.6,1.41626,1.5,0.0,3.6,0.0\\n'260',8,7,1981,25860.0,13.8,28.0,1.578003,1.5,0.0,4.9,0.0\\n'260',9,7,1981,20080.0,17.8,28.9,1.893382,1.5,4.5,3.8,0.088\\n'260',10,7,1981,13360.0,16.9,23.3,1.940098,1.5,7.0,2.4,0.046\\n'260',11,7,1981,15670.0,15.2,22.2,1.698974,2.1,0.0,2.8,0.0\\n'260',12,7,1981,13360.0,11.5,19.6,1.445085,2.6,0.0,2.2,0.0\\n'260',13,7,1981,15670.0,11.3,21.8,1.439731,1.5,0.8,2.6,0.017\\n'260',14,7,1981,12940.0,11.2,19.6,1.402666,2.6,0.0,2.2,0.0\\n'260',15,7,1981,16670.0,13.2,20.6,1.3623,1.5,0.0,2.8,0.0\\n'260',16,7,1981,7070.0,12.3,19.0,1.587596,3.1,18.7,1.2,0.167\\n'260',17,7,1981,22650.0,9.3,17.7,1.131031,2.6,0.1,3.7,0.004\\n'260',18,7,1981,17390.0,9.4,17.5,1.157929,1.5,0.2,2.8,0.008\\n'260',19,7,1981,21080.0,12.0,19.9,1.170245,2.6,0.0,3.5,0.0\\n'260',20,7,1981,11450.0,14.4,18.9,1.554495,2.1,1.7,2.0,0.033\\n'260',21,7,1981,8420.0,12.1,18.5,1.529474,2.1,2.9,1.4,0.112\\n'260',22,7,1981,12650.0,12.3,20.6,1.453201,2.6,0.0,2.2,0.0\\n'260',23,7,1981,18680.0,10.9,19.8,1.163629,2.6,8.1,3.1,0.092\\n'260',24,7,1981,6150.0,10.1,15.0,1.318156,3.1,16.4,1.0,0.333\\n'260',25,7,1981,8590.0,11.9,17.0,1.460551,2.6,24.3,1.4,0.275\\n'260',26,7,1981,10880.0,8.0,18.0,1.196045,2.6,0.1,1.8,0.012\\n'260',27,7,1981,24780.0,11.6,20.9,1.240772,3.1,0.0,4.2,0.0\\n'260',28,7,1981,20410.0,12.0,23.4,1.399776,1.5,0.0,3.6,0.0\\n'260',29,7,1981,17360.0,12.5,23.9,1.637305,2.1,0.0,3.0,0.0\\n'260',30,7,1981,19090.0,9.4,19.2,1.206819,1.5,0.0,3.1,0.0\\n'260',31,7,1981,17990.0,8.0,22.0,1.196987,1.5,6.1,3.1,0.046\\n'260',1,8,1981,6710.0,13.3,18.2,1.506493,2.6,2.0,1.1,0.029\\n'260',2,8,1981,18940.0,11.0,19.6,1.311285,2.6,0.0,3.1,0.0\\n'260',3,8,1981,24920.0,8.8,23.0,1.431583,1.0,0.0,4.2,0.0\\n'260',4,8,1981,24120.0,10.9,28.0,1.426893,1.0,0.0,4.4,0.0\\n'260',5,8,1981,21280.0,15.6,28.9,1.82865,1.5,0.0,4.0,0.0\\n'260',6,8,1981,19920.0,17.6,29.2,2.020317,2.1,0.0,3.8,0.0\\n'260',7,8,1981,17750.0,17.8,26.9,2.04654,1.5,0.0,3.3,0.0\\n'260',8,8,1981,5210.0,15.9,19.7,1.796778,2.1,0.0,0.9,0.0\\n'260',9,8,1981,8970.0,15.2,20.4,1.692018,1.5,0.0,1.5,0.0\\n'260',10,8,1981,4110.0,14.8,17.9,1.676105,2.6,1.4,0.7,0.204\\n'260',11,8,1981,5710.0,14.2,18.0,1.584525,2.1,1.2,1.0,0.092\\n'260',12,8,1981,20780.0,11.2,23.4,1.400145,1.0,0.0,3.6,0.0\\n'260',13,8,1981,15880.0,10.7,23.8,1.409936,0.5,0.0,2.8,0.0\\n'260',14,8,1981,19930.0,13.8,26.5,1.542756,1.0,0.0,3.6,0.0\\n'260',15,8,1981,15130.0,15.3,27.0,1.753688,1.0,0.0,2.8,0.0\\n'260',16,8,1981,18100.0,10.8,20.3,1.192426,2.6,0.0,3.0,0.0\\n'260',17,8,1981,19000.0,7.8,19.2,1.047239,2.1,0.0,3.0,0.0\\n'260',18,8,1981,16660.0,7.8,22.8,1.07167,2.6,0.0,2.9,0.0\\n'260',19,8,1981,10010.0,14.2,19.8,1.489838,2.6,4.9,1.7,0.092\\n'260',20,8,1981,12150.0,11.6,18.1,1.347919,3.6,9.9,2.0,0.246\\n'260',21,8,1981,13530.0,11.6,17.6,1.279598,2.6,1.3,2.2,0.037\\n'260',22,8,1981,10920.0,11.0,16.8,1.248924,3.1,2.7,1.8,0.071\\n'260',23,8,1981,14350.0,10.0,18.9,1.222701,2.1,0.2,2.3,0.008\\n'260',24,8,1981,10610.0,8.2,17.4,1.15889,1.0,0.0,1.7,0.0\\n'260',25,8,1981,16260.0,6.6,21.9,1.288833,1.0,0.0,2.7,0.0\\n'260',26,8,1981,15340.0,11.1,20.8,1.390179,2.1,0.0,2.6,0.0\\n'260',27,8,1981,13570.0,10.0,21.3,1.323279,1.5,0.0,2.3,0.0\\n'260',28,8,1981,11340.0,14.4,19.4,1.52675,1.5,0.0,1.9,0.0\\n'260',29,8,1981,9860.0,11.1,19.1,1.304383,1.5,0.0,1.6,0.0\\n'260',30,8,1981,18140.0,10.8,20.9,1.251481,1.5,0.0,3.0,0.0\\n'260',31,8,1981,12360.0,9.1,20.2,1.294472,1.0,0.0,2.0,0.0\\n'260',1,9,1981,16300.0,12.1,19.1,1.238461,1.5,0.0,2.7,0.0\\n'260',2,9,1981,18150.0,8.4,21.6,1.070959,2.1,0.0,3.0,0.0\\n'260',3,9,1981,17310.0,9.2,20.6,1.152568,2.6,0.0,2.8,0.0\\n'260',4,9,1981,19040.0,6.4,22.6,0.969448,1.0,0.0,3.1,0.0\\n'260',5,9,1981,18740.0,6.3,23.8,1.003273,1.0,0.0,3.1,0.0\\n'260',6,9,1981,17570.0,5.1,24.1,0.994556,0.5,0.0,2.9,0.0\\n'260',7,9,1981,14590.0,8.5,24.8,1.18453,1.5,0.0,2.5,0.0\\n'260',8,9,1981,11250.0,14.1,23.3,1.72444,2.1,3.3,2.0,0.05\\n'260',9,9,1981,4790.0,11.2,19.3,1.56522,1.0,0.0,0.8,0.0\\n'260',10,9,1981,15700.0,10.3,24.2,1.396515,1.5,0.0,2.7,0.0\\n'260',11,9,1981,6810.0,11.2,20.0,1.366618,1.5,3.1,1.1,0.058\\n'260',12,9,1981,12360.0,11.3,21.1,1.401051,2.1,4.9,2.1,0.054\\n'260',13,9,1981,14560.0,11.0,17.8,1.167283,3.1,3.5,2.3,0.1\\n'260',14,9,1981,12730.0,9.3,17.6,1.115815,2.6,1.4,2.0,0.017\\n'260',15,9,1981,3820.0,11.0,16.6,1.455565,2.1,6.2,0.6,0.15\\n'260',16,9,1981,9280.0,11.0,20.2,1.442868,1.5,7.5,1.6,0.046\\n'260',17,9,1981,6720.0,9.7,17.9,1.231554,1.5,0.0,1.1,0.0\\n'260',18,9,1981,6490.0,12.2,18.5,1.420497,2.6,3.6,1.1,0.146\\n'260',19,9,1981,10020.0,11.1,19.0,1.275927,3.1,4.9,1.6,0.142\\n'260',20,9,1981,4310.0,13.2,17.1,1.476994,4.1,9.3,0.7,0.525\\n'260',21,9,1981,9690.0,11.7,19.1,1.366107,2.1,1.1,1.6,0.042\\n'260',22,9,1981,8330.0,11.1,19.4,1.348602,1.5,0.1,1.4,0.012\\n'260',23,9,1981,11130.0,9.1,17.1,1.131874,2.1,1.9,1.8,0.042\\n'260',24,9,1981,14170.0,9.0,18.3,1.031922,3.1,0.0,2.3,0.0\\n'260',25,9,1981,3890.0,10.6,16.3,1.280776,2.6,0.0,0.6,0.0\\n'260',26,9,1981,5330.0,10.6,19.3,1.321999,4.1,0.5,0.9,0.1\\n'260',27,9,1981,10600.0,8.6,17.9,1.16751,2.6,0.8,1.7,0.008\\n'260',28,9,1981,11480.0,6.0,18.3,1.062304,1.0,0.0,1.7,0.0\\n'260',29,9,1981,13000.0,4.8,18.1,0.976208,1.0,0.0,2.0,0.0\\n'260',30,9,1981,9290.0,8.3,17.2,1.086901,3.1,0.0,1.5,0.0\\n'260',1,10,1981,12810.0,9.3,19.5,1.161537,3.1,0.0,2.1,0.0\\n'260',2,10,1981,5640.0,11.0,17.0,1.308308,2.1,5.6,0.9,0.088\\n'260',3,10,1981,8040.0,8.0,13.1,0.933866,4.1,2.7,1.2,0.062\\n'260',4,10,1981,2340.0,6.1,12.1,0.988468,4.1,18.4,0.3,0.283\\n'260',5,10,1981,11690.0,8.9,16.9,1.176691,2.6,0.2,1.8,0.017\\n'260',6,10,1981,2690.0,9.7,16.1,1.269673,3.1,21.3,0.4,0.112\\n'260',7,10,1981,10020.0,9.2,14.6,0.983169,5.1,0.4,1.5,0.021\\n'260',8,10,1981,4680.0,8.9,14.7,1.196665,4.1,0.8,0.7,0.125\\n'260',9,10,1981,3990.0,10.1,16.7,1.233609,5.1,6.1,0.6,0.133\\n'260',10,10,1981,7090.0,6.9,12.6,0.908348,5.1,6.1,1.0,0.325\\n'260',11,10,1981,6920.0,5.8,12.1,0.908582,4.1,11.7,1.0,0.217\\n'260',12,10,1981,3530.0,3.6,9.1,0.84002,2.6,18.9,0.5,0.325\\n'260',13,10,1981,3640.0,3.4,10.9,0.870984,3.6,14.7,0.5,0.3\\n'260',14,10,1981,6570.0,1.4,11.4,0.850206,2.1,0.2,0.9,0.004\\n'260',15,10,1981,3540.0,0.1,8.8,0.738033,1.0,0.0,0.4,0.0\\n'260',16,10,1981,4180.0,-0.4,10.3,0.72293,1.0,0.0,0.5,0.0\\n'260',17,10,1981,4480.0,2.3,9.7,0.764859,2.1,7.9,0.6,0.363\\n'260',18,10,1981,1000.0,3.6,7.5,0.847553,1.5,1.3,0.1,0.021\\n'260',19,10,1981,2700.0,0.6,11.9,0.897233,3.6,3.9,0.4,0.271\\n'260',20,10,1981,1400.0,4.2,13.2,1.00701,4.6,18.6,0.2,0.6\\n'260',21,10,1981,5150.0,2.1,9.2,0.749711,2.1,2.9,0.7,0.046\\n'260',22,10,1981,3540.0,3.8,8.6,0.859801,3.6,22.7,0.5,0.292\\n'260',23,10,1981,8420.0,-0.3,11.1,0.695236,1.0,0.0,1.1,0.0\\n'260',24,10,1981,3130.0,-0.5,8.5,0.732856,2.1,0.7,0.4,0.017\\n'260',25,10,1981,2930.0,1.9,9.2,0.814582,2.1,5.5,0.4,0.163\\n'260',26,10,1981,4080.0,0.9,7.9,0.810788,0.5,0.0,0.5,0.0\\n'260',27,10,1981,3110.0,3.5,7.8,0.821129,2.6,0.4,0.4,0.012\\n'260',28,10,1981,6160.0,3.7,10.8,0.886381,3.6,3.4,0.9,0.104\\n'260',29,10,1981,3910.0,7.1,11.5,0.984548,3.6,8.3,0.6,0.2\\n'260',30,10,1981,6270.0,6.6,11.5,0.908863,3.6,3.5,0.9,0.108\\n'260',31,10,1981,3940.0,6.3,14.2,0.960297,4.1,2.2,0.6,0.083\\n'260',1,11,1981,1050.0,7.1,13.5,1.182915,3.1,0.7,0.2,0.025\\n'260',2,11,1981,1300.0,10.0,14.2,1.198681,3.6,0.0,0.2,0.0\\n'260',3,11,1981,2030.0,11.5,13.3,1.210565,2.6,0.0,0.3,0.0\\n'260',4,11,1981,3480.0,4.1,12.5,0.915877,2.6,2.6,0.5,0.158\\n'260',5,11,1981,5300.0,1.9,11.7,0.786689,2.1,0.1,0.7,0.008\\n'260',6,11,1981,5350.0,2.2,10.9,0.711652,2.1,0.0,0.7,0.0\\n'260',7,11,1981,6590.0,-2.7,9.2,0.51549,1.5,0.0,0.8,0.0\\n'260',8,11,1981,7100.0,-3.7,6.1,0.470098,1.0,0.0,0.8,0.0\\n'260',9,11,1981,2160.0,-2.3,6.4,0.613596,1.0,0.0,0.3,0.0\\n'260',10,11,1981,1930.0,-3.1,5.0,0.600639,3.1,2.4,0.2,0.213\\n'260',11,11,1981,990.0,3.5,7.6,0.793101,4.6,3.7,0.1,0.3\\n'260',12,11,1981,2260.0,5.7,10.9,0.942358,1.5,0.0,0.3,0.0\\n'260',13,11,1981,3580.0,4.4,9.7,0.795787,3.1,3.3,0.5,0.058\\n'260',14,11,1981,4150.0,0.0,10.0,0.70452,2.1,0.4,0.5,0.017\\n'260',15,11,1981,5980.0,-1.4,6.6,0.582671,1.5,0.0,0.7,0.0\\n'260',16,11,1981,3040.0,-1.0,3.8,0.55719,3.1,0.0,0.3,0.0\\n'260',17,11,1981,730.0,1.2,7.5,0.687482,3.6,5.4,0.1,0.154\\n'260',18,11,1981,2670.0,6.6,11.6,0.998624,5.7,8.6,0.4,0.304\\n'260',19,11,1981,5290.0,2.6,10.9,0.788383,2.1,1.5,0.7,0.125\\n'260',20,11,1981,1190.0,4.4,15.3,1.03123,7.7,1.7,0.2,0.075\\n'260',21,11,1981,1670.0,6.1,12.7,0.914026,3.1,1.5,0.2,0.1\\n'260',22,11,1981,1460.0,10.8,12.7,1.191529,4.1,0.0,0.2,0.0\\n'260',23,11,1981,2360.0,5.5,13.7,0.835455,5.7,2.8,0.3,0.046\\n'260',24,11,1981,2690.0,2.0,7.1,0.574772,5.1,2.2,0.3,0.042\\n'260',25,11,1981,1300.0,2.1,6.2,0.626768,4.6,5.6,0.2,0.133\\n'260',26,11,1981,1400.0,5.6,10.5,0.946261,4.6,0.4,0.2,0.029\\n'260',27,11,1981,360.0,6.1,10.6,0.877147,5.7,6.5,0.1,0.238\\n'260',28,11,1981,1360.0,1.7,7.7,0.708079,3.1,5.4,0.2,0.138\\n'260',29,11,1981,2850.0,3.2,8.2,0.769038,3.6,4.5,0.4,0.104\\n'260',30,11,1981,460.0,0.9,8.7,0.794337,3.6,12.8,0.1,0.371\\n'260',1,12,1981,2180.0,0.9,6.9,0.638043,3.1,0.6,0.3,0.029\\n'260',2,12,1981,2330.0,1.1,7.9,0.755638,1.0,0.4,0.3,0.037\\n'260',3,12,1981,2260.0,-0.5,9.1,0.814592,2.1,0.6,0.3,0.046\\n'260',4,12,1981,690.0,1.4,9.0,0.712417,4.1,19.0,0.1,0.433\\n'260',5,12,1981,1850.0,1.0,4.6,0.655479,2.1,2.5,0.2,0.062\\n'260',6,12,1981,1400.0,2.1,5.2,0.738324,2.1,8.7,0.2,0.246\\n'260',7,12,1981,1750.0,-0.7,4.5,0.638162,2.1,5.1,0.2,0.138\\n'260',8,12,1981,720.0,-0.4,2.1,0.610509,1.5,4.9,0.1,0.233\\n'260',9,12,1981,3180.0,-1.2,2.6,0.520876,2.6,9.6,0.3,0.2\\n'260',10,12,1981,3120.0,-4.4,1.6,0.522086,1.5,1.6,0.3,0.058\\n'260',11,12,1981,890.0,-4.2,0.0,0.508571,2.1,3.5,0.1,0.192\\n'260',12,12,1981,3770.0,-7.3,0.6,0.48419,1.0,1.3,0.3,0.025\\n'260',13,12,1981,3490.0,-4.7,-1.5,0.380192,3.6,0.0,0.3,0.0\\n'260',14,12,1981,940.0,-3.1,2.5,0.514797,5.1,9.3,0.1,0.421\\n'260',15,12,1981,3840.0,-7.1,-1.4,0.405316,2.6,0.0,0.3,0.0\\n'260',16,12,1981,4760.0,-10.7,-5.3,0.324488,1.5,0.0,0.4,0.0\\n'260',17,12,1981,3350.0,-11.6,-7.9,0.287895,1.5,0.0,0.2,0.0\\n'260',18,12,1981,1640.0,-12.3,-6.7,0.300019,2.6,0.0,0.1,0.0\\n'260',19,12,1981,3200.0,-6.8,0.5,0.481178,1.0,0.2,0.3,0.008\\n'260',20,12,1981,2620.0,-6.4,-1.3,0.420589,3.1,0.0,0.2,0.0\\n'260',21,12,1981,2190.0,-6.9,-2.4,0.367134,4.1,3.0,0.2,0.179\\n'260',22,12,1981,920.0,-7.1,-4.9,0.387562,2.1,2.3,0.1,0.067\\n'260',23,12,1981,1090.0,-5.1,0.5,0.520431,1.0,0.0,0.1,0.0\\n'260',24,12,1981,1780.0,-3.3,0.7,0.516533,2.6,0.0,0.2,0.0\\n'260',25,12,1981,2750.0,-4.0,3.4,0.548372,1.5,0.8,0.3,0.025\\n'260',26,12,1981,1870.0,-5.0,-0.5,0.494113,1.0,0.0,0.2,0.0\\n'260',27,12,1981,1680.0,-3.6,-0.6,0.494809,3.1,0.0,0.2,0.0\\n'260',28,12,1981,1530.0,-1.3,2.0,0.556643,2.6,0.0,0.2,0.0\\n'260',29,12,1981,490.0,1.5,5.5,0.69599,4.6,5.7,0.1,0.229\\n'260',30,12,1981,2440.0,3.8,7.1,0.688694,4.6,2.5,0.3,0.125\\n'260',31,12,1981,1040.0,0.1,8.0,0.765844,2.6,5.6,0.1,0.158\\n'260',1,1,1982,930.0,1.2,7.2,0.786858,1.5,1.6,0.1,0.129\\n'260',2,1,1982,810.0,4.8,10.8,1.032448,3.6,3.5,0.1,0.342\\n'260',3,1,1982,2630.0,7.1,11.5,1.039007,4.1,2.1,0.4,0.062\\n'260',4,1,1982,1100.0,8.0,11.0,1.028087,5.7,4.5,0.2,0.154\\n'260',5,1,1982,700.0,-0.6,10.1,0.790732,5.1,10.7,0.1,0.35\\n'260',6,1,1982,3760.0,-7.8,-0.4,0.375746,3.6,0.2,0.4,0.017\\n'260',7,1,1982,4530.0,-10.2,-1.9,0.297191,1.5,0.0,0.4,0.0\\n'260',8,1,1982,2530.0,-6.2,-3.9,0.294507,5.1,0.0,0.2,0.0\\n'260',9,1,1982,1530.0,-11.8,-5.6,0.238232,4.1,0.0,0.1,0.0\\n'260',10,1,1982,4860.0,-13.6,-3.8,0.228349,2.6,0.0,0.3,0.0\\n'260',11,1,1982,2050.0,-10.2,-1.0,0.257048,2.6,0.0,0.2,0.0\\n'260',12,1,1982,4710.0,-8.8,2.5,0.391057,1.0,0.0,0.4,0.0\\n'260',13,1,1982,4460.0,-10.5,-0.1,0.391964,1.0,0.0,0.4,0.0\\n'260',14,1,1982,5090.0,-9.0,0.6,0.320473,2.6,0.0,0.4,0.0\\n'260',15,1,1982,4170.0,-8.8,3.1,0.412481,2.6,0.0,0.4,0.0\\n'260',16,1,1982,4220.0,-0.9,6.3,0.491296,2.6,0.0,0.5,0.0\\n'260',17,1,1982,4070.0,-1.8,7.3,0.569087,1.5,0.0,0.5,0.0\\n'260',18,1,1982,4330.0,-3.7,6.1,0.592506,1.0,0.0,0.5,0.0\\n'260',19,1,1982,2650.0,-1.2,5.4,0.580844,1.5,0.0,0.3,0.0\\n'260',20,1,1982,4700.0,0.2,7.0,0.613787,2.1,0.1,0.5,0.021\\n'260',21,1,1982,1510.0,0.0,3.9,0.693026,1.5,0.5,0.2,0.054\\n'260',22,1,1982,1000.0,-1.0,4.0,0.670175,2.6,1.6,0.1,0.079\\n'260',23,1,1982,1570.0,-2.1,3.2,0.607625,1.0,0.0,0.2,0.0\\n'260',24,1,1982,1970.0,-3.0,2.6,0.566435,1.5,0.0,0.2,0.0\\n'260',25,1,1982,570.0,1.7,3.1,0.692918,4.1,3.8,0.1,0.425\\n'260',26,1,1982,1410.0,3.0,6.6,0.77471,5.1,6.4,0.2,0.342\\n'260',27,1,1982,3000.0,-0.1,4.4,0.59594,3.1,2.8,0.3,0.183\\n'260',28,1,1982,1500.0,-0.2,6.7,0.641138,4.1,0.0,0.2,0.0\\n'260',29,1,1982,1130.0,5.3,9.7,0.88934,4.6,3.7,0.2,0.367\\n'260',30,1,1982,2590.0,7.3,10.1,0.91227,5.7,3.0,0.4,0.125\\n'260',31,1,1982,6540.0,-2.5,7.8,0.553162,2.1,0.8,0.8,0.112\\n'260',1,2,1982,6640.0,-2.9,5.4,0.511253,1.5,0.0,0.7,0.0\\n'260',2,2,1982,7060.0,-2.1,5.0,0.492045,3.6,0.0,0.8,0.0\\n'260',3,2,1982,6330.0,-1.3,3.2,0.417916,5.1,0.0,0.7,0.0\\n'260',4,2,1982,6080.0,-0.9,6.3,0.524711,3.1,0.0,0.7,0.0\\n'260',5,2,1982,5600.0,0.8,9.0,0.725773,3.1,0.0,0.7,0.0\\n'260',6,2,1982,2310.0,5.7,8.6,0.885569,3.1,3.4,0.3,0.208\\n'260',7,2,1982,800.0,4.9,6.9,0.901414,2.6,4.4,0.1,0.471\\n'260',8,2,1982,3770.0,2.2,8.0,0.772704,3.1,0.8,0.5,0.163\\n'260',9,2,1982,2970.0,4.0,9.7,0.851431,3.1,0.0,0.4,0.0\\n'260',10,2,1982,4140.0,2.1,10.0,0.694662,2.6,0.0,0.5,0.0\\n'260',11,2,1982,6470.0,2.1,12.3,0.777549,2.6,1.4,0.9,0.058\\n'260',12,2,1982,5060.0,-0.6,9.6,0.752561,2.6,0.7,0.7,0.058\\n'260',13,2,1982,6430.0,4.4,12.2,0.881767,3.6,1.6,0.9,0.125\\n'260',14,2,1982,6600.0,0.0,8.9,0.672953,1.5,0.8,0.8,0.096\\n'260',15,2,1982,2430.0,0.1,4.3,0.635714,4.1,0.0,0.3,0.0\\n'260',16,2,1982,810.0,0.8,2.0,0.582372,3.1,0.0,0.1,0.0\\n'260',17,2,1982,1190.0,-0.2,1.7,0.575557,3.1,0.0,0.1,0.0\\n'260',18,2,1982,4500.0,-1.2,5.9,0.584289,3.6,0.0,0.5,0.0\\n'260',19,2,1982,6400.0,-3.1,0.6,0.41404,4.1,0.0,0.6,0.0\\n'260',20,2,1982,8980.0,-4.6,4.4,0.368847,3.6,0.0,0.9,0.0\\n'260',21,2,1982,10330.0,-3.7,5.2,0.358787,3.1,0.0,1.1,0.0\\n'260',22,2,1982,10460.0,-3.6,7.0,0.390291,3.1,0.0,1.2,0.0\\n'260',23,2,1982,8760.0,-5.7,4.2,0.389353,2.1,0.0,0.9,0.0\\n'260',24,2,1982,2300.0,-2.8,-1.1,0.510899,1.5,0.0,0.2,0.0\\n'260',25,2,1982,6770.0,-5.1,2.5,0.433606,2.1,0.0,0.7,0.0\\n'260',26,2,1982,7840.0,-7.2,4.6,0.392427,2.1,0.0,0.8,0.0\\n'260',27,2,1982,2190.0,-0.6,4.9,0.585218,3.1,0.0,0.3,0.0\\n'260',28,2,1982,1540.0,3.7,10.2,0.945712,4.1,1.7,0.2,0.158\\n'260',1,3,1982,5540.0,5.2,13.3,0.865125,7.2,4.9,0.8,0.146\\n'260',2,3,1982,10130.0,3.2,9.4,0.797901,5.1,0.1,1.3,0.042\\n'260',3,3,1982,2080.0,6.0,9.2,0.899253,7.7,17.1,0.3,0.479\\n'260',4,3,1982,2890.0,0.6,6.9,0.659461,4.6,3.1,0.4,0.179\\n'260',5,3,1982,10690.0,-2.3,8.1,0.557755,2.1,0.1,1.3,0.004\\n'260',6,3,1982,12060.0,-4.0,7.7,0.484636,2.6,0.0,1.3,0.0\\n'260',7,3,1982,12520.0,-2.0,6.4,0.469922,2.6,0.0,1.4,0.0\\n'260',8,3,1982,11820.0,-3.6,8.5,0.509185,1.0,0.0,1.3,0.0\\n'260',9,3,1982,6100.0,-3.1,8.4,0.543707,2.1,0.0,0.7,0.0\\n'260',10,3,1982,1330.0,1.9,9.2,0.823903,7.7,14.9,0.2,0.521\\n'260',11,3,1982,7410.0,2.1,7.1,0.608805,6.2,0.1,0.9,0.012\\n'260',12,3,1982,4030.0,2.1,8.7,0.671532,5.1,5.0,0.5,0.204\\n'260',13,3,1982,10090.0,1.2,7.8,0.647855,3.1,2.4,1.2,0.075\\n'260',14,3,1982,4910.0,1.4,9.1,0.751117,4.6,0.0,0.6,0.0\\n'260',15,3,1982,11430.0,5.9,12.9,0.709059,6.2,0.0,1.6,0.0\\n'260',16,3,1982,8500.0,3.3,10.4,0.713089,6.7,6.6,1.1,0.163\\n'260',17,3,1982,9650.0,2.2,9.6,0.671114,4.1,4.0,1.2,0.062\\n'260',18,3,1982,9110.0,0.8,9.5,0.706321,2.6,0.9,1.1,0.017\\n'260',19,3,1982,9990.0,-0.2,9.9,0.688296,1.5,0.7,1.2,0.029\\n'260',20,3,1982,11700.0,2.9,9.2,0.701024,4.1,0.2,1.5,0.075\\n'260',21,3,1982,6990.0,1.0,6.8,0.567269,1.0,0.0,0.9,0.0\\n'260',22,3,1982,7130.0,1.9,8.0,0.679578,1.0,0.0,0.9,0.0\\n'260',23,3,1982,8340.0,3.0,9.3,0.756193,2.6,0.0,1.1,0.0\\n'260',24,3,1982,11860.0,1.0,10.0,0.745862,1.5,0.0,1.5,0.0\\n'260',25,3,1982,15750.0,-0.9,11.9,0.564635,1.0,0.0,1.9,0.0\\n'260',26,3,1982,16100.0,-2.0,16.9,0.675047,1.0,0.0,2.2,0.0\\n'260',27,3,1982,15190.0,1.0,18.5,0.676484,1.0,0.0,2.2,0.0\\n'260',28,3,1982,7900.0,3.0,11.3,0.827489,1.5,0.0,1.1,0.0\\n'260',29,3,1982,2500.0,2.3,6.9,0.707854,2.1,3.2,0.3,0.183\\n'260',30,3,1982,5560.0,2.9,7.0,0.677987,5.1,0.0,0.7,0.0\\n'260',31,3,1982,18880.0,1.8,10.8,0.574135,5.1,0.0,2.5,0.0\\n'260',1,4,1982,16700.0,1.7,15.5,0.625005,2.6,0.0,2.4,0.0\\n'260',2,4,1982,14390.0,3.2,17.9,0.877842,2.1,0.7,2.1,0.088\\n'260',3,4,1982,14750.0,4.5,13.4,0.842481,2.1,0.0,2.1,0.0\\n'260',4,4,1982,17680.0,2.4,16.4,0.741798,2.1,0.0,2.6,0.0\\n'260',5,4,1982,16120.0,5.3,19.1,0.800833,2.1,0.0,2.5,0.0\\n'260',6,4,1982,7320.0,9.0,17.0,1.182987,2.6,1.3,1.1,0.092\\n'260',7,4,1982,4880.0,9.2,14.7,1.174908,6.2,6.2,0.7,0.392\\n'260',8,4,1982,10830.0,1.7,10.0,0.640415,5.1,3.1,1.4,0.217\\n'260',9,4,1982,12490.0,0.4,7.1,0.591225,3.6,1.7,1.5,0.042\\n'260',10,4,1982,10520.0,1.1,8.4,0.596395,3.6,1.6,1.3,0.042\\n'260',11,4,1982,11780.0,0.0,7.6,0.608517,4.1,2.2,1.4,0.058\\n'260',12,4,1982,13800.0,0.1,7.5,0.629202,3.6,2.0,1.7,0.029\\n'260',13,4,1982,19610.0,-0.3,9.5,0.604538,3.6,0.4,2.4,0.012\\n'260',14,4,1982,19600.0,-2.2,10.5,0.555612,1.5,0.0,2.4,0.0\\n'260',15,4,1982,21220.0,-1.5,14.6,0.583919,2.1,0.0,2.9,0.0\\n'260',16,4,1982,21510.0,2.0,15.2,0.744654,3.1,0.0,3.1,0.0\\n'260',17,4,1982,22680.0,3.6,10.8,0.731783,5.1,0.0,3.1,0.0\\n'260',18,4,1982,19160.0,4.7,12.8,0.701564,2.6,0.0,2.7,0.0\\n'260',19,4,1982,23200.0,0.4,13.9,0.649756,2.6,0.0,3.2,0.0\\n'260',20,4,1982,18490.0,2.5,13.3,0.736856,2.6,0.0,2.5,0.0\\n'260',21,4,1982,18000.0,2.9,12.5,0.784989,2.6,0.0,2.5,0.0\\n'260',22,4,1982,21610.0,1.3,15.5,0.728407,2.1,0.0,3.0,0.0\\n'260',23,4,1982,15010.0,1.4,13.9,0.755464,3.1,0.4,2.0,0.017\\n'260',24,4,1982,18880.0,3.9,11.9,0.732635,5.1,0.4,2.6,0.008\\n'260',25,4,1982,22470.0,2.2,14.0,0.753975,3.6,0.0,3.1,0.0\\n'260',26,4,1982,14300.0,4.9,12.1,0.853466,5.1,0.2,2.0,0.033\\n'260',27,4,1982,6090.0,5.3,10.7,0.877927,3.6,0.1,0.9,0.029\\n'260',28,4,1982,14270.0,4.5,13.1,0.875,3.1,0.0,2.0,0.0\\n'260',29,4,1982,12370.0,1.4,10.6,0.662796,4.6,1.3,1.6,0.042\\n'260',30,4,1982,6280.0,1.1,9.5,0.665162,3.6,4.1,0.8,0.329\\n'260',1,5,1982,7030.0,3.7,10.1,0.705815,4.6,5.7,1.0,0.221\\n'260',2,5,1982,16510.0,3.5,11.6,0.618477,4.6,0.2,2.3,0.021\\n'260',3,5,1982,15270.0,6.5,13.5,0.760558,6.2,0.8,2.2,0.079\\n'260',4,5,1982,21450.0,3.9,12.6,0.734536,5.1,0.1,3.0,0.021\\n'260',5,5,1982,11030.0,3.5,11.1,0.797026,2.1,0.3,1.5,0.058\\n'260',6,5,1982,7110.0,5.0,9.1,0.881045,2.1,4.6,1.0,0.329\\n'260',7,5,1982,12460.0,4.2,10.6,0.817295,3.1,1.3,1.7,0.046\\n'260',8,5,1982,15440.0,2.1,11.3,0.766928,2.6,0.0,2.1,0.0\\n'260',9,5,1982,27170.0,-1.0,14.4,0.661209,2.6,0.0,3.8,0.0\\n'260',10,5,1982,21690.0,2.2,16.0,0.681615,2.6,0.0,3.2,0.0\\n'260',11,5,1982,22780.0,4.0,17.2,0.780464,2.1,0.0,3.4,0.0\\n'260',12,5,1982,22740.0,4.9,18.8,0.795567,2.6,0.0,3.5,0.0\\n'260',13,5,1982,27630.0,3.8,19.6,0.684198,2.6,0.0,4.3,0.0\\n'260',14,5,1982,28200.0,4.5,22.8,0.680156,3.1,0.0,4.6,0.0\\n'260',15,5,1982,26450.0,6.7,25.6,0.925756,2.1,0.0,4.6,0.0\\n'260',16,5,1982,19400.0,10.5,24.3,1.134547,1.5,0.1,3.4,0.025\\n'260',17,5,1982,22050.0,10.7,23.6,1.277814,1.5,0.0,3.8,0.0\\n'260',18,5,1982,12440.0,9.7,19.4,1.406749,2.1,0.0,2.0,0.0\\n'260',19,5,1982,19510.0,7.3,19.3,1.149417,2.1,0.5,3.2,0.012\\n'260',20,5,1982,9150.0,12.2,17.9,1.503387,1.5,7.5,1.5,0.354\\n'260',21,5,1982,15280.0,11.8,20.2,1.390466,1.5,1.8,2.5,0.025\\n'260',22,5,1982,8850.0,12.5,18.1,1.378024,3.6,2.0,1.4,0.096\\n'260',23,5,1982,9360.0,9.7,15.5,1.191247,3.1,1.0,1.5,0.104\\n'260',24,5,1982,20380.0,8.9,16.9,1.075089,3.6,0.0,3.2,0.0\\n'260',25,5,1982,14420.0,9.5,20.0,1.248246,3.1,0.0,2.4,0.0\\n'260',26,5,1982,26660.0,10.0,26.3,1.194327,2.1,0.0,4.8,0.0\\n'260',27,5,1982,16080.0,12.0,24.9,1.488385,2.6,4.4,2.8,0.017\\n'260',28,5,1982,20290.0,8.2,18.0,1.042865,2.6,0.0,3.2,0.0\\n'260',29,5,1982,24350.0,5.3,20.5,0.923248,2.1,0.0,4.0,0.0\\n'260',30,5,1982,29210.0,10.2,23.8,0.967236,3.6,0.0,5.1,0.0\\n'260',31,5,1982,28480.0,12.1,27.2,1.229769,2.1,0.0,5.2,0.0\\n'260',1,6,1982,22430.0,11.7,29.2,1.322132,1.0,0.0,4.1,0.0\\n'260',2,6,1982,24410.0,16.0,29.0,1.732153,1.5,5.4,4.6,0.104\\n'260',3,6,1982,23840.0,17.6,29.5,1.749907,1.5,0.0,4.6,0.0\\n'260',4,6,1982,16420.0,15.6,26.8,1.837473,2.1,0.0,3.1,0.0\\n'260',5,6,1982,25980.0,14.2,29.6,1.693175,1.5,0.0,4.9,0.0\\n'260',6,6,1982,11220.0,16.0,27.4,1.867267,1.0,0.0,2.1,0.0\\n'260',7,6,1982,15920.0,15.0,25.8,1.75767,1.5,1.7,2.9,0.021\\n'260',8,6,1982,26120.0,13.8,24.3,1.462306,2.6,0.0,4.7,0.0\\n'260',9,6,1982,27020.0,11.5,20.2,1.324326,2.6,0.0,4.6,0.0\\n'260',10,6,1982,25440.0,7.5,21.8,1.07745,2.6,0.0,4.3,0.0\\n'260',11,6,1982,7140.0,12.6,19.1,1.386013,3.6,0.6,1.2,0.029\\n'260',12,6,1982,14920.0,10.8,18.0,1.134924,4.1,0.4,2.4,0.012\\n'260',13,6,1982,14900.0,10.1,16.3,1.171031,3.6,3.4,2.3,0.204\\n'260',14,6,1982,16410.0,8.1,15.5,0.987935,3.1,0.3,2.5,0.012\\n'260',15,6,1982,10950.0,7.7,15.8,0.929209,1.0,0.0,1.7,0.0\\n'260',16,6,1982,8150.0,7.8,15.4,1.073172,1.5,7.2,1.2,0.246\\n'260',17,6,1982,17890.0,4.8,17.2,0.959959,2.1,0.0,2.8,0.0\\n'260',18,6,1982,13450.0,9.0,19.3,1.334383,2.6,5.1,2.2,0.1\\n'260',19,6,1982,10110.0,13.0,17.6,1.531478,3.1,32.1,1.6,0.342\\n'260',20,6,1982,20620.0,10.1,19.5,1.327036,2.1,0.0,3.4,0.0\\n'260',21,6,1982,15470.0,9.0,19.1,1.286485,2.1,0.0,2.5,0.0\\n'260',22,6,1982,12250.0,13.8,21.3,1.669382,3.1,9.9,2.1,0.129\\n'260',23,6,1982,15700.0,13.8,21.3,1.496833,3.6,9.1,2.7,0.092\\n'260',24,6,1982,10600.0,12.5,19.4,1.439185,3.1,4.2,1.8,0.213\\n'260',25,6,1982,19920.0,11.3,22.8,1.433347,2.6,0.0,3.5,0.0\\n'260',26,6,1982,22070.0,13.0,22.0,1.408567,3.1,3.3,3.8,0.033\\n'260',27,6,1982,17150.0,12.9,19.4,1.413035,3.6,0.3,2.9,0.029\\n'260',28,6,1982,12490.0,12.2,18.3,1.284426,4.1,0.6,2.1,0.017\\n'260',29,6,1982,19220.0,12.3,19.0,1.255184,3.6,3.8,3.2,0.05\\n'260',30,6,1982,23040.0,10.8,19.6,1.21019,3.1,0.0,3.9,0.0\\n'260',1,7,1982,10730.0,11.2,18.0,1.333634,2.1,0.4,1.8,0.096\\n'260',2,7,1982,25740.0,13.8,26.7,1.633195,2.6,0.0,4.8,0.0\\n'260',3,7,1982,8830.0,13.1,22.0,1.47531,2.6,0.5,1.5,0.008\\n'260',4,7,1982,18890.0,12.0,18.5,1.167493,4.6,0.0,3.2,0.0\\n'260',5,7,1982,21220.0,13.8,19.5,1.275808,3.1,0.0,3.6,0.0\\n'260',6,7,1982,9970.0,11.0,19.0,1.394767,2.1,0.0,1.7,0.0\\n'260',7,7,1982,27220.0,10.1,23.2,1.123775,1.0,0.0,4.7,0.0\\n'260',8,7,1982,26260.0,12.1,26.9,1.54608,1.5,0.0,4.8,0.0\\n'260',9,7,1982,28040.0,16.0,31.7,1.522024,4.1,0.0,5.5,0.0\\n'260',10,7,1982,13280.0,16.2,22.6,1.710741,3.1,0.0,2.4,0.0\\n'260',11,7,1982,25020.0,15.4,26.9,1.876982,4.1,0.0,4.6,0.0\\n'260',12,7,1982,24380.0,17.0,29.2,1.90264,4.6,0.0,4.6,0.0\\n'260',13,7,1982,24970.0,15.5,29.8,1.857445,3.6,0.0,4.8,0.0\\n'260',14,7,1982,22930.0,17.3,32.1,1.961974,3.1,0.1,4.5,0.008\\n'260',15,7,1982,18780.0,16.5,28.3,1.746805,3.6,20.3,3.5,0.075\\n'260',16,7,1982,17490.0,10.9,21.7,1.281379,2.6,0.0,3.0,0.0\\n'260',17,7,1982,19670.0,9.3,22.2,1.183752,2.1,0.0,3.4,0.0\\n'260',18,7,1982,27100.0,9.9,23.2,1.160303,3.1,0.0,4.8,0.0\\n'260',19,7,1982,21500.0,13.3,23.0,1.599178,4.1,0.0,3.8,0.0\\n'260',20,7,1982,21730.0,12.5,25.1,1.490932,4.6,0.0,3.9,0.0\\n'260',21,7,1982,16780.0,13.1,21.5,1.506571,4.6,0.0,2.9,0.0\\n'260',22,7,1982,17430.0,11.2,21.4,1.312276,2.6,0.0,3.0,0.0\\n'260',23,7,1982,11850.0,15.2,20.5,1.464492,2.1,0.0,2.1,0.0\\n'260',24,7,1982,10550.0,15.1,20.9,1.520418,2.6,0.0,1.8,0.0\\n'260',25,7,1982,14600.0,14.0,19.6,1.356885,2.1,0.0,2.5,0.0\\n'260',26,7,1982,16780.0,12.0,20.6,1.262616,2.6,0.0,2.8,0.0\\n'260',27,7,1982,12780.0,12.7,20.0,1.321592,2.6,1.4,2.1,0.096\\n'260',28,7,1982,21530.0,14.6,24.0,1.535393,4.6,0.0,3.8,0.0\\n'260',29,7,1982,22460.0,14.3,28.0,1.511334,4.1,0.0,4.2,0.0\\n'260',30,7,1982,21290.0,14.9,30.3,1.366807,4.1,0.0,4.1,0.0\\n'260',31,7,1982,20750.0,18.3,29.8,1.890371,2.1,1.6,4.0,0.012\\n'260',1,8,1982,17800.0,17.8,25.6,1.956933,2.1,0.0,3.3,0.0\\n'260',2,8,1982,22140.0,16.7,31.9,1.650288,2.6,0.0,4.3,0.0\\n'260',3,8,1982,21720.0,17.7,31.4,1.657669,2.1,0.0,4.3,0.0\\n'260',4,8,1982,21550.0,15.7,30.8,1.637684,2.1,0.0,4.1,0.0\\n'260',5,8,1982,5770.0,15.3,20.8,1.855519,2.1,3.2,1.0,0.158\\n'260',6,8,1982,21490.0,14.8,25.8,1.680423,1.5,0.0,3.9,0.0\\n'260',7,8,1982,16850.0,16.9,23.7,1.905562,2.6,0.0,3.1,0.0\\n'260',8,8,1982,9940.0,14.6,22.5,1.53895,2.1,0.2,1.8,0.042\\n'260',9,8,1982,13910.0,12.6,22.8,1.491388,3.1,1.2,2.4,0.042\\n'260',10,8,1982,23080.0,10.8,22.3,1.180248,2.6,1.4,4.0,0.037\\n'260',11,8,1982,20730.0,10.0,24.8,1.346818,2.1,0.0,3.6,0.0\\n'260',12,8,1982,20960.0,14.0,28.7,1.728137,3.1,0.0,3.8,0.0\\n'260',13,8,1982,12860.0,13.0,20.6,1.393721,4.1,3.7,2.2,0.058\\n'260',14,8,1982,18630.0,11.4,20.5,1.219107,2.1,0.2,3.1,0.021\\n'260',15,8,1982,9180.0,13.4,21.5,1.584248,3.6,4.5,1.6,0.121\\n'260',16,8,1982,10330.0,15.1,20.4,1.440065,4.1,0.0,1.8,0.0\\n'260',17,8,1982,14170.0,14.3,20.2,1.421592,3.6,7.7,2.4,0.062\\n'260',18,8,1982,5860.0,13.3,19.0,1.557183,5.1,4.6,1.0,0.138\\n'260',19,8,1982,20770.0,9.7,19.2,1.078293,4.1,0.1,3.4,0.008\\n'260',20,8,1982,19310.0,10.7,18.0,1.213656,4.6,8.6,3.1,0.138\\n'260',21,8,1982,10590.0,14.0,17.1,1.277685,4.1,0.2,1.8,0.025\\n'260',22,8,1982,8740.0,13.7,20.8,1.536292,4.1,0.0,1.5,0.0\\n'260',23,8,1982,10840.0,13.0,19.2,1.353044,3.1,2.0,1.8,0.05\\n'260',24,8,1982,11670.0,11.8,19.1,1.304285,3.1,4.0,1.9,0.292\\n'260',25,8,1982,13650.0,9.4,18.1,1.126929,3.1,1.8,2.2,0.05\\n'260',26,8,1982,11440.0,9.5,18.7,1.275703,2.1,0.2,1.9,0.021\\n'260',27,8,1982,14640.0,8.7,18.4,1.138905,3.1,1.2,2.4,0.008\\n'260',28,8,1982,12210.0,7.6,19.8,1.13396,1.5,0.1,1.9,0.004\\n'260',29,8,1982,20180.0,6.2,21.2,0.965024,2.1,0.0,3.3,0.0\\n'260',30,8,1982,12480.0,11.0,19.7,1.341617,3.1,0.6,2.1,0.012\\n'260',31,8,1982,9080.0,10.3,17.7,1.316523,2.6,1.7,1.5,0.025\\n'260',1,9,1982,8840.0,7.5,17.1,1.117102,2.6,1.8,1.4,0.104\\n'260',2,9,1982,20110.0,7.4,19.0,1.086868,2.6,1.8,3.2,0.054\\n'260',3,9,1982,18650.0,6.7,21.4,1.046526,3.1,0.0,3.1,0.0\\n'260',4,9,1982,17390.0,11.4,21.5,1.410956,2.6,0.0,2.9,0.0\\n'260',5,9,1982,13560.0,11.3,24.9,1.591808,2.6,0.4,2.4,0.008\\n'260',6,9,1982,3460.0,14.5,19.3,1.668678,2.6,0.0,0.6,0.0\\n'260',7,9,1982,5010.0,14.0,19.5,1.552745,3.1,0.0,0.9,0.0\\n'260',8,9,1982,9730.0,14.6,20.5,1.524964,2.6,0.0,1.7,0.0\\n'260',9,9,1982,15010.0,9.5,20.9,1.255636,1.5,0.0,2.5,0.0\\n'260',10,9,1982,16260.0,9.3,25.4,1.358481,1.5,0.0,2.8,0.0\\n'260',11,9,1982,12350.0,10.9,21.5,1.549554,2.6,0.0,2.1,0.0\\n'260',12,9,1982,10810.0,8.5,21.8,1.482141,1.5,0.0,1.8,0.0\\n'260',13,9,1982,13050.0,8.5,21.9,1.285178,2.1,0.0,2.2,0.0\\n'260',14,9,1982,14690.0,7.0,21.7,1.199793,1.0,0.0,2.4,0.0\\n'260',15,9,1982,14340.0,9.0,26.5,1.508792,1.0,0.0,2.5,0.0\\n'260',16,9,1982,11830.0,9.6,24.5,1.612351,1.5,0.0,2.0,0.0\\n'260',17,9,1982,13950.0,9.6,25.4,1.392507,2.1,0.0,2.4,0.0\\n'260',18,9,1982,10290.0,13.2,22.0,1.723774,1.5,0.0,1.8,0.0\\n'260',19,9,1982,13820.0,12.4,26.4,1.617657,2.1,0.0,2.5,0.0\\n'260',20,9,1982,9600.0,15.5,23.8,1.856513,3.6,1.9,1.7,0.012\\n'260',21,9,1982,4440.0,8.2,20.0,1.248486,5.1,5.9,0.7,0.1\\n'260',22,9,1982,14430.0,4.8,16.6,0.880043,2.1,0.0,2.2,0.0\\n'260',23,9,1982,10990.0,2.4,16.8,0.908341,2.6,2.4,1.6,0.125\\n'260',24,9,1982,11430.0,11.5,18.5,1.24477,3.6,0.0,1.9,0.0\\n'260',25,9,1982,4290.0,13.1,18.3,1.456804,3.6,4.9,0.7,0.225\\n'260',26,9,1982,4920.0,12.3,17.4,1.399343,3.6,2.9,0.8,0.1\\n'260',27,9,1982,13600.0,10.7,18.7,1.198025,4.6,0.0,2.2,0.0\\n'260',28,9,1982,12490.0,10.6,18.0,1.182607,2.6,0.0,2.0,0.0\\n'260',29,9,1982,12750.0,10.9,22.8,1.307632,2.6,0.0,2.2,0.0\\n'260',30,9,1982,1900.0,11.8,15.6,1.429552,2.1,1.6,0.3,0.246\\n'260',1,10,1982,11210.0,8.8,18.3,1.186778,1.5,0.0,1.7,0.0\\n'260',2,10,1982,13160.0,6.7,19.2,1.220033,1.5,0.0,2.1,0.0\\n'260',3,10,1982,6620.0,8.8,17.6,1.341189,1.5,0.0,1.0,0.0\\n'260',4,10,1982,11410.0,8.6,16.7,1.161497,2.6,0.0,1.8,0.0\\n'260',5,10,1982,1770.0,6.6,12.9,1.127436,2.1,5.5,0.3,0.183\\n'260',6,10,1982,7320.0,4.8,15.8,1.054119,2.1,0.0,1.1,0.0\\n'260',7,10,1982,2150.0,8.9,13.2,1.254915,2.6,15.4,0.3,0.337\\n'260',8,10,1982,4200.0,8.9,14.2,1.212251,1.5,16.2,0.6,0.15\\n'260',9,10,1982,4460.0,10.2,13.6,1.226622,2.6,14.0,0.7,0.342\\n'260',10,10,1982,2870.0,9.7,13.1,1.194271,3.1,26.1,0.4,0.4\\n'260',11,10,1982,3210.0,8.3,12.4,1.092615,2.1,1.2,0.5,0.154\\n'260',12,10,1982,5380.0,7.4,13.8,1.117227,2.6,0.8,0.8,0.121\\n'260',13,10,1982,3550.0,8.3,12.5,1.081823,4.1,7.4,0.5,0.238\\n'260',14,10,1982,4850.0,9.2,13.9,1.126637,3.1,2.0,0.7,0.1\\n'260',15,10,1982,5130.0,8.4,12.6,1.030546,3.1,5.5,0.8,0.225\\n'260',16,10,1982,7640.0,5.6,12.7,0.935908,3.1,0.4,1.1,0.046\\n'260',17,10,1982,6770.0,9.2,15.4,1.103916,4.1,1.4,1.0,0.146\\n'260',18,10,1982,8150.0,9.2,16.8,1.168747,3.6,3.2,1.3,0.088\\n'260',19,10,1982,5060.0,9.6,14.0,1.205257,3.6,0.2,0.8,0.042\\n'260',20,10,1982,4500.0,10.1,15.2,1.137442,4.6,0.0,0.7,0.0\\n'260',21,10,1982,5140.0,11.1,16.4,1.271213,2.6,2.3,0.8,0.179\\n'260',22,10,1982,8150.0,9.8,19.2,1.337065,3.1,0.1,1.3,0.042\\n'260',23,10,1982,1410.0,9.6,13.5,1.248716,3.6,2.5,0.2,0.279\\n'260',24,10,1982,8820.0,3.6,14.5,0.829293,2.1,0.0,1.3,0.0\\n'260',25,10,1982,2900.0,5.2,12.2,0.969058,3.1,0.0,0.4,0.0\\n'260',26,10,1982,2420.0,9.5,14.1,1.241916,3.1,0.0,0.4,0.0\\n'260',27,10,1982,8760.0,3.9,15.3,0.934039,1.0,0.0,1.3,0.0\\n'260',28,10,1982,4670.0,4.1,14.9,1.095733,1.5,0.0,0.7,0.0\\n'260',29,10,1982,6040.0,8.4,13.2,1.112641,2.6,0.0,0.9,0.0\\n'260',30,10,1982,750.0,7.0,9.9,0.963135,1.5,0.0,0.1,0.0\\n'260',31,10,1982,3540.0,6.2,10.5,0.924984,2.6,0.0,0.5,0.0\\n'260',1,11,1982,3930.0,10.4,17.1,1.30398,3.6,0.0,0.6,0.0\\n'260',2,11,1982,1050.0,11.2,13.6,1.38162,2.1,0.0,0.2,0.0\\n'260',3,11,1982,2130.0,11.2,13.8,1.383112,1.0,0.0,0.3,0.0\\n'260',4,11,1982,1030.0,10.4,12.6,1.260982,2.1,0.0,0.2,0.0\\n'260',5,11,1982,1590.0,7.4,11.9,1.067044,3.1,0.0,0.2,0.0\\n'260',6,11,1982,6590.0,4.1,9.3,0.721775,6.2,0.0,0.9,0.0\\n'260',7,11,1982,5200.0,2.4,9.5,0.503152,5.7,0.0,0.7,0.0\\n'260',8,11,1982,3640.0,7.7,16.5,1.083053,5.7,5.2,0.6,0.213\\n'260',9,11,1982,1910.0,9.4,13.2,1.160472,4.6,0.0,0.3,0.0\\n'260',10,11,1982,1820.0,9.0,12.1,1.142723,5.1,1.1,0.3,0.117\\n'260',11,11,1982,4730.0,8.0,14.6,1.190953,3.6,0.0,0.7,0.0\\n'260',12,11,1982,2160.0,8.1,14.5,1.099229,5.1,4.5,0.3,0.129\\n'260',13,11,1982,2140.0,3.5,8.5,0.811305,3.6,0.8,0.3,0.037\\n'260',14,11,1982,4710.0,3.9,8.1,0.769698,3.6,3.3,0.6,0.225\\n'260',15,11,1982,4430.0,-0.8,7.4,0.663915,2.1,7.8,0.5,0.333\\n'260',16,11,1982,750.0,-0.5,7.8,0.664251,4.6,4.5,0.1,0.183\\n'260',17,11,1982,2700.0,3.7,9.2,0.797137,4.1,7.0,0.4,0.3\\n'260',18,11,1982,650.0,7.2,12.3,0.996312,5.7,7.4,0.1,0.238\\n'260',19,11,1982,3250.0,5.2,10.6,0.77661,5.7,3.0,0.5,0.021\\n'260',20,11,1982,2900.0,5.3,11.0,0.887243,4.6,1.3,0.4,0.033\\n'260',21,11,1982,3320.0,5.4,8.8,0.865434,5.1,0.0,0.5,0.0\\n'260',22,11,1982,2030.0,4.6,8.9,0.867533,5.1,9.7,0.3,0.238\\n'260',23,11,1982,780.0,3.9,12.7,0.928447,4.1,2.3,0.1,0.167\\n'260',24,11,1982,2080.0,5.9,13.8,0.920053,5.7,0.0,0.3,0.0\\n'260',25,11,1982,760.0,6.5,9.3,0.879756,5.7,2.2,0.1,0.221\\n'260',26,11,1982,1580.0,3.4,8.9,0.839914,3.1,1.4,0.2,0.017\\n'260',27,11,1982,2580.0,1.1,7.1,0.776322,2.1,0.0,0.3,0.0\\n'260',28,11,1982,2120.0,1.5,5.0,0.75038,3.1,0.0,0.3,0.0\\n'260',29,11,1982,1430.0,2.0,3.8,0.749753,2.1,0.0,0.2,0.0\\n'260',30,11,1982,1390.0,0.4,4.1,0.662482,3.1,0.0,0.2,0.0\\n'260',1,12,1982,3650.0,-1.5,2.3,0.552923,3.1,0.0,0.4,0.0\\n'260',2,12,1982,940.0,-2.5,1.6,0.553269,1.0,0.0,0.1,0.0\\n'260',3,12,1982,460.0,1.1,2.9,0.637275,1.0,0.0,0.1,0.0\\n'260',4,12,1982,360.0,1.5,3.5,0.681904,2.1,0.0,0.0,0.0\\n'260',5,12,1982,1660.0,2.0,6.0,0.734982,4.1,4.8,0.2,0.229\\n'260',6,12,1982,3090.0,-2.3,7.0,0.698724,1.0,0.6,0.4,0.1\\n'260',7,12,1982,1190.0,-2.6,11.1,0.840273,2.6,4.6,0.1,0.125\\n'260',8,12,1982,2700.0,3.9,11.9,0.828349,5.1,0.1,0.4,0.008\\n'260',9,12,1982,630.0,2.3,9.2,0.778819,5.1,10.5,0.1,0.242\\n'260',10,12,1982,990.0,3.5,11.5,0.861428,5.7,9.5,0.1,0.283\\n'260',11,12,1982,1560.0,1.6,7.5,0.743763,4.6,7.5,0.2,0.125\\n'260',12,12,1982,2110.0,-0.1,3.2,0.656736,2.6,0.0,0.2,0.0\\n'260',13,12,1982,1210.0,-2.1,0.0,0.557997,2.1,0.0,0.1,0.0\\n'260',14,12,1982,680.0,-2.8,1.9,0.546251,4.1,0.3,0.1,0.037\\n'260',15,12,1982,450.0,1.9,13.0,0.946392,8.2,1.4,0.1,0.183\\n'260',16,12,1982,1280.0,4.2,11.5,0.774123,6.2,3.1,0.2,0.067\\n'260',17,12,1982,1010.0,0.3,4.4,0.601767,2.6,4.1,0.1,0.233\\n'260',18,12,1982,2130.0,-1.0,3.6,0.627807,2.1,1.5,0.2,0.046\\n'260',19,12,1982,2640.0,-1.1,6.9,0.61662,6.7,8.6,0.3,0.158\\n'260',20,12,1982,1680.0,4.2,7.2,0.76758,7.2,1.7,0.2,0.046\\n'260',21,12,1982,660.0,2.9,5.3,0.733193,7.2,9.0,0.1,0.363\\n'260',22,12,1982,990.0,-1.1,3.5,0.642937,1.5,4.4,0.1,0.258\\n'260',23,12,1982,2420.0,-2.4,2.8,0.592184,1.5,0.2,0.3,0.004\\n'260',24,12,1982,640.0,-1.5,2.9,0.57835,5.1,0.3,0.1,0.117\\n'260',25,12,1982,800.0,2.9,6.2,0.850271,2.1,0.1,0.1,0.021\\n'260',26,12,1982,860.0,6.2,8.5,0.962404,3.6,0.1,0.1,0.033\\n'260',27,12,1982,2630.0,5.5,9.7,0.848755,5.1,0.4,0.4,0.037\\n'260',28,12,1982,1630.0,2.0,6.9,0.694826,4.1,0.2,0.2,0.008\\n'260',29,12,1982,3350.0,-2.0,6.9,0.64678,1.0,0.0,0.4,0.0\\n'260',30,12,1982,2060.0,-0.1,4.9,0.667006,2.6,0.0,0.2,0.0\\n'260',31,12,1982,930.0,-1.3,1.6,0.566981,3.1,0.0,0.1,0.0\\n'260',1,1,1983,2740.0,-1.9,3.1,0.553008,5.1,1.5,0.3,0.154\\n'260',2,1,1983,1450.0,2.7,4.6,0.756846,3.6,0.0,0.2,0.0\\n'260',3,1,1983,270.0,3.4,11.0,0.970035,6.7,20.9,0.0,0.65\\n'260',4,1,1983,890.0,3.9,11.7,0.838558,7.2,12.0,0.1,0.375\\n'260',5,1,1983,960.0,4.8,12.9,1.027281,6.2,2.6,0.1,0.129\\n'260',6,1,1983,1990.0,5.0,12.9,0.896665,8.2,2.2,0.3,0.138\\n'260',7,1,1983,2690.0,3.1,7.8,0.707652,5.7,0.1,0.4,0.004\\n'260',8,1,1983,3480.0,2.1,7.6,0.697729,4.1,0.4,0.4,0.042\\n'260',9,1,1983,690.0,3.4,9.0,0.804707,5.7,4.6,0.1,0.15\\n'260',10,1,1983,2260.0,2.5,9.2,0.855053,3.6,0.2,0.3,0.033\\n'260',11,1,1983,2040.0,6.5,10.0,0.968094,3.6,0.0,0.3,0.0\\n'260',12,1,1983,670.0,4.1,7.5,0.779168,5.1,0.0,0.1,0.0\\n'260',13,1,1983,570.0,0.6,6.9,0.671196,5.7,3.6,0.1,0.242\\n'260',14,1,1983,390.0,0.7,7.0,0.694176,5.7,10.1,0.0,0.308\\n'260',15,1,1983,1040.0,4.0,9.7,0.853546,5.7,5.4,0.1,0.254\\n'260',16,1,1983,3150.0,7.3,9.5,0.913899,5.7,0.0,0.4,0.0\\n'260',17,1,1983,510.0,7.1,9.0,0.918209,5.7,0.0,0.1,0.0\\n'260',18,1,1983,4200.0,2.2,8.4,0.636568,7.2,1.4,0.5,0.021\\n'260',19,1,1983,1950.0,0.8,5.4,0.598978,4.6,1.6,0.2,0.037\\n'260',20,1,1983,2130.0,-0.3,5.1,0.591123,3.1,0.0,0.3,0.0\\n'260',21,1,1983,1310.0,5.1,7.3,0.748051,4.6,0.0,0.2,0.0\\n'260',22,1,1983,1030.0,4.3,6.8,0.681467,2.6,0.0,0.1,0.0\\n'260',23,1,1983,4940.0,-1.8,4.8,0.579507,1.5,0.0,0.6,0.0\\n'260',24,1,1983,4420.0,-1.3,5.3,0.574987,3.1,0.0,0.5,0.0\\n'260',25,1,1983,630.0,4.0,7.9,0.768895,3.1,4.7,0.1,0.363\\n'260',26,1,1983,2960.0,6.1,11.7,1.048326,4.1,0.1,0.4,0.033\\n'260',27,1,1983,690.0,9.2,12.4,0.983356,6.7,0.3,0.1,0.033\\n'260',28,1,1983,590.0,7.8,10.0,0.993851,6.2,6.1,0.1,0.163\\n'260',29,1,1983,4190.0,3.7,10.5,0.7615,5.7,0.0,0.6,0.0\\n'260',30,1,1983,2320.0,0.8,7.8,0.675794,5.7,5.8,0.3,0.154\\n'260',31,1,1983,2550.0,0.6,10.2,0.813613,5.7,11.0,0.3,0.392\\n'260',1,2,1983,4030.0,2.9,10.8,0.689378,10.3,6.9,0.5,0.246\\n'260',2,2,1983,4330.0,0.6,6.3,0.611743,4.6,8.8,0.5,0.163\\n'260',3,2,1983,4150.0,-0.7,4.9,0.564483,2.6,2.9,0.5,0.058\\n'260',4,2,1983,6350.0,-3.2,5.9,0.559156,2.6,0.0,0.7,0.0\\n'260',5,2,1983,3600.0,0.2,5.5,0.628839,4.6,10.7,0.4,0.358\\n'260',6,2,1983,2550.0,1.1,4.8,0.693013,2.6,3.3,0.3,0.171\\n'260',7,2,1983,1620.0,0.4,1.8,0.569637,4.1,0.8,0.2,0.079\\n'260',8,2,1983,2490.0,-1.3,1.2,0.533078,5.1,0.2,0.3,0.058\\n'260',9,2,1983,2160.0,-2.0,-0.4,0.47859,2.6,0.3,0.2,0.054\\n'260',10,2,1983,1070.0,-4.9,-1.8,0.43756,1.5,0.0,0.1,0.0\\n'260',11,2,1983,5620.0,-4.9,0.4,0.462618,3.1,0.0,0.6,0.0\\n'260',12,2,1983,5390.0,-4.4,0.3,0.450621,3.1,0.0,0.5,0.0\\n'260',13,2,1983,8320.0,-5.9,-0.8,0.368139,3.1,0.0,0.8,0.0\\n'260',14,2,1983,8530.0,-6.8,0.9,0.386207,4.6,0.0,0.8,0.0\\n'260',15,2,1983,7600.0,-3.4,2.3,0.474523,5.1,0.0,0.8,0.0\\n'260',16,2,1983,8910.0,-6.6,1.7,0.335592,3.6,0.0,0.9,0.0\\n'260',17,2,1983,8780.0,-3.0,3.0,0.458562,3.6,0.0,0.9,0.0\\n'260',18,2,1983,9340.0,-4.8,3.4,0.468922,2.1,0.0,0.9,0.0\\n'260',19,2,1983,3770.0,-1.7,2.7,0.493508,1.5,0.0,0.4,0.0\\n'260',20,2,1983,5640.0,0.2,5.2,0.500901,1.5,0.0,0.6,0.0\\n'260',21,2,1983,9920.0,-3.5,4.0,0.394333,3.1,0.0,1.1,0.0\\n'260',22,2,1983,10140.0,-5.9,2.3,0.286412,3.6,0.0,1.0,0.0\\n'260',23,2,1983,10510.0,-4.7,5.3,0.268901,5.7,0.0,1.1,0.0\\n'260',24,2,1983,9450.0,-1.9,8.0,0.437964,3.6,0.0,1.1,0.0\\n'260',25,2,1983,4250.0,3.3,9.2,0.697345,3.1,0.3,0.5,0.058\\n'260',26,2,1983,1770.0,3.2,7.9,0.874418,2.6,2.2,0.2,0.104\\n'260',27,2,1983,1410.0,4.5,7.6,0.836525,4.1,7.2,0.2,0.283\\n'260',28,2,1983,3970.0,2.0,6.5,0.693331,3.6,0.6,0.5,0.046\\n'260',1,3,1983,5440.0,-0.5,6.3,0.663856,2.1,1.2,0.6,0.029\\n'260',2,3,1983,7420.0,0.9,7.6,0.641779,2.1,0.0,0.9,0.0\\n'260',3,3,1983,10320.0,-0.7,8.4,0.642647,2.6,0.0,1.3,0.0\\n'260',4,3,1983,8390.0,0.1,9.9,0.670373,2.1,0.0,1.0,0.0\\n'260',5,3,1983,9790.0,0.9,10.8,0.737249,3.6,0.0,1.3,0.0\\n'260',6,3,1983,4380.0,5.8,10.0,0.866272,4.1,0.0,0.6,0.0\\n'260',7,3,1983,7870.0,5.3,11.8,0.848706,3.1,0.0,1.1,0.0\\n'260',8,3,1983,9590.0,2.1,11.6,0.802579,2.6,0.0,1.3,0.0\\n'260',9,3,1983,3070.0,2.1,7.1,0.717934,2.6,0.0,0.4,0.0\\n'260',10,3,1983,5740.0,2.1,11.1,0.840742,3.1,0.0,0.8,0.0\\n'260',11,3,1983,9780.0,-1.4,8.0,0.527601,3.1,0.0,1.2,0.0\\n'260',12,3,1983,13360.0,-3.0,8.8,0.468893,3.1,0.0,1.6,0.0\\n'260',13,3,1983,11810.0,0.2,13.0,0.550036,3.6,0.0,1.6,0.0\\n'260',14,3,1983,4930.0,6.3,13.3,0.972809,3.6,7.8,0.7,0.088\\n'260',15,3,1983,8650.0,1.8,10.8,0.762319,2.1,0.0,1.1,0.0\\n'260',16,3,1983,9670.0,0.9,10.5,0.725953,2.1,0.0,1.2,0.0\\n'260',17,3,1983,1870.0,6.5,10.0,1.007173,4.1,4.7,0.3,0.296\\n'260',18,3,1983,3340.0,8.9,11.5,1.156918,3.1,1.6,0.5,0.104\\n'260',19,3,1983,2050.0,6.2,10.1,1.003781,3.6,8.0,0.3,0.45\\n'260',20,3,1983,3830.0,5.5,10.5,0.907861,4.1,3.9,0.5,0.192\\n'260',21,3,1983,4990.0,1.7,8.5,0.710951,5.7,4.4,0.6,0.125\\n'260',22,3,1983,5910.0,2.8,7.1,0.60874,7.2,2.6,0.7,0.079\\n'260',23,3,1983,5030.0,1.0,9.0,0.744113,5.7,11.8,0.7,0.408\\n'260',24,3,1983,5760.0,2.1,8.0,0.657875,5.7,0.0,0.7,0.0\\n'260',25,3,1983,8240.0,1.5,6.7,0.598168,5.1,14.5,1.0,0.279\\n'260',26,3,1983,11590.0,1.6,7.7,0.639192,5.1,4.7,1.4,0.158\\n'260',27,3,1983,8140.0,0.8,7.7,0.635723,3.6,5.4,1.0,0.346\\n'260',28,3,1983,11730.0,-0.2,8.3,0.61741,2.6,0.2,1.4,0.004\\n'260',29,3,1983,10810.0,-1.4,9.1,0.576434,3.1,1.6,1.4,0.125\\n'260',30,3,1983,9900.0,3.3,10.2,0.717658,5.1,3.9,1.3,0.25\\n'260',31,3,1983,6570.0,3.7,9.9,0.784719,2.6,4.3,0.9,0.112\\n'260',1,4,1983,9030.0,4.6,13.5,0.816495,3.6,0.0,1.3,0.0\\n'260',2,4,1983,5520.0,0.1,7.9,0.717841,4.1,0.0,0.7,0.0\\n'260',3,4,1983,13190.0,-1.4,8.1,0.594278,2.1,0.5,1.6,0.025\\n'260',4,4,1983,7040.0,-2.2,6.2,0.605896,3.6,0.7,0.8,0.079\\n'260',5,4,1983,8720.0,1.5,8.5,0.715226,3.6,9.5,1.1,0.233\\n'260',6,4,1983,11640.0,2.4,9.4,0.730947,4.1,3.7,1.5,0.213\\n'260',7,4,1983,10410.0,1.9,9.6,0.705431,4.1,3.1,1.3,0.067\\n'260',8,4,1983,7010.0,1.9,9.7,0.645697,3.6,2.4,0.9,0.171\\n'260',9,4,1983,13890.0,0.7,11.6,0.64996,1.5,0.0,1.9,0.0\\n'260',10,4,1983,5320.0,3.7,14.5,1.005681,2.6,8.0,0.7,0.154\\n'260',11,4,1983,9530.0,6.1,12.1,0.851992,2.6,1.4,1.4,0.1\\n'260',12,4,1983,9870.0,3.4,8.6,0.754101,5.1,6.4,1.3,0.388\\n'260',13,4,1983,14570.0,1.1,10.2,0.625325,2.6,0.0,1.9,0.0\\n'260',14,4,1983,12190.0,5.9,11.8,0.847165,3.1,1.2,1.7,0.058\\n'260',15,4,1983,20380.0,2.0,13.8,0.759566,2.1,0.0,2.9,0.0\\n'260',16,4,1983,20100.0,0.9,17.4,0.769897,3.1,0.0,3.1,0.0\\n'260',17,4,1983,4190.0,10.3,14.3,1.088489,3.1,3.3,0.6,0.158\\n'260',18,4,1983,12900.0,10.1,19.5,1.067373,2.1,0.0,2.1,0.0\\n'260',19,4,1983,5540.0,4.1,12.0,0.833752,3.6,0.0,0.8,0.0\\n'260',20,4,1983,15450.0,0.8,15.2,0.752266,3.6,0.0,2.3,0.0\\n'260',21,4,1983,4360.0,6.9,12.5,0.984918,2.1,10.9,0.6,0.429\\n'260',22,4,1983,14800.0,5.6,13.7,0.936218,2.6,0.0,2.2,0.0\\n'260',23,4,1983,10690.0,8.1,16.6,1.073056,2.6,3.9,1.6,0.142\\n'260',24,4,1983,18500.0,5.1,15.8,0.879031,2.1,0.0,2.8,0.0\\n'260',25,4,1983,7990.0,7.0,14.2,1.00029,3.1,0.1,1.2,0.004\\n'260',26,4,1983,14090.0,6.0,15.7,0.975919,2.1,0.2,2.1,0.008\\n'260',27,4,1983,5790.0,5.2,10.9,0.972505,3.6,25.7,0.8,0.35\\n'260',28,4,1983,11820.0,6.0,14.3,0.989153,2.6,0.0,1.7,0.0\\n'260',29,4,1983,15880.0,5.2,15.1,0.89243,2.6,4.0,2.3,0.133\\n'260',30,4,1983,21720.0,3.7,18.1,0.875835,2.1,0.0,3.3,0.0\\n'260',1,5,1983,7890.0,9.1,15.7,1.267797,2.6,12.1,1.2,0.492\\n'260',2,5,1983,12370.0,7.3,12.5,0.953877,4.6,9.0,1.8,0.321\\n'260',3,5,1983,2540.0,6.2,10.1,0.943411,4.1,14.0,0.4,0.513\\n'260',4,5,1983,16000.0,3.0,13.8,0.860165,2.1,0.0,2.2,0.0\\n'260',5,5,1983,22670.0,0.8,15.8,0.772442,2.1,0.0,3.3,0.0\\n'260',6,5,1983,11360.0,7.4,17.5,1.054555,3.1,4.8,1.8,0.108\\n'260',7,5,1983,9660.0,9.8,16.0,1.263418,1.5,1.9,1.5,0.075\\n'260',8,5,1983,12940.0,8.0,14.7,1.116461,2.6,7.9,1.9,0.071\\n'260',9,5,1983,10660.0,9.0,15.9,1.07172,3.6,3.5,1.6,0.096\\n'260',10,5,1983,20220.0,4.9,14.2,0.759651,3.6,0.7,2.9,0.037\\n'260',11,5,1983,8300.0,5.6,11.1,0.918908,3.1,7.6,1.2,0.392\\n'260',12,5,1983,8380.0,5.1,13.5,0.872705,5.1,5.1,1.2,0.117\\n'260',13,5,1983,15850.0,7.9,16.0,1.053792,3.6,0.2,2.4,0.012\\n'260',14,5,1983,18180.0,7.7,16.2,1.042532,2.6,0.0,2.8,0.0\\n'260',15,5,1983,12730.0,5.6,16.1,1.054094,2.6,0.6,1.9,0.008\\n'260',16,5,1983,6040.0,6.5,13.1,1.067111,2.1,2.1,0.9,0.121\\n'260',17,5,1983,13600.0,8.0,16.3,1.06461,2.1,1.6,2.1,0.067\\n'260',18,5,1983,13340.0,7.8,16.5,1.096369,2.6,3.2,2.0,0.121\\n'260',19,5,1983,16030.0,8.5,15.8,1.085811,3.1,6.8,2.4,0.067\\n'260',20,5,1983,16920.0,7.1,17.0,1.003145,2.1,9.1,2.6,0.271\\n'260',21,5,1983,4610.0,8.3,12.7,1.199247,2.1,11.2,0.7,0.487\\n'260',22,5,1983,14000.0,5.5,15.0,0.967229,2.1,0.7,2.1,0.008\\n'260',23,5,1983,22330.0,3.4,16.9,0.900028,2.1,0.0,3.4,0.0\\n'260',24,5,1983,3500.0,9.0,11.3,1.150808,4.1,7.4,0.5,0.638\\n'260',25,5,1983,2340.0,8.2,10.8,1.114734,4.6,5.0,0.3,0.467\\n'260',26,5,1983,3230.0,8.4,10.1,1.013259,5.1,2.2,0.5,0.146\\n'260',27,5,1983,8160.0,6.3,10.8,0.945726,2.6,0.1,1.2,0.004\\n'260',28,5,1983,7080.0,6.3,12.4,1.01023,2.6,5.4,1.0,0.3\\n'260',29,5,1983,8540.0,7.2,12.3,0.996312,2.1,0.3,1.2,0.05\\n'260',30,5,1983,15340.0,3.9,16.2,0.947063,1.5,0.0,2.3,0.0\\n'260',31,5,1983,24490.0,10.8,22.8,1.173198,2.6,0.6,4.2,0.008\\n'260',1,6,1983,22930.0,13.8,25.0,1.580991,3.6,9.2,4.1,0.171\\n'260',2,6,1983,11420.0,10.2,18.0,1.30125,3.1,6.9,1.9,0.125\\n'260',3,6,1983,21140.0,10.0,20.4,1.260233,2.1,0.0,3.5,0.0\\n'260',4,6,1983,19950.0,12.4,24.0,1.556011,3.1,1.4,3.5,0.05\\n'260',5,6,1983,23150.0,8.8,21.0,1.176745,3.1,0.1,3.8,0.012\\n'260',6,6,1983,27510.0,6.8,19.6,0.982613,4.1,0.0,4.5,0.0\\n'260',7,6,1983,28300.0,9.9,24.0,0.98907,4.1,0.0,4.9,0.0\\n'260',8,6,1983,13700.0,14.0,26.0,1.799741,2.6,4.0,2.4,0.204\\n'260',9,6,1983,21330.0,12.8,21.5,1.427616,3.6,0.0,3.6,0.0\\n'260',10,6,1983,21390.0,11.0,18.7,1.214729,2.6,0.0,3.5,0.0\\n'260',11,6,1983,14390.0,10.8,19.5,1.25974,3.1,0.0,2.4,0.0\\n'260',12,6,1983,21550.0,11.0,21.3,1.364271,3.1,0.0,3.7,0.0\\n'260',13,6,1983,25580.0,9.7,20.4,1.123028,2.6,0.0,4.3,0.0\\n'260',14,6,1983,17820.0,8.2,17.0,1.035484,3.6,0.4,2.8,0.012\\n'260',15,6,1983,20940.0,7.4,15.8,1.003384,3.1,1.6,3.2,0.021\\n'260',16,6,1983,17710.0,6.2,15.8,0.962499,2.6,0.0,2.6,0.0\\n'260',17,6,1983,27760.0,4.3,16.6,0.807866,3.6,0.0,4.2,0.0\\n'260',18,6,1983,18960.0,9.9,20.6,1.143332,3.6,0.0,3.2,0.0\\n'260',19,6,1983,26350.0,9.2,20.3,1.26154,4.1,0.0,4.3,0.0\\n'260',20,6,1983,27810.0,12.3,26.2,1.255046,3.1,0.0,5.0,0.0\\n'260',21,6,1983,25920.0,14.2,28.4,1.203826,2.6,0.0,4.9,0.0\\n'260',22,6,1983,25180.0,15.7,30.3,1.39149,2.6,0.0,4.9,0.0\\n'260',23,6,1983,21910.0,16.4,29.5,1.779786,1.5,0.1,4.1,0.021\\n'260',24,6,1983,16930.0,15.1,26.1,1.770889,2.1,0.0,3.1,0.0\\n'260',25,6,1983,16590.0,14.4,22.5,1.479593,3.1,0.0,2.9,0.0\\n'260',26,6,1983,23210.0,12.1,24.3,1.032421,2.1,0.0,4.1,0.0\\n'260',27,6,1983,16790.0,8.9,19.3,1.23,3.6,0.4,2.7,0.021\\n'260',28,6,1983,18450.0,8.6,19.4,1.082981,3.1,0.2,3.0,0.012\\n'260',29,6,1983,3610.0,13.2,16.5,1.522593,3.6,5.7,0.6,0.333\\n'260',30,6,1983,9590.0,12.4,18.2,1.31892,2.1,5.3,1.6,0.229\\n'260',1,7,1983,22240.0,9.3,19.2,1.18065,2.1,0.0,3.6,0.0\\n'260',2,7,1983,14100.0,9.6,20.4,1.304776,3.1,0.0,2.3,0.0\\n'260',3,7,1983,23400.0,8.8,22.1,1.271244,1.5,0.0,4.0,0.0\\n'260',4,7,1983,25600.0,9.2,25.3,1.242922,1.5,0.0,4.5,0.0\\n'260',5,7,1983,26060.0,13.1,29.2,1.402152,2.6,0.0,4.9,0.0\\n'260',6,7,1983,15100.0,16.4,27.5,1.83002,2.1,0.0,2.8,0.0\\n'260',7,7,1983,19520.0,17.2,28.4,1.948149,1.5,0.0,3.7,0.0\\n'260',8,7,1983,22590.0,16.6,28.7,1.889397,2.1,0.0,4.3,0.0\\n'260',9,7,1983,21580.0,16.6,27.4,1.838794,2.6,0.0,4.1,0.0\\n'260',10,7,1983,23230.0,16.7,31.3,1.923619,2.6,0.0,4.5,0.0\\n'260',11,7,1983,23820.0,17.8,33.0,1.849063,2.6,0.0,4.8,0.0\\n'260',12,7,1983,26100.0,17.3,31.3,1.832297,2.6,0.0,5.0,0.0\\n'260',13,7,1983,18040.0,13.7,22.7,1.594278,2.6,0.0,3.1,0.0\\n'260',14,7,1983,25120.0,13.1,24.5,1.262602,2.1,0.0,4.4,0.0\\n'260',15,7,1983,21850.0,12.5,29.8,1.820285,2.6,0.0,4.1,0.0\\n'260',16,7,1983,21960.0,16.9,29.6,2.013475,2.6,0.0,4.2,0.0\\n'260',17,7,1983,20720.0,16.2,33.2,1.9803,2.6,0.0,4.0,0.0\\n'260',18,7,1983,14940.0,15.6,24.3,1.931775,2.6,0.0,2.7,0.0\\n'260',19,7,1983,12960.0,13.9,22.7,1.669025,2.6,0.0,2.3,0.0\\n'260',20,7,1983,18710.0,10.9,19.9,1.085849,2.6,0.0,3.1,0.0\\n'260',21,7,1983,26670.0,9.4,22.7,1.090424,2.1,0.0,4.5,0.0\\n'260',22,7,1983,24950.0,11.9,29.0,1.334964,2.6,0.0,4.6,0.0\\n'260',23,7,1983,20880.0,15.5,27.9,1.748385,2.6,0.0,3.9,0.0\\n'260',24,7,1983,9100.0,14.9,22.9,1.760249,1.0,17.0,1.6,0.096\\n'260',25,7,1983,21310.0,13.0,28.2,1.685808,1.0,0.0,4.0,0.0\\n'260',26,7,1983,16440.0,16.9,26.3,1.965647,2.1,2.9,3.1,0.033\\n'260',27,7,1983,13010.0,15.6,25.3,1.909257,2.6,0.4,2.4,0.042\\n'260',28,7,1983,10940.0,14.4,22.8,1.631517,3.1,0.0,1.9,0.0\\n'260',29,7,1983,18110.0,14.4,25.2,1.797276,2.1,0.0,3.2,0.0\\n'260',30,7,1983,18340.0,12.0,26.4,1.68218,1.5,0.0,3.3,0.0\\n'260',31,7,1983,19370.0,14.8,30.8,1.606875,2.1,0.0,3.8,0.0\\n'260',1,8,1983,5090.0,13.6,24.6,1.806963,3.6,7.5,0.9,0.1\\n'260',2,8,1983,11880.0,10.5,18.4,1.166096,2.1,7.0,1.9,0.05\\n'260',3,8,1983,15450.0,7.3,20.2,1.157261,1.5,0.0,2.5,0.0\\n'260',4,8,1983,11720.0,9.7,22.3,1.252272,2.1,0.0,2.0,0.0\\n'260',5,8,1983,8840.0,13.0,19.5,1.38766,2.6,1.9,1.5,0.029\\n'260',6,8,1983,7000.0,13.1,17.9,1.456589,3.1,2.2,1.2,0.079\\n'260',7,8,1983,18310.0,14.5,23.8,1.642873,2.1,0.0,3.2,0.0\\n'260',8,8,1983,17730.0,13.3,26.8,1.566527,2.1,0.0,3.3,0.0\\n'260',9,8,1983,20740.0,15.3,28.5,1.571394,3.1,0.0,3.9,0.0\\n'260',10,8,1983,19390.0,15.0,27.0,1.789735,3.6,0.0,3.5,0.0\\n'260',11,8,1983,23330.0,12.0,24.9,1.481509,3.1,0.0,4.1,0.0\\n'260',12,8,1983,16080.0,9.4,22.9,1.399549,2.6,0.0,2.7,0.0\\n'260',13,8,1983,12370.0,12.1,20.2,1.295915,2.6,0.0,2.1,0.0\\n'260',14,8,1983,11220.0,11.2,21.2,1.401211,1.0,0.1,1.9,0.012\\n'260',15,8,1983,22140.0,10.5,24.4,1.362025,1.5,0.0,3.8,0.0\\n'260',16,8,1983,14190.0,12.7,23.4,1.56163,2.6,0.0,2.5,0.0\\n'260',17,8,1983,3920.0,16.0,19.7,1.845857,2.1,3.7,0.7,0.188\\n'260',18,8,1983,19650.0,13.8,26.4,1.56338,2.1,0.0,3.5,0.0\\n'260',19,8,1983,18390.0,13.7,30.8,1.433142,2.1,0.0,3.5,0.0\\n'260',20,8,1983,17700.0,18.2,27.6,2.082162,2.1,6.1,3.3,0.104\\n'260',21,8,1983,14000.0,15.0,25.5,1.929581,1.5,4.3,2.5,0.088\\n'260',22,8,1983,18120.0,13.6,26.6,1.701658,1.0,0.0,3.3,0.0\\n'260',23,8,1983,16770.0,15.3,25.8,1.790722,2.1,0.0,3.1,0.0\\n'260',24,8,1983,16940.0,15.8,23.6,1.764728,3.6,0.0,3.0,0.0\\n'260',25,8,1983,16380.0,15.3,27.5,1.797734,3.6,0.0,3.0,0.0\\n'260',26,8,1983,18300.0,13.4,24.2,1.568164,3.6,0.0,3.3,0.0\\n'260',27,8,1983,16470.0,10.0,21.2,1.394475,2.1,0.0,2.8,0.0\\n'260',28,8,1983,10560.0,13.7,19.8,1.39749,3.1,0.0,1.8,0.0\\n'260',29,8,1983,14960.0,12.3,20.1,1.264697,2.6,0.0,2.5,0.0\\n'260',30,8,1983,19310.0,10.5,26.0,1.323587,2.1,0.0,3.4,0.0\\n'260',31,8,1983,16960.0,10.9,28.1,1.259776,1.5,0.0,3.1,0.0\\n'260',1,9,1983,3870.0,15.6,21.3,1.658801,1.5,1.0,0.7,0.025\\n'260',2,9,1983,12650.0,15.1,22.1,1.456698,4.1,0.0,2.2,0.0\\n'260',3,9,1983,3540.0,13.4,18.0,1.411388,6.2,6.2,0.6,0.242\\n'260',4,9,1983,10250.0,11.1,18.2,1.290996,4.6,0.0,1.7,0.0\\n'260',5,9,1983,9800.0,9.1,17.3,1.113548,4.1,0.2,1.6,0.004\\n'260',6,9,1983,15130.0,7.5,17.4,0.980244,3.1,2.2,2.4,0.025\\n'260',7,9,1983,16180.0,5.6,17.5,0.920213,2.1,0.0,2.4,0.0\\n'260',8,9,1983,11630.0,6.9,19.6,1.010116,2.6,0.1,1.9,0.021\\n'260',9,9,1983,6840.0,13.6,18.7,1.454523,3.6,0.1,1.1,0.017\\n'260',10,9,1983,8720.0,11.0,19.3,1.258916,3.6,4.9,1.4,0.112\\n'260',11,9,1983,3930.0,8.9,12.9,1.159176,4.6,17.5,0.6,0.475\\n'260',12,9,1983,10360.0,11.1,17.4,1.306689,3.6,25.3,1.7,0.242\\n'260',13,9,1983,11530.0,9.7,15.4,1.073628,3.6,13.2,1.8,0.325\\n'260',14,9,1983,3090.0,12.1,17.7,1.586034,4.1,14.1,0.5,0.279\\n'260',15,9,1983,6530.0,12.4,19.1,1.44015,4.6,3.8,1.1,0.042\\n'260',16,9,1983,8690.0,10.8,16.4,1.230836,5.1,1.5,1.4,0.017\\n'260',17,9,1983,6340.0,10.8,15.5,1.359076,3.6,12.7,1.0,0.246\\n'260',18,9,1983,2240.0,10.6,15.1,1.36655,4.1,8.5,0.4,0.492\\n'260',19,9,1983,12800.0,10.8,18.5,1.232933,4.1,0.0,2.1,0.0\\n'260',20,9,1983,11770.0,9.9,17.2,1.141062,3.1,0.6,1.9,0.025\\n'260',21,9,1983,7480.0,10.6,17.6,1.284108,3.6,2.4,1.2,0.15\\n'260',22,9,1983,10920.0,6.7,16.8,1.016862,2.6,0.1,1.7,0.017\\n'260',23,9,1983,14350.0,6.0,19.5,0.995596,2.1,0.0,2.3,0.0\\n'260',24,9,1983,8950.0,11.1,23.2,1.679829,3.1,0.1,1.5,0.008\\n'260',25,9,1983,14040.0,5.4,17.6,1.012026,1.0,0.0,2.1,0.0\\n'260',26,9,1983,13230.0,5.1,21.3,1.182113,1.0,0.0,2.1,0.0\\n'260',27,9,1983,6720.0,8.6,20.2,1.464559,1.0,0.0,1.1,0.0\\n'260',28,9,1983,7280.0,13.1,19.2,1.520681,2.6,0.0,1.2,0.0\\n'260',29,9,1983,11820.0,11.4,23.5,1.557151,1.5,0.0,2.0,0.0\\n'260',30,9,1983,6770.0,10.2,16.8,1.215383,3.1,0.0,1.1,0.0\\n'260',1,10,1983,9330.0,5.9,15.3,0.964949,3.1,0.0,1.4,0.0\\n'260',2,10,1983,5590.0,12.7,18.6,1.477076,2.6,0.2,0.9,0.021\\n'260',3,10,1983,4120.0,13.4,21.1,1.661856,3.1,0.0,0.7,0.0\\n'260',4,10,1983,10800.0,13.4,26.5,1.7554,3.1,1.7,1.9,0.008\\n'260',5,10,1983,8950.0,13.7,18.3,1.412557,5.1,0.5,1.5,0.008\\n'260',6,10,1983,6950.0,12.1,18.0,1.354463,3.6,0.0,1.1,0.0\\n'260',7,10,1983,4140.0,9.6,16.5,1.264954,4.1,2.7,0.7,0.167\\n'260',8,10,1983,3950.0,8.0,13.8,1.07511,3.6,5.4,0.6,0.229\\n'260',9,10,1983,5460.0,7.7,14.5,1.035147,2.6,0.8,0.8,0.046\\n'260',10,10,1983,1940.0,10.4,14.7,1.314243,5.1,1.4,0.3,0.079\\n'260',11,10,1983,9750.0,8.8,14.7,1.081627,4.1,2.2,1.5,0.037\\n'260',12,10,1983,5000.0,7.2,13.2,1.041295,3.6,0.0,0.8,0.0\\n'260',13,10,1983,9880.0,8.2,18.2,1.158189,4.1,0.0,1.6,0.0\\n'260',14,10,1983,6860.0,8.7,15.9,1.024569,4.1,0.5,1.1,0.025\\n'260',15,10,1983,5360.0,9.6,15.3,1.144818,6.7,2.0,0.8,0.158\\n'260',16,10,1983,6440.0,8.3,14.6,1.076815,7.7,6.5,0.9,0.112\\n'260',17,10,1983,3860.0,7.7,12.6,1.002612,4.1,7.2,0.6,0.225\\n'260',18,10,1983,1770.0,7.8,15.1,1.174045,5.1,0.1,0.3,0.025\\n'260',19,10,1983,6890.0,7.5,14.7,0.980729,4.6,1.0,1.1,0.088\\n'260',20,10,1983,3080.0,3.0,11.3,0.830396,2.1,0.0,0.4,0.0\\n'260',21,10,1983,7330.0,-0.1,12.2,0.733609,1.0,0.0,0.9,0.0\\n'260',22,10,1983,7790.0,-1.8,12.0,0.65334,0.5,0.0,0.9,0.0\\n'260',23,10,1983,8990.0,-2.3,11.2,0.676941,1.0,0.0,1.0,0.0\\n'260',24,10,1983,4550.0,-2.8,11.3,0.674527,1.5,0.0,0.5,0.0\\n'260',25,10,1983,5310.0,-2.7,9.4,0.628667,2.1,1.8,0.7,0.079\\n'260',26,10,1983,2730.0,6.9,13.2,1.134841,2.1,0.0,0.4,0.0\\n'260',27,10,1983,4990.0,7.8,14.1,1.044004,2.6,0.0,0.7,0.0\\n'260',28,10,1983,6870.0,2.5,12.4,0.772387,2.1,1.2,1.0,0.021\\n'260',29,10,1983,7690.0,-1.1,10.1,0.597034,1.5,0.0,0.9,0.0\\n'260',30,10,1983,7070.0,-3.4,10.2,0.629622,2.6,0.0,0.9,0.0\\n'260',31,10,1983,5090.0,5.5,13.4,0.8794,2.6,0.0,0.7,0.0\\n'260',1,11,1983,2490.0,7.3,13.4,1.105854,3.1,0.0,0.4,0.0\\n'260',2,11,1983,4550.0,8.3,15.4,1.238599,1.5,0.0,0.7,0.0\\n'260',3,11,1983,6390.0,5.6,13.3,1.035182,2.1,0.0,0.9,0.0\\n'260',4,11,1983,5720.0,3.4,14.3,0.992873,1.0,0.0,0.8,0.0\\n'260',5,11,1983,3970.0,4.4,12.9,1.072943,1.0,0.0,0.6,0.0\\n'260',6,11,1983,1280.0,9.0,10.6,1.16201,1.5,0.0,0.2,0.0\\n'260',7,11,1983,6370.0,4.6,14.3,0.986474,2.1,0.0,0.9,0.0\\n'260',8,11,1983,5330.0,5.2,14.5,0.981583,2.1,0.0,0.8,0.0\\n'260',9,11,1983,5050.0,6.1,16.5,1.0198,1.0,0.0,0.7,0.0\\n'260',10,11,1983,4920.0,4.5,14.6,0.932149,1.0,0.0,0.7,0.0\\n'260',11,11,1983,1010.0,4.0,9.2,0.872096,3.1,0.0,0.1,0.0\\n'260',12,11,1983,5950.0,-1.8,7.4,0.557609,2.6,0.0,0.7,0.0\\n'260',13,11,1983,5190.0,-3.3,4.2,0.424035,3.6,0.0,0.5,0.0\\n'260',14,11,1983,6300.0,-7.6,2.6,0.331054,2.6,0.0,0.6,0.0\\n'260',15,11,1983,1880.0,-7.0,7.7,0.564306,1.5,1.7,0.2,0.117\\n'260',16,11,1983,3950.0,3.0,9.6,0.829359,2.1,0.1,0.5,0.004\\n'260',17,11,1983,3350.0,-1.6,8.0,0.66046,2.1,0.0,0.4,0.0\\n'260',18,11,1983,2440.0,-4.8,5.2,0.541097,1.0,0.1,0.3,0.004\\n'260',19,11,1983,1210.0,4.1,7.9,0.814386,1.5,1.0,0.2,0.037\\n'260',20,11,1983,920.0,1.9,8.7,0.74055,2.1,0.9,0.1,0.025\\n'260',21,11,1983,4320.0,-1.2,6.9,0.557716,2.1,0.2,0.5,0.017\\n'260',22,11,1983,3370.0,-1.5,7.3,0.613489,1.5,0.0,0.4,0.0\\n'260',23,11,1983,4620.0,-2.9,7.8,0.611741,1.5,0.0,0.5,0.0\\n'260',24,11,1983,3810.0,-3.2,3.7,0.551719,2.1,1.0,0.4,0.079\\n'260',25,11,1983,450.0,3.5,13.6,1.109027,5.7,11.1,0.1,0.275\\n'260',26,11,1983,740.0,11.2,14.1,1.329009,6.7,12.9,0.1,0.392\\n'260',27,11,1983,430.0,8.9,15.1,1.245303,9.3,45.5,0.1,0.612\\n'260',28,11,1983,730.0,6.0,9.2,0.924812,2.6,7.5,0.1,0.133\\n'260',29,11,1983,2300.0,1.7,9.8,0.765925,2.6,0.6,0.3,0.008\\n'260',30,11,1983,3060.0,-1.7,6.7,0.597419,2.6,0.4,0.4,0.017\\n'260',1,12,1983,4460.0,-5.0,0.6,0.473249,1.5,0.0,0.4,0.0\\n'260',2,12,1983,3640.0,-5.1,0.1,0.465313,2.1,0.0,0.4,0.0\\n'260',3,12,1983,4030.0,-4.0,1.2,0.457591,2.1,0.0,0.4,0.0\\n'260',4,12,1983,3690.0,-4.5,4.3,0.484068,2.1,0.0,0.4,0.0\\n'260',5,12,1983,3490.0,0.5,5.9,0.60141,2.6,6.8,0.4,0.163\\n'260',6,12,1983,2670.0,0.3,7.0,0.707867,1.5,0.3,0.3,0.008\\n'260',7,12,1983,1500.0,-0.3,5.6,0.626489,1.5,0.0,0.2,0.0\\n'260',8,12,1983,400.0,1.5,4.1,0.661878,5.1,7.3,0.0,0.35\\n'260',9,12,1983,470.0,4.0,6.0,0.810555,5.1,22.5,0.1,0.558\\n'260',10,12,1983,2860.0,-1.3,6.0,0.545213,3.1,3.5,0.3,0.192\\n'260',11,12,1983,4380.0,-3.5,4.7,0.504901,1.0,1.1,0.5,0.05\\n'260',12,12,1983,1660.0,-6.0,-0.8,0.449555,2.1,0.0,0.2,0.0\\n'260',13,12,1983,3660.0,-5.3,3.8,0.5526,2.1,0.0,0.4,0.0\\n'260',14,12,1983,3670.0,-2.8,0.4,0.503161,4.1,0.0,0.4,0.0\\n'260',15,12,1983,2880.0,-2.0,4.0,0.526264,4.6,0.0,0.3,0.0\\n'260',16,12,1983,1210.0,-1.9,1.4,0.45031,3.1,0.0,0.1,0.0\\n'260',17,12,1983,1590.0,-2.1,5.5,0.553871,2.6,0.0,0.2,0.0\\n'260',18,12,1983,3350.0,2.3,4.8,0.692344,3.6,0.6,0.4,0.088\\n'260',19,12,1983,1650.0,4.1,8.9,0.858167,3.6,0.9,0.2,0.046\\n'260',20,12,1983,1610.0,6.1,9.4,0.875433,4.6,2.6,0.2,0.067\\n'260',21,12,1983,2600.0,4.4,8.7,0.824957,4.1,0.0,0.3,0.0\\n'260',22,12,1983,620.0,4.9,9.6,0.913546,5.7,13.3,0.1,0.192\\n'260',23,12,1983,1150.0,5.9,10.1,0.903154,5.1,1.3,0.2,0.025\\n'260',24,12,1983,480.0,5.8,13.4,0.968467,4.6,3.3,0.1,0.188\\n'260',25,12,1983,1120.0,9.4,10.9,1.120967,5.1,10.3,0.2,0.404\\n'260',26,12,1983,1340.0,2.7,10.3,0.790851,4.6,3.5,0.2,0.037\\n'260',27,12,1983,260.0,1.7,10.7,0.914474,6.2,1.6,0.0,0.083\\n'260',28,12,1983,340.0,9.0,10.9,1.131355,4.6,0.4,0.0,0.1\\n'260',29,12,1983,850.0,4.6,9.3,0.947076,3.1,0.0,0.1,0.0\\n'260',30,12,1983,2340.0,3.6,9.6,0.755978,3.1,0.0,0.3,0.0\\n'260',31,12,1983,1760.0,2.1,8.3,0.744903,5.7,0.0,0.2,0.0\\n'260',1,1,1984,850.0,8.2,10.0,0.93546,9.3,14.9,0.1,0.325\\n'260',2,1,1984,2390.0,4.5,9.4,0.818813,6.2,11.4,0.3,0.333\\n'260',3,1,1984,3570.0,2.1,9.5,0.66651,8.7,15.1,0.5,0.3\\n'260',4,1,1984,1980.0,0.9,7.1,0.634279,4.1,3.6,0.2,0.121\\n'260',5,1,1984,1830.0,0.3,5.9,0.67583,4.1,3.1,0.2,0.179\\n'260',6,1,1984,1090.0,1.4,6.3,0.762209,3.1,0.1,0.1,0.012\\n'260',7,1,1984,2630.0,4.2,8.1,0.767252,5.7,10.9,0.3,0.363\\n'260',8,1,1984,1490.0,1.7,5.6,0.66803,4.1,4.5,0.2,0.079\\n'260',9,1,1984,3390.0,1.0,5.8,0.638004,1.5,0.3,0.4,0.017\\n'260',10,1,1984,1810.0,-0.4,5.3,0.685586,3.6,0.0,0.2,0.0\\n'260',11,1,1984,370.0,5.2,7.8,0.91936,7.7,2.5,0.0,0.288\\n'260',12,1,1984,2440.0,2.0,7.2,0.727775,4.6,4.6,0.3,0.112\\n'260',13,1,1984,530.0,1.7,11.0,0.754683,8.7,9.6,0.1,0.371\\n'260',14,1,1984,1520.0,3.5,10.8,0.736989,8.2,5.9,0.2,0.2\\n'260',15,1,1984,2240.0,0.5,4.7,0.574206,5.7,2.0,0.3,0.092\\n'260',16,1,1984,1790.0,2.3,10.2,0.761976,6.7,13.4,0.2,0.304\\n'260',17,1,1984,2040.0,1.7,9.0,0.632242,7.7,0.3,0.3,0.008\\n'260',18,1,1984,2470.0,0.3,5.5,0.595986,4.1,0.1,0.3,0.004\\n'260',19,1,1984,1600.0,-2.9,2.5,0.583042,1.0,1.2,0.2,0.029\\n'260',20,1,1984,4990.0,-3.4,4.9,0.501802,1.5,0.0,0.5,0.0\\n'260',21,1,1984,3920.0,-4.5,0.0,0.482231,3.1,0.0,0.4,0.0\\n'260',22,1,1984,1480.0,-4.0,-2.1,0.419253,4.6,2.3,0.1,0.317\\n'260',23,1,1984,1390.0,-8.8,2.1,0.468184,4.6,10.4,0.1,0.475\\n'260',24,1,1984,1960.0,0.2,2.4,0.580657,5.1,3.4,0.2,0.242\\n'260',25,1,1984,4870.0,-3.0,3.9,0.524151,2.1,0.0,0.5,0.0\\n'260',26,1,1984,1310.0,-1.1,1.7,0.526062,5.7,0.1,0.1,0.012\\n'260',27,1,1984,3750.0,1.3,5.6,0.659079,4.6,0.0,0.5,0.0\\n'260',28,1,1984,350.0,3.5,5.3,0.771637,4.6,4.4,0.0,0.292\\n'260',29,1,1984,700.0,2.8,6.4,0.807206,3.6,5.7,0.1,0.329\\n'260',30,1,1984,2360.0,3.1,6.6,0.760002,4.1,1.4,0.3,0.067\\n'260',31,1,1984,5110.0,0.6,7.5,0.627638,4.6,2.0,0.6,0.196\\n'260',1,2,1984,2220.0,-0.3,4.7,0.649023,3.6,3.2,0.3,0.125\\n'260',2,2,1984,1410.0,3.5,6.8,0.820506,4.6,6.1,0.2,0.337\\n'260',3,2,1984,420.0,4.2,8.4,0.81891,6.2,6.6,0.1,0.312\\n'260',4,2,1984,2470.0,2.6,9.7,0.838611,4.6,2.1,0.3,0.213\\n'260',5,2,1984,4790.0,2.8,9.4,0.720493,5.7,6.9,0.6,0.208\\n'260',6,2,1984,1530.0,4.9,9.1,0.816008,6.7,20.5,0.2,0.475\\n'260',7,2,1984,2920.0,1.9,6.6,0.553759,6.7,0.6,0.4,0.012\\n'260',8,2,1984,3220.0,1.3,6.3,0.661552,6.2,16.6,0.4,0.354\\n'260',9,2,1984,7640.0,1.0,6.4,0.62765,4.1,1.7,0.9,0.017\\n'260',10,2,1984,5140.0,-0.4,8.3,0.685308,2.1,0.0,0.6,0.0\\n'260',11,2,1984,4490.0,4.1,8.7,0.808876,2.1,0.4,0.6,0.017\\n'260',12,2,1984,8140.0,-1.6,5.0,0.513147,2.6,0.0,0.9,0.0\\n'260',13,2,1984,8420.0,-3.3,6.0,0.411819,2.1,0.0,0.9,0.0\\n'260',14,2,1984,6050.0,-2.5,2.2,0.511794,2.1,0.0,0.6,0.0\\n'260',15,2,1984,3900.0,-4.5,-0.5,0.444786,2.1,0.0,0.4,0.0\\n'260',16,2,1984,6730.0,-5.6,1.1,0.47368,1.0,0.0,0.6,0.0\\n'260',17,2,1984,4440.0,-5.1,-1.7,0.467828,1.0,0.0,0.4,0.0\\n'260',18,2,1984,7790.0,-6.2,3.4,0.355914,2.6,0.0,0.8,0.0\\n'260',19,2,1984,7480.0,-5.7,2.7,0.384823,4.1,0.0,0.7,0.0\\n'260',20,2,1984,7160.0,-4.6,1.7,0.437087,3.6,0.0,0.7,0.0\\n'260',21,2,1984,4720.0,0.9,7.5,0.67775,4.6,2.9,0.6,0.196\\n'260',22,2,1984,3010.0,0.5,5.3,0.673686,2.1,0.1,0.4,0.062\\n'260',23,2,1984,1810.0,-1.1,1.4,0.57244,3.6,0.0,0.2,0.0\\n'260',24,2,1984,5030.0,-1.3,2.9,0.483163,4.1,0.0,0.5,0.0\\n'260',25,2,1984,2080.0,0.1,1.1,0.533451,5.7,0.0,0.2,0.0\\n'260',26,2,1984,1400.0,0.4,2.9,0.649844,3.6,0.3,0.2,0.083\\n'260',27,2,1984,850.0,1.1,2.5,0.667476,4.1,0.0,0.1,0.0\\n'260',28,2,1984,5120.0,-0.6,5.6,0.595712,3.1,0.0,0.6,0.0\\n'260',29,2,1984,7130.0,-2.9,6.3,0.618984,1.0,0.0,0.8,0.0\\n'260',1,3,1984,3040.0,-3.7,4.7,0.561184,2.1,1.9,0.3,0.192\\n'260',2,3,1984,4260.0,0.2,6.8,0.652639,5.7,10.1,0.5,0.333\\n'260',3,3,1984,7200.0,0.3,5.6,0.568227,4.1,0.1,0.8,0.004\\n'260',4,3,1984,10620.0,-3.6,7.4,0.535954,1.5,0.0,1.2,0.0\\n'260',5,3,1984,2870.0,2.5,7.7,0.798175,1.0,0.3,0.4,0.042\\n'260',6,3,1984,2410.0,5.1,8.2,0.907867,1.5,0.0,0.3,0.0\\n'260',7,3,1984,9220.0,1.0,8.6,0.63368,3.6,0.0,1.2,0.0\\n'260',8,3,1984,13230.0,-1.2,7.1,0.497213,3.6,0.0,1.6,0.0\\n'260',9,3,1984,12800.0,-2.0,5.5,0.438319,2.6,0.0,1.4,0.0\\n'260',10,3,1984,2130.0,-0.5,4.8,0.664353,2.6,7.8,0.2,0.675\\n'260',11,3,1984,1460.0,3.8,5.7,0.831968,2.6,1.4,0.2,0.213\\n'260',12,3,1984,11720.0,0.6,9.8,0.597021,3.6,0.0,1.5,0.0\\n'260',13,3,1984,5620.0,0.0,5.7,0.57557,3.6,0.0,0.7,0.0\\n'260',14,3,1984,11810.0,-0.7,8.7,0.548044,3.1,0.0,1.4,0.0\\n'260',15,3,1984,12510.0,-0.8,9.9,0.548112,4.1,0.0,1.5,0.0\\n'260',16,3,1984,9400.0,-0.2,7.7,0.587728,4.1,0.0,1.1,0.0\\n'260',17,3,1984,11170.0,-1.5,8.0,0.552329,3.6,0.0,1.3,0.0\\n'260',18,3,1984,12530.0,-1.5,7.3,0.52167,3.6,0.0,1.5,0.0\\n'260',19,3,1984,11760.0,-1.5,9.0,0.505916,3.1,0.0,1.4,0.0\\n'260',20,3,1984,13320.0,-2.7,9.6,0.43242,2.1,0.0,1.6,0.0\\n'260',21,3,1984,13220.0,-3.3,11.1,0.432914,1.0,0.0,1.6,0.0\\n'260',22,3,1984,12270.0,-2.3,10.2,0.511518,1.0,0.0,1.4,0.0\\n'260',23,3,1984,10470.0,-4.4,11.7,0.458811,1.5,0.0,1.3,0.0\\n'260',24,3,1984,3240.0,3.5,10.0,0.688762,5.7,2.1,0.4,0.1\\n'260',25,3,1984,10340.0,2.4,10.5,0.733966,4.6,0.8,1.4,0.075\\n'260',26,3,1984,3440.0,5.5,9.5,0.874317,5.7,2.9,0.5,0.15\\n'260',27,3,1984,5930.0,4.6,11.4,0.82505,5.1,14.3,0.8,0.238\\n'260',28,3,1984,7500.0,5.8,11.2,0.879624,4.6,9.8,1.0,0.321\\n'260',29,3,1984,4780.0,0.7,8.1,0.685333,2.6,2.1,0.6,0.158\\n'260',30,3,1984,12030.0,-0.7,10.3,0.634726,1.5,4.0,1.5,0.112\\n'260',31,3,1984,8080.0,0.5,6.5,0.640966,2.6,0.1,1.0,0.021\\n'260',1,4,1984,14810.0,-0.7,6.0,0.538154,5.1,0.0,1.7,0.0\\n'260',2,4,1984,11720.0,0.1,6.1,0.576548,5.7,0.0,1.4,0.0\\n'260',3,4,1984,5900.0,-0.7,5.2,0.544089,2.6,0.0,0.7,0.0\\n'260',4,4,1984,4890.0,1.6,6.0,0.650499,1.5,0.2,0.6,0.008\\n'260',5,4,1984,1740.0,1.9,4.0,0.720901,2.1,5.6,0.2,0.337\\n'260',6,4,1984,5720.0,2.7,7.1,0.706747,3.6,0.1,0.7,0.008\\n'260',7,4,1984,3710.0,1.9,7.8,0.770098,1.0,0.3,0.5,0.054\\n'260',8,4,1984,5130.0,0.9,8.1,0.74723,2.1,0.0,0.6,0.0\\n'260',9,4,1984,8490.0,1.9,9.6,0.747271,2.1,0.2,1.1,0.012\\n'260',10,4,1984,7970.0,0.8,9.0,0.685284,2.1,0.0,1.0,0.0\\n'260',11,4,1984,13620.0,1.0,11.2,0.667573,3.1,2.6,1.8,0.208\\n'260',12,4,1984,16420.0,0.5,11.6,0.644532,2.6,1.5,2.2,0.042\\n'260',13,4,1984,15430.0,-0.7,13.5,0.697365,1.5,0.0,2.0,0.0\\n'260',14,4,1984,19380.0,0.1,17.6,0.818613,2.1,0.0,2.8,0.0\\n'260',15,4,1984,9440.0,4.8,17.0,0.994264,3.6,0.5,1.4,0.025\\n'260',16,4,1984,15170.0,1.7,11.1,0.760981,3.1,0.0,2.0,0.0\\n'260',17,4,1984,21480.0,-1.5,12.4,0.554424,1.5,0.0,2.8,0.0\\n'260',18,4,1984,13580.0,-1.2,13.5,0.604704,1.5,0.0,1.8,0.0\\n'260',19,4,1984,14290.0,1.3,15.8,0.620667,1.5,0.0,2.1,0.0\\n'260',20,4,1984,15580.0,3.5,18.2,0.711201,1.5,0.0,2.4,0.0\\n'260',21,4,1984,19820.0,3.8,21.5,0.746305,1.5,0.0,3.2,0.0\\n'260',22,4,1984,15340.0,6.8,22.4,0.889126,2.6,0.0,2.5,0.0\\n'260',23,4,1984,23760.0,3.9,17.8,0.732387,4.6,0.0,3.6,0.0\\n'260',24,4,1984,22530.0,4.7,21.3,0.751416,4.1,0.0,3.6,0.0\\n'260',25,4,1984,22500.0,7.6,21.3,0.722238,3.6,0.0,3.7,0.0\\n'260',26,4,1984,22240.0,3.0,18.2,0.793237,4.1,0.0,3.4,0.0\\n'260',27,4,1984,24420.0,4.4,16.2,0.535471,4.1,0.0,3.6,0.0\\n'260',28,4,1984,23680.0,0.6,16.4,0.582836,4.1,0.0,3.4,0.0\\n'260',29,4,1984,23620.0,2.6,15.0,0.535482,5.1,0.0,3.4,0.0\\n'260',30,4,1984,18250.0,3.9,17.5,0.72917,4.1,0.0,2.8,0.0\\n'260',1,5,1984,6410.0,5.5,12.5,0.939922,3.1,1.1,0.9,0.037\\n'260',2,5,1984,11480.0,3.3,14.5,0.857624,1.5,0.0,1.7,0.0\\n'260',3,5,1984,13740.0,5.2,17.3,0.926127,1.5,1.8,2.1,0.033\\n'260',4,5,1984,12120.0,7.9,17.1,1.186007,1.5,0.4,1.8,0.021\\n'260',5,5,1984,14790.0,8.2,17.9,1.251346,3.6,0.0,2.3,0.0\\n'260',6,5,1984,4570.0,5.9,11.0,0.872387,5.7,8.1,0.6,0.163\\n'260',7,5,1984,17410.0,4.4,11.6,0.693919,4.6,0.1,2.4,0.004\\n'260',8,5,1984,19320.0,3.8,12.4,0.719207,4.1,0.1,2.7,0.008\\n'260',9,5,1984,10360.0,3.0,10.0,0.743483,3.1,3.3,1.4,0.133\\n'260',10,5,1984,6640.0,2.4,9.5,0.740376,2.6,0.0,0.9,0.0\\n'260',11,5,1984,14570.0,5.0,10.7,0.802232,5.7,0.0,2.0,0.0\\n'260',12,5,1984,21310.0,3.5,14.8,0.645109,6.2,0.0,3.1,0.0\\n'260',13,5,1984,14540.0,6.8,15.6,0.73374,5.1,0.0,2.2,0.0\\n'260',14,5,1984,20920.0,5.6,18.1,0.816204,4.1,0.0,3.3,0.0\\n'260',15,5,1984,8840.0,8.7,15.4,1.123046,2.1,0.0,1.4,0.0\\n'260',16,5,1984,17710.0,5.8,19.2,1.01736,2.1,0.0,2.8,0.0\\n'260',17,5,1984,3740.0,6.6,13.6,1.133731,1.5,4.3,0.6,0.204\\n'260',18,5,1984,18490.0,5.6,17.3,0.98798,2.6,0.0,2.8,0.0\\n'260',19,5,1984,24620.0,5.9,15.4,0.983537,3.6,0.0,3.7,0.0\\n'260',20,5,1984,10730.0,7.7,16.4,1.134621,3.6,9.6,1.6,0.238\\n'260',21,5,1984,2920.0,7.0,11.3,1.076752,3.6,30.0,0.4,0.458\\n'260',22,5,1984,10140.0,6.8,15.6,1.043519,4.6,4.9,1.5,0.242\\n'260',23,5,1984,7190.0,5.7,13.2,1.064924,2.6,4.6,1.0,0.171\\n'260',24,5,1984,14670.0,9.3,16.2,1.187653,4.1,1.9,2.3,0.058\\n'260',25,5,1984,4270.0,8.3,11.5,1.110592,2.6,0.0,0.6,0.0\\n'260',26,5,1984,10650.0,8.0,15.0,1.069167,2.1,0.0,1.6,0.0\\n'260',27,5,1984,7890.0,7.8,14.8,1.160439,2.1,2.9,1.2,0.254\\n'260',28,5,1984,8510.0,7.7,15.4,1.172935,3.1,0.0,1.3,0.0\\n'260',29,5,1984,2990.0,9.6,12.6,1.28346,3.1,6.3,0.5,0.208\\n'260',30,5,1984,12280.0,10.2,18.1,1.39075,3.6,0.0,2.0,0.0\\n'260',31,5,1984,25410.0,7.7,19.8,1.093422,2.6,0.0,4.2,0.0\\n'260',1,6,1984,15790.0,7.2,19.6,1.249177,2.6,3.2,2.5,0.075\\n'260',2,6,1984,20210.0,9.2,18.7,1.13673,3.1,0.0,3.3,0.0\\n'260',3,6,1984,8480.0,10.8,19.1,1.481438,3.1,6.2,1.4,0.192\\n'260',4,6,1984,4770.0,9.5,12.3,1.224369,2.6,21.8,0.7,0.513\\n'260',5,6,1984,13950.0,7.6,15.7,1.078603,2.1,0.7,2.1,0.033\\n'260',6,6,1984,13320.0,6.3,16.3,1.061183,3.6,1.2,2.1,0.083\\n'260',7,6,1984,2730.0,11.0,13.0,1.360309,2.1,3.5,0.4,0.354\\n'260',8,6,1984,8030.0,10.3,14.3,1.213232,3.1,0.0,1.2,0.0\\n'260',9,6,1984,24950.0,9.8,16.6,1.143692,3.6,0.0,3.9,0.0\\n'260',10,6,1984,21050.0,8.5,20.9,1.203888,2.6,0.0,3.4,0.0\\n'260',11,6,1984,19770.0,8.9,17.0,1.038607,2.6,0.0,3.1,0.0\\n'260',12,6,1984,22460.0,6.2,19.8,1.074535,2.6,0.0,3.7,0.0\\n'260',13,6,1984,6910.0,12.1,17.7,1.404971,4.6,0.0,1.1,0.0\\n'260',14,6,1984,11080.0,9.6,18.0,1.308159,3.6,4.6,1.8,0.146\\n'260',15,6,1984,17140.0,8.3,17.9,1.192136,3.1,0.0,2.7,0.0\\n'260',16,6,1984,21440.0,8.1,17.1,1.167361,2.1,0.0,3.4,0.0\\n'260',17,6,1984,18820.0,9.1,20.8,1.24771,1.5,0.0,3.1,0.0\\n'260',18,6,1984,22750.0,11.6,22.7,1.434989,2.1,0.0,3.9,0.0\\n'260',19,6,1984,20920.0,10.9,25.0,1.475629,1.5,0.0,3.7,0.0\\n'260',20,6,1984,23490.0,13.5,27.1,1.521578,1.5,0.0,4.4,0.0\\n'260',21,6,1984,24030.0,8.1,22.3,1.229265,3.1,0.0,4.1,0.0\\n'260',22,6,1984,7470.0,8.3,17.0,1.077798,4.6,5.8,1.2,0.25\\n'260',23,6,1984,20240.0,9.6,15.5,1.052112,4.1,1.0,3.1,0.062\\n'260',24,6,1984,14380.0,9.6,15.0,1.040229,3.6,0.8,2.2,0.079\\n'260',25,6,1984,7930.0,11.2,16.3,1.286031,4.1,4.6,1.3,0.179\\n'260',26,6,1984,23530.0,10.1,19.7,1.221021,3.1,0.0,3.9,0.0\\n'260',27,6,1984,16290.0,11.6,19.0,1.384975,3.1,0.0,2.7,0.0\\n'260',28,6,1984,17830.0,8.2,15.7,1.091255,3.1,0.0,2.8,0.0\\n'260',29,6,1984,16850.0,7.8,16.0,0.929145,3.1,3.5,2.6,0.054\\n'260',30,6,1984,16220.0,5.8,15.4,0.942305,2.6,0.7,2.4,0.062\\n'260',1,7,1984,22340.0,4.0,18.0,0.850388,1.5,0.0,3.5,0.0\\n'260',2,7,1984,11780.0,9.2,17.4,1.187008,3.1,1.8,1.8,0.096\\n'260',3,7,1984,9230.0,9.4,14.6,1.150224,3.6,2.0,1.4,0.046\\n'260',4,7,1984,8070.0,10.1,14.9,1.163298,3.1,0.3,1.3,0.079\\n'260',5,7,1984,19270.0,10.8,19.0,1.286657,3.1,0.0,3.1,0.0\\n'260',6,7,1984,18300.0,10.1,19.1,1.273962,1.5,0.0,2.9,0.0\\n'260',7,7,1984,25220.0,9.0,24.7,1.305259,1.5,0.0,4.4,0.0\\n'260',8,7,1984,27410.0,13.1,28.7,1.332591,2.6,0.0,5.1,0.0\\n'260',9,7,1984,21490.0,15.5,29.8,1.974479,3.1,12.5,4.0,0.075\\n'260',10,7,1984,14380.0,12.3,24.8,1.716951,2.1,16.7,2.5,0.146\\n'260',11,7,1984,11480.0,14.6,21.9,1.794959,2.6,9.6,2.0,0.058\\n'260',12,7,1984,19610.0,14.2,22.0,1.533014,4.6,0.0,3.4,0.0\\n'260',13,7,1984,16800.0,14.4,19.6,1.433966,4.6,1.6,2.9,0.033\\n'260',14,7,1984,7820.0,12.7,18.5,1.528944,3.1,6.0,1.3,0.213\\n'260',15,7,1984,7680.0,11.7,16.3,1.394222,2.1,10.5,1.2,0.321\\n'260',16,7,1984,13300.0,11.3,17.5,1.416165,3.6,4.4,2.1,0.075\\n'260',17,7,1984,12390.0,11.2,17.2,1.229758,3.1,0.0,2.0,0.0\\n'260',18,7,1984,8540.0,13.3,20.3,1.591611,2.6,1.4,1.4,0.029\\n'260',19,7,1984,10160.0,12.6,17.8,1.372932,2.6,0.0,1.7,0.0\\n'260',20,7,1984,7130.0,12.8,16.8,1.417501,2.1,0.0,1.2,0.0\\n'260',21,7,1984,12060.0,11.5,18.0,1.294725,2.1,0.0,2.0,0.0\\n'260',22,7,1984,22350.0,8.4,19.4,1.153926,2.1,0.0,3.6,0.0\\n'260',23,7,1984,16190.0,9.5,20.5,1.311266,1.5,0.0,2.7,0.0\\n'260',24,7,1984,26320.0,8.9,20.6,1.190394,2.6,0.0,4.4,0.0\\n'260',25,7,1984,13300.0,9.2,17.1,1.217642,3.1,0.0,2.2,0.0\\n'260',26,7,1984,10330.0,12.7,17.8,1.443182,3.1,0.4,1.7,0.046\\n'260',27,7,1984,12390.0,12.7,20.3,1.512067,3.1,0.2,2.1,0.033\\n'260',28,7,1984,5810.0,13.8,19.6,1.68561,2.6,0.5,1.0,0.067\\n'260',29,7,1984,22570.0,12.7,25.4,1.512885,1.5,0.0,4.0,0.0\\n'260',30,7,1984,23150.0,15.9,30.5,1.528939,3.1,0.0,4.5,0.0\\n'260',31,7,1984,16940.0,16.8,27.6,1.822449,3.6,0.8,3.2,0.017\\n'260',1,8,1984,17330.0,11.4,23.9,1.410137,2.1,0.1,3.0,0.012\\n'260',2,8,1984,6290.0,10.7,18.7,1.452108,2.1,2.1,1.1,0.179\\n'260',3,8,1984,11290.0,13.8,22.7,1.768383,2.6,0.1,2.0,0.025\\n'260',4,8,1984,20210.0,13.5,23.8,1.488326,2.1,0.0,3.6,0.0\\n'260',5,8,1984,11360.0,13.5,21.7,1.531807,2.6,1.3,1.9,0.121\\n'260',6,8,1984,19300.0,10.7,20.1,1.282864,2.6,0.0,3.2,0.0\\n'260',7,8,1984,14030.0,11.5,21.0,1.351095,2.6,0.0,2.3,0.0\\n'260',8,8,1984,11710.0,9.6,23.2,1.337053,2.1,1.7,2.0,0.029\\n'260',9,8,1984,19830.0,12.7,22.4,1.457283,4.6,0.0,3.4,0.0\\n'260',10,8,1984,13510.0,11.5,19.8,1.340155,4.6,0.0,2.3,0.0\\n'260',11,8,1984,11690.0,10.9,20.2,1.412481,2.1,0.0,2.0,0.0\\n'260',12,8,1984,19650.0,14.9,24.7,1.593985,3.1,0.0,3.5,0.0\\n'260',13,8,1984,16100.0,11.9,25.5,1.430926,2.1,0.0,2.9,0.0\\n'260',14,8,1984,19250.0,12.0,24.0,1.365651,2.1,0.0,3.4,0.0\\n'260',15,8,1984,14230.0,9.2,21.9,1.357051,1.5,0.0,2.4,0.0\\n'260',16,8,1984,17350.0,10.9,23.0,1.389988,2.1,0.0,3.0,0.0\\n'260',17,8,1984,20170.0,10.6,23.3,1.419443,2.1,0.0,3.5,0.0\\n'260',18,8,1984,18200.0,8.9,24.9,1.383191,1.5,0.0,3.1,0.0\\n'260',19,8,1984,18660.0,12.9,27.6,1.386381,1.5,0.0,3.4,0.0\\n'260',20,8,1984,18650.0,13.1,28.8,1.510847,1.5,0.0,3.4,0.0\\n'260',21,8,1984,18090.0,15.2,27.6,1.763378,3.1,0.0,3.4,0.0\\n'260',22,8,1984,20190.0,15.4,30.0,1.517463,2.6,0.0,3.8,0.0\\n'260',23,8,1984,17300.0,15.3,29.6,1.619032,1.5,0.0,3.3,0.0\\n'260',24,8,1984,17740.0,16.0,28.8,1.410556,2.6,0.0,3.4,0.0\\n'260',25,8,1984,16160.0,15.3,26.9,1.746708,2.6,0.0,3.0,0.0\\n'260',26,8,1984,13800.0,10.4,23.4,1.407729,2.1,0.0,2.4,0.0\\n'260',27,8,1984,15800.0,7.8,22.4,1.233483,1.5,0.0,2.6,0.0\\n'260',28,8,1984,15760.0,11.1,23.9,1.446737,1.5,0.0,2.7,0.0\\n'260',29,8,1984,6350.0,14.9,20.2,1.697716,3.1,0.9,1.1,0.088\\n'260',30,8,1984,7600.0,15.7,22.6,1.752194,4.6,0.0,1.4,0.0\\n'260',31,8,1984,5770.0,15.9,21.7,1.788788,4.6,0.3,1.0,0.008\\n'260',1,9,1984,9080.0,14.7,22.7,1.669433,3.6,0.0,1.6,0.0\\n'260',2,9,1984,17920.0,12.0,25.4,1.489059,2.1,0.0,3.2,0.0\\n'260',3,9,1984,10560.0,17.0,23.7,1.644105,5.7,0.4,1.9,0.017\\n'260',4,9,1984,6990.0,8.2,21.2,1.352834,5.1,1.1,1.2,0.125\\n'260',5,9,1984,13050.0,7.1,16.8,0.986186,2.6,0.4,2.0,0.017\\n'260',6,9,1984,10860.0,6.4,17.1,0.900743,2.6,0.0,1.7,0.0\\n'260',7,9,1984,1850.0,9.9,12.5,1.111099,2.1,18.3,0.3,0.717\\n'260',8,9,1984,8120.0,9.4,15.8,1.20317,2.1,0.9,1.3,0.033\\n'260',9,9,1984,5300.0,10.2,17.0,1.229887,4.1,18.5,0.9,0.35\\n'260',10,9,1984,5550.0,10.0,17.6,1.307835,4.6,13.7,0.9,0.229\\n'260',11,9,1984,5060.0,11.1,17.1,1.313676,3.6,3.1,0.8,0.125\\n'260',12,9,1984,8050.0,11.1,17.7,1.20888,2.1,0.0,1.3,0.0\\n'260',13,9,1984,8800.0,10.2,19.7,1.499691,1.5,0.0,1.5,0.0\\n'260',14,9,1984,4580.0,14.5,18.7,1.690777,1.5,2.1,0.8,0.121\\n'260',15,9,1984,2330.0,14.5,16.6,1.686363,2.1,6.1,0.4,0.217\\n'260',16,9,1984,5470.0,12.8,17.6,1.474384,2.1,0.0,0.9,0.0\\n'260',17,9,1984,7650.0,8.5,17.7,1.375204,2.1,8.9,1.2,0.175\\n'260',18,9,1984,8510.0,11.0,18.8,1.420188,1.5,0.0,1.4,0.0\\n'260',19,9,1984,5090.0,11.3,16.2,1.213689,3.1,0.0,0.8,0.0\\n'260',20,9,1984,4240.0,11.8,15.6,1.35756,3.6,9.4,0.7,0.217\\n'260',21,9,1984,8630.0,8.2,15.6,1.085712,3.6,8.9,1.3,0.333\\n'260',22,9,1984,6030.0,7.0,12.8,1.018085,3.6,3.1,0.9,0.1\\n'260',23,9,1984,9370.0,7.5,15.1,1.113931,2.1,6.4,1.4,0.133\\n'260',24,9,1984,5420.0,5.8,13.3,1.06445,1.0,3.8,0.8,0.058\\n'260',25,9,1984,2670.0,7.5,11.6,1.105768,2.6,17.9,0.4,0.454\\n'260',26,9,1984,8450.0,8.1,15.9,1.172395,2.6,11.6,1.3,0.129\\n'260',27,9,1984,8880.0,8.2,17.0,1.163808,1.5,0.0,1.4,0.0\\n'260',28,9,1984,9430.0,8.9,17.6,1.297738,2.6,0.0,1.5,0.0\\n'260',29,9,1984,8240.0,9.3,19.2,1.420129,1.5,7.6,1.3,0.125\\n'260',30,9,1984,3230.0,10.5,15.1,1.347146,3.1,3.5,0.5,0.183\\n'260',1,10,1984,2270.0,9.8,14.7,1.325056,2.6,9.3,0.4,0.238\\n'260',2,10,1984,8370.0,7.0,15.6,1.063071,3.1,2.7,1.3,0.125\\n'260',3,10,1984,10160.0,6.9,15.6,1.102897,2.1,0.0,1.5,0.0\\n'260',4,10,1984,11990.0,6.0,16.0,0.989923,3.1,0.0,1.8,0.0\\n'260',5,10,1984,1200.0,9.1,10.8,1.148577,3.6,11.9,0.2,0.433\\n'260',6,10,1984,6080.0,7.4,14.3,1.012004,3.1,2.2,0.9,0.062\\n'260',7,10,1984,5800.0,5.5,13.9,0.954251,3.1,2.2,0.9,0.083\\n'260',8,10,1984,1710.0,8.0,15.6,1.323213,3.6,0.7,0.3,0.096\\n'260',9,10,1984,3040.0,10.2,15.5,1.344278,2.6,5.6,0.5,0.179\\n'260',10,10,1984,2080.0,10.0,15.6,1.411538,2.1,2.6,0.3,0.233\\n'260',11,10,1984,10270.0,6.8,16.2,1.07421,2.6,0.7,1.6,0.029\\n'260',12,10,1984,6390.0,6.5,16.5,1.141,1.5,0.0,1.0,0.0\\n'260',13,10,1984,6080.0,7.4,15.9,1.174303,2.6,0.0,1.0,0.0\\n'260',14,10,1984,4460.0,10.5,16.6,1.355833,2.6,0.0,0.7,0.0\\n'260',15,10,1984,3300.0,10.8,17.2,1.520961,1.5,0.0,0.5,0.0\\n'260',16,10,1984,2890.0,10.2,15.8,1.358286,1.5,0.0,0.5,0.0\\n'260',17,10,1984,5750.0,8.1,15.2,1.234257,3.1,0.0,0.9,0.0\\n'260',18,10,1984,1740.0,10.4,14.2,1.192,5.7,4.6,0.3,0.1\\n'260',19,10,1984,4450.0,9.5,14.2,1.175103,5.1,14.5,0.7,0.4\\n'260',20,10,1984,5830.0,8.4,13.4,0.944082,7.2,2.9,0.9,0.037\\n'260',21,10,1984,5440.0,7.0,13.1,0.893193,4.1,0.0,0.8,0.0\\n'260',22,10,1984,760.0,7.3,14.7,1.181804,6.2,12.8,0.1,0.421\\n'260',23,10,1984,3180.0,9.4,15.1,1.224251,4.1,8.8,0.5,0.163\\n'260',24,10,1984,7490.0,9.1,14.3,1.07403,3.6,5.5,1.1,0.012\\n'260',25,10,1984,6380.0,10.7,16.2,1.238258,5.1,9.7,1.0,0.1\\n'260',26,10,1984,7890.0,6.2,13.9,0.936445,3.1,0.0,1.2,0.0\\n'260',27,10,1984,8180.0,1.8,13.9,0.824281,1.0,0.0,1.1,0.0\\n'260',28,10,1984,4780.0,1.9,11.6,0.872533,3.6,0.0,0.7,0.0\\n'260',29,10,1984,1460.0,10.4,14.6,1.411737,3.1,3.1,0.2,0.042\\n'260',30,10,1984,7600.0,9.4,18.3,1.372547,2.1,0.0,1.2,0.0\\n'260',31,10,1984,7300.0,5.4,15.6,1.099768,2.1,0.0,1.1,0.0\\n'260',1,11,1984,7090.0,8.0,17.3,1.281474,2.6,0.0,1.1,0.0\\n'260',2,11,1984,7510.0,7.1,15.5,1.067821,3.1,0.0,1.1,0.0\\n'260',3,11,1984,3480.0,6.1,12.3,0.926678,3.6,0.0,0.5,0.0\\n'260',4,11,1984,5200.0,4.4,10.5,0.824983,3.6,0.0,0.7,0.0\\n'260',5,11,1984,5760.0,3.0,12.0,0.809889,1.5,0.3,0.8,0.025\\n'260',6,11,1984,1230.0,7.0,11.2,1.081238,2.1,1.2,0.2,0.167\\n'260',7,11,1984,1300.0,5.2,11.0,1.033004,2.1,2.4,0.2,0.1\\n'260',8,11,1984,2940.0,6.2,14.3,1.001154,3.6,0.0,0.4,0.0\\n'260',9,11,1984,2860.0,9.6,14.8,0.926744,4.1,0.0,0.4,0.0\\n'260',10,11,1984,4410.0,8.5,15.8,1.201194,2.1,0.0,0.7,0.0\\n'260',11,11,1984,3980.0,8.1,13.1,1.092459,2.1,0.0,0.6,0.0\\n'260',12,11,1984,5310.0,6.0,12.9,0.95648,3.1,0.0,0.8,0.0\\n'260',13,11,1984,3120.0,3.4,11.0,0.895372,2.1,0.0,0.4,0.0\\n'260',14,11,1984,3590.0,4.3,9.1,0.757546,2.6,0.0,0.5,0.0\\n'260',15,11,1984,1590.0,2.2,5.6,0.688238,2.1,3.1,0.2,0.167\\n'260',16,11,1984,1890.0,1.5,4.9,0.663684,4.1,2.7,0.2,0.25\\n'260',17,11,1984,1220.0,1.4,3.7,0.665018,4.1,4.0,0.1,0.358\\n'260',18,11,1984,1560.0,2.8,6.8,0.804604,2.1,2.7,0.2,0.292\\n'260',19,11,1984,2810.0,5.0,7.4,0.843252,3.1,0.0,0.4,0.0\\n'260',20,11,1984,3750.0,4.5,9.7,0.856228,2.6,0.6,0.5,0.067\\n'260',21,11,1984,2940.0,6.6,11.5,0.951484,5.1,10.8,0.4,0.246\\n'260',22,11,1984,950.0,7.8,14.6,1.236184,6.7,17.9,0.1,0.629\\n'260',23,11,1984,1870.0,9.1,14.6,1.147316,8.2,13.4,0.3,0.254\\n'260',24,11,1984,2890.0,9.0,13.4,1.039348,7.2,1.2,0.4,0.067\\n'260',25,11,1984,2920.0,5.8,11.0,0.992063,4.6,0.6,0.4,0.029\\n'260',26,11,1984,4480.0,3.0,10.1,0.799196,2.6,0.0,0.6,0.0\\n'260',27,11,1984,2640.0,2.5,7.2,0.692093,4.1,0.0,0.3,0.0\\n'260',28,11,1984,620.0,5.3,8.1,0.76779,5.7,0.6,0.1,0.046\\n'260',29,11,1984,1970.0,7.2,10.5,0.992885,4.6,0.0,0.3,0.0\\n'260',30,11,1984,3530.0,5.8,11.2,0.815598,4.6,0.0,0.5,0.0\\n'260',1,12,1984,4110.0,2.0,12.2,0.648034,4.1,0.0,0.6,0.0\\n'260',2,12,1984,2670.0,-0.1,8.3,0.776428,2.1,0.0,0.3,0.0\\n'260',3,12,1984,4120.0,1.6,7.5,0.738579,3.6,0.0,0.5,0.0\\n'260',4,12,1984,3240.0,1.2,7.6,0.757788,3.1,0.0,0.4,0.0\\n'260',5,12,1984,2520.0,5.4,10.3,0.868123,3.6,0.0,0.3,0.0\\n'260',6,12,1984,800.0,1.0,7.0,0.75587,3.1,1.4,0.1,0.088\\n'260',7,12,1984,2270.0,-0.5,5.3,0.699754,2.1,0.0,0.3,0.0\\n'260',8,12,1984,620.0,-0.5,6.1,0.73231,3.1,0.0,0.1,0.0\\n'260',9,12,1984,3670.0,3.3,10.2,0.806292,3.1,1.3,0.5,0.071\\n'260',10,12,1984,2470.0,4.7,10.4,0.921035,3.1,0.0,0.3,0.0\\n'260',11,12,1984,850.0,3.9,7.7,0.855727,1.5,0.0,0.1,0.0\\n'260',12,12,1984,1750.0,3.1,7.6,0.77905,3.1,0.0,0.2,0.0\\n'260',13,12,1984,3490.0,1.8,6.7,0.709683,3.6,0.0,0.4,0.0\\n'260',14,12,1984,1260.0,1.8,8.8,0.83136,3.1,0.3,0.2,0.046\\n'260',15,12,1984,1360.0,1.7,5.2,0.735495,3.1,0.7,0.2,0.05\\n'260',16,12,1984,1730.0,2.7,5.4,0.758916,2.6,0.8,0.2,0.058\\n'260',17,12,1984,1090.0,3.2,7.6,0.834545,3.6,4.2,0.1,0.317\\n'260',18,12,1984,1610.0,1.1,6.3,0.667438,2.1,0.1,0.2,0.008\\n'260',19,12,1984,420.0,1.4,8.4,0.768755,5.1,1.3,0.1,0.1\\n'260',20,12,1984,450.0,8.2,9.2,1.067765,5.7,7.6,0.1,0.371\\n'260',21,12,1984,3210.0,2.8,9.6,0.776251,4.6,1.7,0.4,0.037\\n'260',22,12,1984,2740.0,1.3,5.8,0.705684,3.1,0.0,0.3,0.0\\n'260',23,12,1984,950.0,2.9,5.9,0.736379,4.6,1.4,0.1,0.142\\n'260',24,12,1984,710.0,3.9,6.4,0.813109,5.1,3.8,0.1,0.312\\n'260',25,12,1984,3030.0,1.8,7.1,0.703653,3.1,1.1,0.4,0.042\\n'260',26,12,1984,1340.0,-0.2,6.4,0.728772,3.6,2.2,0.2,0.158\\n'260',27,12,1984,1420.0,-0.7,4.7,0.620428,2.1,0.0,0.2,0.0\\n'260',28,12,1984,1980.0,-1.5,2.7,0.55374,1.0,0.0,0.2,0.0\\n'260',29,12,1984,3180.0,-1.1,3.8,0.603744,1.0,0.0,0.3,0.0\\n'260',30,12,1984,1180.0,-2.0,1.5,0.544361,2.1,0.0,0.1,0.0\\n'260',31,12,1984,350.0,-0.5,4.6,0.633414,4.1,2.3,0.0,0.192\\n\",\n 'bbc': &lt;bound method BottomBoundary.bbc of BottomBoundary(swbbcfile=1, bbcfil='swap', swbotb=1, sw2=None, sw4=None, swbotb3resvert=None, swbotb3impl=None, swqhbot=None, sinave=None, sinamp=None, sinmax=None, shape=None, hdrain=None, rimlay=None, aqave=None, aqamp=None, aqtmax=None, aqper=None, cofqha=None, cofqhb=None, cofqhc=None, gwlevel=         DATE1  GWLEVEL\n 0   1980-04-24    -88.0\n 1   1980-05-02   -121.0\n 2   1980-05-07    -98.0\n 3   1980-05-21   -121.0\n 4   1980-05-28   -131.0\n ..         ...      ...\n 121 1984-10-03    -70.0\n 122 1984-10-16    -56.0\n 123 1984-11-01    -50.0\n 124 1984-11-27    -55.0\n 125 1984-12-12    -86.0\n \n [126 rows x 2 columns], qbot=None, haquif=None, qbot4=None, qtab=None, hbot5=None)&gt;}</pre> In\u00a0[11]: Copied! <pre>result = ml.run(silence_warnings=True)\n</pre> result = ml.run(silence_warnings=True) In\u00a0[12]: Copied! <pre>result.yearly_summary\n</pre> result.yearly_summary Out[12]: PGRASSDM GRASSDM PMOWDM MOWDM DATETIME 1980-12-31 503346.58764 472037.92107 3.141213e+06 2.713909e+06 1981-12-31 509608.10927 481111.92490 3.101813e+06 2.696380e+06 1982-12-31 696261.80313 639666.66443 3.298267e+06 2.815552e+06 1983-12-31 714819.86034 652098.59899 3.447898e+06 2.960527e+06 1984-12-31 551388.82940 511481.78297 2.904968e+06 2.495410e+06"}, {"location": "tutorials/004-loading-classic-swap/#load-classic-swap-model", "title": "Load classic SWAP model\u00b6", "text": "<p>This notebook demonstrates how to load a SWAP model into pyswap classes from standard ASCII files.</p> <p>We begin, like always, by defining metadata. Then we can use load_swp to get the scaffolding of the model with all parameters from the initial .swp file loaded.</p> <p>In the grass growth example, which we use here, bottom boundary conditions are defined in a separate .bbc file. In pyswap, all the parameters of bottom boundary are in the same class. load_bbc function therefore will either update an instance of BottomBoundary you provide (like we do below), or will return a new one with just the parameters set in the .bbc file. The first option is recommended.</p>"}, {"location": "user-guide/ascii-vs-classes/", "title": "SWAP model settings", "text": "<p>To run the SWAP model, you need to provide various parameters defined in several ASCII files. The main file, with a <code>.swp</code> extension, must always accompany the SWAP executable. Depending on the settings in this file, additional files might be required, such as <code>.crp</code> files for crop growth model settings. Each file contains key-value settings or tabular data, often grouped into sections representing different model components. In <code>pyswap</code>, these groups of variables are represented as classes.</p> Classic SWAPpyswap class <pre><code>* Part 8: Snow and frost\n\n* Switch, calculate snow accumulation and melt:\n  SWSNOW = 1                 ! 0 = no simulation of snow\n                            ! 1 = simulation of snow accumulation and melt\n\n* If SWSNOW = 1, specify:\n  SNOWINCO = 22.0            ! Initial snow water equivalent [0..1000 cm, R]\n  TEPRRAIN = 2.0             ! Temperature above which all precipitation is rain[ 0..10 degree C, R]\n  TEPRSNOW = -2.0            ! Temperature below which all precipitation is snow[-10..0 degree C, R]\n  SNOWCOEF = 0.3             ! Snowmelt calibration factor [0...10 -, R]\n\n* Switch, in case of frost reduce soil water flow:\n  SWFROST = 1                ! 0 = no simulation of frost\n                            ! 1 = simulation of reduction soil water flow due to frost\n\n* If SWFROST = 1, then specify soil temperature range in which soil water flow is reduced\n  TFROSTSTA = 0.0            ! Soil temperature where reduction of water fluxes starts [-10.0,5.0, degree C, R]\n  TFROSTEND = -1.0           ! Soil temperature where reduction of water fluxes ends [-10.0,5.0, degree C, R]\n\n**********************************************************************************\n</code></pre> <pre><code>import pyswap as psp\n\nsnow = psp.components.soilwater.SnowAndFrost(  # (1)!\n  swsnow=1, snowinco=22.0, teprrain=2.0, teprsnow=-2.0,\n  snowcoef=0.3, swfrost=1, tfroststa=0.0, tfrostend=-1.0,\n)\n</code></pre> <ol> <li>When using a code editor like VS Code or PyCharm you start typing the names of the modules, you will get type hints and module documentation, that will help you navigate thorugh the package.</li> </ol> <p>Classes generally act as \"containers\" for variables, but some also include functionality specific to their section, such as reading and formatting meteorological data from CSV files. The class definitions offer validation, type hinting, and built-in documentation that most code editors can utilize. This is especially helpful if you're just starting with the model, making it easier to understand and work with the parameters. Classes are explained in more details in the next section. If you are looking for more information about the input files visit the wiki section.</p>"}, {"location": "user-guide/data-structures/", "title": "Data Structures", "text": "<p>The SWAP model input is a simple formatted string saved in a plain ASCII file. There are three main formats/types of input:</p> <ul> <li>Key-value pairs: A variable name followed by an equal sign and a formatted value.</li> <li>Tables: Rows of data with column names on top. Columns are separated by spaces and lines by newline characters. They do not have a tag (variable name followed by an equal sign).</li> <li>Arrays: Rows of data without column names on top. Columns are separated by spaces and lines by newline characters. They are preceded by a tag, and the data starts on the next line.</li> </ul> <p>All parameters are grouped into classes representing different components of the SWAP model.</p>"}, {"location": "user-guide/data-structures/#classes_and_attribute_types", "title": "Classes and attribute types", "text": "<p><code>pyswap</code> models (classes or objects) are subclasses of Pydantic's <code>BaseModel</code>. Pydantic is a powerful validation and serialization library that ensures the provided data is of the right type and within the right range. When possible, the input is coerced into the correct format; otherwise, exceptions are raised. Below see an example of a pyswap class definition:</p> <pre><code>class SnowAndFrost(_PySWAPBaseModel, _SerializableMixin, _YAMLValidatorMixin):\n    \"\"\"Snow and frost settings for the model.\n\n    Attributes:\n        swsnow (Literal[0, 1]): Switch for calculation of\n            snow accumulation and melt.\n        swfrost (Literal[0, 1]): Switch, in case of frost reduce\n            soil water flow.\n        snowinco (Optional[Decimal2f]): Initial snow water equivalent [0..1000 cm].\n        teprrain (Optional[Decimal2f]): Temperature above which all\n            precipitation is rain [0..10 oC].\n        teprsnow (Optional[Decimal2f]): Temperature below which all\n            precipitation is snow [-10..0 oC].\n        tfroststa (Optional[Decimal2f]): Soil temperature (oC) where reduction\n            of water fluxes starts [-10.0..5.0 oC].\n        tfrostend (Optional[Decimal2f]): Soil temperature (oC) where reduction\n            of water fluxes ends [-10.0..5.0 oC].\n    \"\"\"\n\n    swsnow: _Literal[0, 1] | None = None\n    swfrost: _Literal[0, 1] | None = None\n    snowinco: _Decimal2f | None = _Field(default=None, ge=0, le=1000)\n    teprrain: _Decimal2f | None = _Field(default=None, ge=0, le=10)\n    teprsnow: _Decimal2f | None = _Field(default=None, ge=-10, le=0)\n    tfroststa: _Decimal2f | None = _Field(default=None, ge=-10, le=5)\n    tfrostend: _Decimal2f | None = _Field(default=None, ge=-10, le=5)\n</code></pre> <p>Attributes of each class generally correspond to the names of the variables in the SWAP input files. Each attribute has an assigned type and validation rules (e.g., lower and upper bounds). Many of these types are custom annotated types with specific serialization and validation rules. These rules tell the class constructor how to interpret a value when it's provided and how to format the data when it is saved to a file.</p> <p>Below are examples of types with their validation and serialization rules. For more details, see the validation and serialization section.</p> <pre><code>FloatList = Annotated[\n    list[float] | str,\n    AfterValidator(parse_float_list),  # (1)!\n    PlainSerializer(\n        lambda x: \" \".join([f\"{Decimal(f):.2f}\" for f in x]),\n        return_type=str,\n        when_used=\"json\",  # (2)!\n    ),\n]\n\"\"\"Serialize list of floats to a string with elements separated by spaces.\"\"\"\n</code></pre> <ol> <li>Normally, the input should be a list of floats, but if provided as a string, <code>parse_float_list</code> will convert it into a list. This is useful when a formatted string from SWAP input files is passed directly. For details, see reference.</li> <li><code>PlainSerializer</code> ensures that during serialization (when input variables are written to a file), the list is converted into a properly formatted string representing the floats with two decimal points using a lambda function.</li> </ol> <p>Here is another example of a field:</p> <pre><code>Decimal2f = Annotated[\n    float | str,\n    BeforeValidator(parse_decimal),  # (1)!\n    PlainSerializer(serialize_decimal(precision=2), return_type=str, when_used=\"json\"),  # (2)!\n]\n\"\"\"Serialize float to a string with 2 decimal places.\"\"\"\n</code></pre> <ol> <li>parse_decimal ensures that the string from the input file is actually a float. It removes any Fortran-compatible notation like \"d\" or \"e\" to ensure it coerces to a float.</li> <li>serialize_decimal ensures that the float is saved to the input file with two decimal points.</li> </ol>"}, {"location": "user-guide/data-structures/#tables", "title": "Tables", "text": "<p>Tabular data is defined the same way as the key-value pairs by assignmnet to a class attribute. Those attributes are either of type Arrays or Table, depending on what kind or serialization is needed for that particular variable. For both input and output, <code>pyswap</code> relies on pandas DataFrames.</p>"}, {"location": "user-guide/data-structures/#input", "title": "Input", "text": "<p>Tabular input is provided as dataframes and shuld be validated before running the model for the presence of certain columns, uper and lower bounds, etc. <code>pyswap</code> uses Pandera library for this, very similar to Pydantic. Currently the way to validate the dataframes is by using <code>.create()</code> method of respective schemas. Schemas are essentially classes that in their definition contain the information on which columns are required and what are the required data types.</p> <p>See below the example of SOILPROFILE schema being defined and then generated using <code>.create()</code> method:</p> <pre><code>class SOILPROFILE(BaseTableModel):\n    \"\"\"Vertical discretization of soil profile\n\n    Attributes:\n        ISUBLAY: Series[int]: number of sub layer, start with 1 at soil surface [1..MACP, I].\n        ISOILLAY: Series[int]: number of soil physical layer, start with 1 at soil surface [1..MAHO, I].\n        HSUBLAY: Series[float]: height of sub layer [0..1.d4 cm, R].\n        HCOMP: Series[float]: height of compartments in the sub layer [0.0..1000.0 cm, R].\n        NCOMP: Series[int]: number of compartments in the sub layer (Mind NCOMP = HSUBLAY/HCOMP) [1..MACP, I].\n    \"\"\"\n\n    ISOILLAY: Series[int] = pa.Field(ge=1)\n    ISUBLAY: Series[int] = pa.Field(ge=1)\n    HSUBLAY: Series[float] = pa.Field(ge=0.0, le=1.0e4)\n    HCOMP: Series[float] = pa.Field(ge=0.0, le=1.0e3)\n    NCOMP: Series[int] = pa.Field(ge=1)\n</code></pre> <p>This is how you create the table:</p> <pre><code>import pyswap as psp  # (1)!\n\nsoil_profile = psp.components.soilwater.SOILPROFILE.create({\n    \"ISUBLAY\": [1, 2, 3, 4],  # (2)!\n    \"ISOILLAY\": [1, 1, 2, 2],\n    \"HSUBLAY\": [10.0, 20.0, 30.0, 140.0],\n    \"HCOMP\": [1.0, 5.0, 5.0, 10.0],\n    \"NCOMP\": [10, 4, 6, 14],\n})\n</code></pre> <ol> <li>Table schemas are imported from the same component group as the class they should be assigned to. So <code>SOILPROFILE</code> will be imported from <code>soilwater</code> component.</li> <li>Here, for example, if we tried to set one of the elements in <code>ISUBLAY</code> column to 0, we would get an error.</li> </ol>"}, {"location": "user-guide/data-structures/#output", "title": "Output", "text": "<p>All output from the model is captured in a <code>Result</code> object. This includes requested output ascii files (e.g., .blc) and CSV files. The CSV output files are automatically converted to a pandas DataFrame with DateTime index.</p> <p>Note</p> <p>ASCII output files, like .blc will be deprecated in the future version of SWAP and pyswap.</p>"}, {"location": "user-guide/hdf5/", "title": "HDF5 Database", "text": "<p>Preserving generated models is crucial for this package. Several technologies were considered with primary concerns being:</p> <ul> <li>Wide-spread use</li> <li>Simple structure</li> <li>Cross-platform compatibility</li> <li>Programming-language-agnostic</li> </ul> <p>Initially, SQLite was considered a good option for simple tabular data. However, SWAP's diverse input and output formats would challenge SQLite, requiring unconventional use of RDBMS. Why force a cylinder through a square hole?</p> <p>A better option, widely used in science, is the HDF5 file format. It accepts almost any format, is compatible with multiple languages (R, Python, Fortran), and has a simple, folder-like structure. Thus, pySWAP builds on the <code>h5py</code> library.</p> <p>The goal is to make the HDF5 database easily shareable with modellers using different programming languages. Currently, pySWAP saves and retrieves Python-specific binary formats using pickle. However, more formats can be added according to the community needs. Using pickle objects with some metadata attached is a very straightforward approach and allowes for easy storage and retrieval of the entire models and their results. To demonstrate how this works, Follow the HDF5 database tutorial.</p>"}, {"location": "user-guide/quick-start/", "title": "Quickstart", "text": "<p>If you know a lot already about SWAP and pySWAP, jump straight to the installation, running the test case and setting up your own model.</p>"}, {"location": "user-guide/quick-start/#install", "title": "Install", "text": "<p>pySWAP can be simply installed through pip. Creation of a separate virtual environment is recommended.</p> <pre><code>pip install pyswap\n</code></pre>"}, {"location": "user-guide/quick-start/#run_a_test_case", "title": "Run a test case", "text": "<p>After installation, you can test if everthing is OK by running a testcase:</p> <pre><code>pyswap-py3.11vscode \u279c /workspaces/pySWAP (dev) $ python\nPython 3.11.11 (main, Dec  4 2024, 20:36:16) [GCC 10.2.1 20210110] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; from pyswap import testcase\n&gt;&gt;&gt; hupselbrook = testcase.get(\"hupselbrook\")\n&gt;&gt;&gt; result = hupselbrook.run()\nWarning from module Readswap : simulation with additonal Ksat value (Ksatexm)\n&gt;&gt;&gt; result.yearly_summary\n             RAIN  IRRIG   INTERC  RUNOFF      EPOT      EACT  DRAINAGE  QBOTTOM         GWL      TPOT      TACT    DSTOR\nDATETIME\n2002-12-31  84.18    0.5  3.74188     0.0  33.10679  16.68715  22.11357      0.0 -1107.65824  38.71198  38.17328  3.96418\n2003-12-31  71.98    0.0  2.05788     0.0  35.99241  17.17961  26.44815      0.0 -1154.37603  29.41787  29.21504 -2.92064\n2004-12-31  80.55    0.0  4.91521     0.0  29.89227  17.88916  24.76607      0.0 -1036.76085  32.57266  32.56927  0.41030\n</code></pre>"}, {"location": "user-guide/quick-start/#start_your_project_with_pyswap_cli_tool", "title": "Start your project with pyswap CLI tool", "text": ""}, {"location": "user-guide/quick-start/#turn_on_the_exploration_mode", "title": "Turn on the exploration mode", "text": "<p>You can play around with the model and result in the terminal, or go to the tutorial section for hands-on exercises or move on to the next page of the user guide.</p>"}, {"location": "user-guide/run-parallel/", "title": "Run parallel", "text": "<p>There is an simple method for running SWAP models in parallel. It utilizes Python's built in <code>multiprocessing</code> library. Normally to run a model you first construct it and then use the <code>.run()</code> method on the model object. If you have multiple scenarios of one model (differencing some parameter) you can use <code>run_parallel()</code> function, imported directly from <code>pyswap</code>. It required a list of models and returns a list of results. You can see how this feature works in the HDF5 database tutorial</p> <p>This feature fulfils it's putpose now, but can certainly be improved and include more functionality. If you have an idea of what and how should be implemented, submit an issue or contribute!</p>"}, {"location": "user-guide/to-classic-swap/", "title": "Saving models to a directory", "text": "<p>When you call <code>.run()</code> method on a <code>Model</code> instance, in the final step before executing step, pyswap prepares a temporary directory with all files necessary for the model to run (including SWAP 4.2 executable). <code>.to_classic_swap(path=Path())</code> method is a handle to skip model run an save all the files to a given directory. Then you can run the executable in that directory (what is done in the case of SWAP Tools R package) or zip it and share with someone.</p>"}, {"location": "wiki/input-files/", "title": "Input files", "text": "<p>In pySWAP, you won't directly interact with the classic SWAP configuration files, but it's helpful to understand the input files the model uses. The SWAP model relies on ASCII input files with custom extensions for simulation parameters. These files include:</p> <ul> <li>.swp - Main configuration file.</li> <li>.crp - Crop growth parameters.</li> <li>.dra - Lateral drainage parameters.</li> <li>.bbc - Bottom boundary condition settings.</li> </ul> <p>There are also files with comma-separated values for simulations:</p> <ul> <li>.met - Meteorological data (all years in one file).</li> <li>.yyy - Meteorological data (last 3 digits of the year; not used in pySWAP).</li> <li>.irg - Irrigation data.</li> </ul> <p>ASCII files are easy to create and edit, making data input straightforward. Scripting can help generate and run multiple model scenarios efficiently. The following sections provide more documentation, with each template file explaining available parameters and switches. These templates are from the R package (SWAP Tools).</p>"}, {"location": "wiki/input-files/bbc-file/", "title": ".BBC", "text": "<p>The .bbc file contains settings of the bottom boundary conditions. Normally it is included within the .swp file, but can also be excluded to a separate file.</p> <p>Note</p> <p>For now, pySWAP does not include the option to create the .bbc file.</p> BBCFIL.template <pre><code>**********************************************************************************\n* Filename: swap.bbc\n* Contents: SWAP 4 - Main input data\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of bbc-file\n*\n**********************************************************************************\n\n*** BOTTOM BOUNDARY SECTION ***\n\n**********************************************************************************\n* Bottom boundary condition\n\n* Select one of the following options:\n  SWBOTB = {{SWBOTB}}        ! 1  Prescribe groundwater level\n                             ! 2  Prescribe bottom flux\n                             ! 3  Calculate bottom flux from hydraulic head of deep aquifer\n                             ! 4  Calculate bottom flux as function of groundwater level\n                             ! 5  Prescribe soil water pressure head of bottom compartment\n                             ! 6  Bottom flux equals zero\n                             ! 7  Free drainage of soil profile\n                             ! 8  Free outflow at soil-air interface\n\n* Options 1-5 require additional bottom boundary data below\n\n**********************************************************************************\n\n\n{{#SWITCH_SWBOTB_OPTION_1}}\n**********************************************************************************\n* In case of SWBOTB = 1, prescribe groundwater level\n\n* specify DATE1 [date] and GWLEVEL [cm, -10000..1000, R]:\n\n{{#TABLE_SWBOTBTB1}}\n  {{DATE1}} {{GWLEVEL}}\n{{/TABLE_SWBOTBTB1}}\n* End of table\n\n**********************************************************************************\n{{/SWITCH_SWBOTB_OPTION_1}}\n{{#SWITCH_SWBOTB_OPTION_2}}\n**********************************************************************************\n* In case of SWBOTB = 2, prescribe bottom flux\n\n* Specify whether a sinus function or a table are used for the bottom flux:\n  SW2    = {{SW2}}           ! 1 = sinus function\n                             ! 2 = table\n\n{{#SWITCH_SW2_OPTION_1}}\n* In case of sinus function (SW2 = 1), specify:\n  SINAVE = {{SINAVE}}        ! Average value of bottom flux [-10..10 cm/d, R, + = upwards]\n  SINAMP = {{SINAMP}}        ! Amplitude of bottom flux sine function [-10..10 cm/d, R]\n  SINMAX = {{SINMAX}}        ! Time of the year with maximum bottom flux [0..366 d, R]\n{{/SWITCH_SW2_OPTION_1}}\n{{#SWITCH_SW2_OPTION_2}}\n* In case of table (SW2 = 2), specify date DATE2 [date] and bottom flux QBOT2 [-100..100 cm/d, R, positive = upwards]:\n\n{{#TABLE_SWBOTBTB2}}\n  {{DATE2}} {{QBOT2}}\n{{/TABLE_SWBOTBTB2}}\n* End of table\n{{/SWITCH_SW2_OPTION_2}}\n\n**********************************************************************************\n{{/SWITCH_SWBOTB_OPTION_2}}\n{{#SWITCH_SWBOTB_OPTION_3}}\n**********************************************************************************\n* In case of SWBOTB = 3, calculate bottom flux from hydraulic head in deep aquifer\n\n* Switch for vertical hydraulic resistance between bottom boundary and groundwater level\n  SWBOTB3RESVERT = {{SWBOTB3RESVERT}} ! 0 = Include vertical hydraulic resistance\n                             ! 1 = Suppress vertical hydraulic resistance\n\n* Switch for numerical solution of bottom flux: 0 = explicit, 1 = implicit\n  SWBOTB3IMPL = {{SWBOTB3IMPL}} ! 0 = explicit solution (choose always when SHAPE &lt; 1.0)\n                             ! 1 = implicit solution\n\n* Specify:\n  SHAPE  = {{SHAPE}}         ! Shape factor to derive average groundwater level [0..1 -, R]\n  HDRAIN = {{HDRAIN}}        ! Mean drain base to correct for average groundwater level [-10000..0 cm, R]\n  RIMLAY = {{RIMLAY}}        ! Vertical resistance of aquitard [0..100000 d, R]\n\n* Specify whether a sinus function or a table are used for the hydraulic head in the deep aquifer:\n  SW3    = {{SW3}}           ! 1 = sinus function\n                             ! 2 = table\n\n{{#SWITCH_SW3_OPTION_1}}\n* In case of sinus function (SW3  = 1), specify:\n  AQAVE  = {{AQAVE}}         ! Average hydraulic head in underlaying aquifer [-10000..1000 cm, R]\n  AQAMP  = {{AQAMP}}         ! Amplitude hydraulic head sinus wave [0..1000 cm, R]\n  AQTMAX = {{AQTMAX}}        ! First time of the year with maximum hydraulic head [0..366 d, R]\n  AQPER  = {{AQPER}}         ! Period hydraulic head sinus wave [0..366 d, I]\n{{/SWITCH_SW3_OPTION_1}}\n{{#SWITCH_SW3_OPTION_2}}\n* In case of table (SW3  = 2), specify date DATE3 [date] and average pressure head in underlaying aquifer HAQUIF [-10000..1000 cm, R]:\n\n{{#TABLE_SWBOTBTB3A}}\n  {{DATE3}} {{HAQUIF}}\n{{/TABLE_SWBOTBTB3A}}\n* End of table\n{{/SWITCH_SW3_OPTION_2}}\n\n* An extra groundwater flux can be specified which is added to above specified flux\n  SW4   = {{SW4}}            ! 0 = no extra flux\n                             ! 1 = include extra flux\n\n{{#SWITCH_SW4_OPTION_1}}\n* If SW4 = 1, specify date DATE4 [date] and bottom flux QBOT4 [-100..100 cm/d, R]\n* QTAB is positive when flux is upward:\n\n{{#TABLE_SWBOTBTB3B}}\n  {{DATE4}} {{QBOT4}}\n{{/TABLE_SWBOTBTB3B}}\n* End of table\n\n{{/SWITCH_SW4_OPTION_1}}\n**********************************************************************************\n{{/SWITCH_SWBOTB_OPTION_3}}\n{{#SWITCH_SWBOTB_OPTION_4}}\n**********************************************************************************\n* In case of SWBOTB = 4, calculate bottom flux as function of groundwater level\n\n\n* Specify whether an exponential relation or a table is used [1..2 -,I]:\n  SWQHBOT = {{SWQHBOT}}      ! 1 = bottom flux is calculated with an exponential relation\n                             ! 2 = bottom flux is derived from a table\n\n{{#SWITCH_SWQHBOT_OPTION_1}}\n* In case of an exponential relation (SWQHBOT = 1),\n* specify coefficients of relation qbot = A exp (B*abs(groundwater level))\n  COFQHA = {{COFQHA}}        ! Coefficient A, [-100..100 cm/d, R]\n  COFQHB = {{COFQHB}}        ! Coefficient B  [-1..1 /cm, R]\n\n* If SWQHBOT = 1, an extra flux can be added to the exponential relation\n  COFQHC = {{COFQHC}}        ! Water flux (positive upward) in addition to flux from exponential relation [-10..10 cm/d, R]\n{{/SWITCH_SWQHBOT_OPTION_1}}\n{{#SWITCH_SWQHBOT_OPTION_2}}\n* In case of a table (SWQHBOT = 2),\n* specify groundwaterlevel HTAB [-10000..1000, cm, R]  and bottom flux QTAB [-100..100 cm/d, R]\n* HTAB is negative below the soil surface, QTAB is positive when flux is upward:\n\n{{#TABLE_SWBOTBTB4}}\n  {{HTAB}} {{QTAB}}\n{{/TABLE_SWBOTBTB4}}\n* End of table\n{{/SWITCH_SWQHBOT_OPTION_2}}\n\n**********************************************************************************\n{{/SWITCH_SWBOTB_OPTION_4}}\n{{#SWITCH_SWBOTB_OPTION_5}}\n**********************************************************************************\n* In case of SWBOTB = 5, prescribe soil water pressure head of bottom compartment\n\n* Specify date DATE5 [date] and bottom compartment pressure head HBOT5 [-1.d10..1000 cm, R]:\n\n{{#TABLE_SWBOTBTB5}}\n  {{DATE5}} {{HBOT5}}\n{{/TABLE_SWBOTBTB5}}\n* End of table\n\n**********************************************************************************\n{{/SWITCH_SWBOTB_OPTION_5}}\n\n* End of input file .BBC!\n</code></pre>", "boost": 0.5}, {"location": "wiki/input-files/crp-file/", "title": ".CRP", "text": "<p>A .crp file defines crop parameters for different crop models. There are three types of crop modules in SWAP: simple (fixed) crop, WOFOST implementation, and dynamic grass growth. Each module requires a specific set of variables, which are outlined in their respective .crp file templates.</p> <ul> <li>Simple (fixed) crop - This module uses a fixed set of parameters for crop growth.</li> <li>WOFOST crop - This module follows the WOFOST model, which is more detailed.</li> <li>Dynamic grass growth - This module simulates the growth of grass dynamically over time.</li> </ul>", "boost": 0.5}, {"location": "wiki/input-files/crp-file/#simple_fixed_crop", "title": "Simple (fixed) crop", "text": "CROPFIL_FIXED.template <pre><code>**********************************************************************************\n* Contents: SWAP 4 - Crop data (fixed crop)\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of crp-file\n*\n**********************************************************************************\n\n*** PLANT GROWTH SECTION ***\n\n**********************************************************************************\n* Part 0 : Preparation, Sowing, Germination and Harvest\n\n* Part 0a: Preparation before crop growth\n\n* Switch for preparation:\n  SWPREP = {{SWPREP}}        ! 0 = No preparation\n                             ! 1 = Preparation before start of crop growth\n\n{{#SWITCH_SWPREP_OPTION_1}}\n* If SWPREP = 1, specify:\n  ZPREP = {{ZPREP}}          ! Z-level for monitoring work-ability for the crop [-100..0 cm, R]\n  HPREP = {{HPREP}}          ! Maximum pressure head during preparation [-200..0 cm, R]\n  MAXPREPDELAY = {{MAXPREPDELAY}} ! Maximum delay of preparation from start of growing season [1..366 d, I]\n\n{{/SWITCH_SWPREP_OPTION_1}}\n* Part 0b: Sowing\n* Switch for sowing:\n  SWSOW = {{SWSOW}}          ! 0 = No sowing\n                             ! 1 = Sowing before start of crop growth\n\n{{#SWITCH_SWSOW_OPTION_1}}\n* If SWSOW = 1, specify:\n  ZSOW = {{ZSOW}}            ! Z-level for monitoring work-ability for the crop [-100..0 cm, R]\n  HSOW = {{HSOW}}            ! Maximum pressure head during sowing [-200..0 cm, R]\n  ZTEMPSOW = {{ZTEMPSOW}}    ! Z-level for monitoring temperature for sowing [-100..0 cm, R]\n  TEMPSOW = {{TEMPSOW}}      ! Soil temperature needed for sowing [0..30 oC, R]\n  MAXSOWDELAY = {{MAXSOWDELAY}} ! Maximum delay of sowing from start of growing season [1..366 d, I]\n\n{{/SWITCH_SWSOW_OPTION_1}}\n* Part 0c: Germination\n\n* Switch for germination:\n  SWGERM = {{SWGERM}}        ! 0 = No germination\n                             ! 1 = Simulate germination depending on temperature\n                             ! 2 = Simulate germination depending on temperature and hydrological conditions\n\n{{#SWITCH_SWGERM_OPTION_1}}\n* If SWGERM = 1, specify:\n  TSUMEMEOPT = {{TSUMEMEOPT}} ! Temperature sum needed for crop emergence [0..1000 oC, R]\n  TBASEM = {{TBASEM}}        ! Minimum temperature, used for germination trajectory [0..40 oC, R]\n  TEFFMX = {{TEFFMX}}        ! Maximum temperature, used for germination trajectory [0..40 oC, R]\n\n{{/SWITCH_SWGERM_OPTION_1}}\n{{#SWITCH_SWGERM_OPTION_2}}\n* If SWGERM = 1, specify:\n  TSUMEMEOPT = {{TSUMEMEOPT}} ! Temperature sum needed for crop emergence [0..1000 oC, R]\n  TBASEM = {{TBASEM}}        ! Minimum temperature, used for germination trajectory [0..40 oC, R]\n  TEFFMX = {{TEFFMX}}        ! Maximum temperature, used for germination trajectory [0..40 oC, R]\n  HDRYGERM = {{HDRYGERM}}    ! Pressure head rootzone for dry germination trajectory [-1000..-0.01 cm, R]\n  HWETGERM = {{HWETGERM}}    ! Pressure head rootzone for wet germination trajectory [-100..-0.01 cm, R]\n  ZGERM = {{ZGERM}}          ! Z-level for monitoring average pressure head [-100..0 cm, R]\n  AGERM = {{AGERM}}          ! A-coefficient Eq. 24/25 Feddes &amp; Van Wijk [1..1000, R]\n\n{{/SWITCH_SWGERM_OPTION_2}}\n\n* Part 0d: Harvest\n\n  DVSEND = {{DVSEND}}        ! Development stage at harvest [0..3 -, R]\n\n* Switch to check work-ability during harvest:\n  SWHARV = {{SWHARV}}        ! 0 = Timing of harvest depends on end of growing period (CROPEND)\n                             ! 1 = Timing of harvest depends on development stage (DVSEND)\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 1: Crop development\n\n* Duration of crop growing period:\n  IDEV = {{IDEV}}            ! 1 = Duration is fixed\n                             ! 2 = Duration is variable\n\n{{#SWITCH_IDEV_OPTION_1}}\n* If duration is fixed (IDEV = 1), specify:\n  LCC = {{LCC}}              ! Duration of the crop growing period [1..366 days, I]\n{{/SWITCH_IDEV_OPTION_1}}\n{{#SWITCH_IDEV_OPTION_2}}\n* If duration is variable (IDEV = 2), specify:\n  TSUMEA = {{TSUMEA}}        ! Temperature sum from emergence to anthesis [0..1d4 oC, R]\n  TSUMAM = {{TSUMAM}}        ! Temperature sum from anthesis to maturity  [0..1d4 oC, R]\n  TBASE = {{TBASE}}          ! Start value of temperature sum [-10..30 0C, R]\n{{/SWITCH_IDEV_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Light extinction\n\n  KDIF = {{KDIF}}            ! Extinction coefficient for diffuse visible light [0..2 -, R]\n  KDIR = {{KDIR}}            ! Extinction coefficient for direct visible light  [0..2 -, R]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Leaf area index or soil cover fraction\n\n* Choose between LAI or SCF:\n  SWGC = {{SWGC}}            ! 1 = Leaf Area Index\n                             ! 2 = Soil Cover Fraction\n\n{{#SWITCH_SWGC_OPTION_1}}\n* If SWGC = 1, list Leaf Area Index [0..12 (m2 leaf)/(m2 soil), R], as function of dev. stage [0..2 -, R]:\n\n* DVS   LAI\n  GCTB =\n{{#TABLE_GCTB}}\n  {{DVS}} {{LAI}}\n{{/TABLE_GCTB}}\n{{/SWITCH_SWGC_OPTION_1}}\n{{#SWITCH_SWGC_OPTION_2}}\n* If SWGC = 2, list Soil Cover Fraction [0..1 (m2 cover)/(m2 soil), R], as function of dev. stage [0..2 -, R]:\n\n* DVS   SCF\n  GCTB =\n{{#TABLE_GCTB}}\n  {{DVS}} {{SCF}}\n{{/TABLE_GCTB}}\n{{/SWITCH_SWGC_OPTION_2}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 4: crop factor or crop height\n\n* Choose between crop factor and crop height\n* Choose crop factor if ETref is used, either from meteo input file (SWETR = 1) or with Penman-Monteith\n* Choose crop height if Penman-Monteith should be used with actual crop height, albedo and canopy resistance\n  SWCF = {{SWCF}}            ! 1 = Crop factor\n                             ! 2 = Crop height\n\n{{#SWITCH_SWCF_OPTION_1}}\n* If SWCF = 1, list Crop Factor [0..2 -, R],   as function of dev. stage [0..2 -, R]:\n\n{{#TABLE_CFTB}}\n  {{DVS}} {{CF}}\n{{/TABLE_CFTB}}\n{{/SWITCH_SWCF_OPTION_1}}\n{{#SWITCH_SWCF_OPTION_2}}\n* If SWCF = 2, list Crop Height [0..1.d4 cm, R], as function of dev. stage [0..2 -, R]:\n\n{{#TABLE_CFTB}}\n  {{DVS}} {{CH}}\n{{/TABLE_CFTB}}\n* End of table\n\n* If SWCF = 2, in addition to crop height list crop specific values for:\n  ALBEDO = {{ALBEDO}}        ! Crop reflection coefficient [0..1.0 -, R]\n  RSC = {{RSC}}              ! Minimum canopy resistance [0..1d6 s/m, R]\n  RSW = {{RSW}}              ! Canopy resistance of intercepted water [0..1d6 s/m, R]\n{{/SWITCH_SWCF_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 10: Root growth and root density profile\n\n* Switch development of root growth\n  SWRD = {{SWRD}}            ! 1 = Root growth depends on development stage\n                             ! 2 = Root growth depends on maximum daily increase\n                             ! 3 = Root growth depends on available root biomass\n\n{{#SWITCH_SWRD_OPTION_1}}\n* If case of dependency development stage (SWRD=1), specify:\n* List Rooting Depth [0..1000 cm, R], as a function of development stage [0..2 -, R]:\n\n*  DVS   RD\n  RDTB =\n{{#TABLE_RDTB}}\n  {{DVS}} {{RD}}\n{{/TABLE_RDTB}}\n* End of table\n{{/SWITCH_SWRD_OPTION_1}}\n{{#SWITCH_SWRD_OPTION_2}}\n* If case of dependency maximum daily increase (SWRD=2), specify:\n  RDI = {{RDI}}              ! Initial rooting depth [0..1000 cm, R]\n  RRI = {{RRI}}              ! Maximum daily increase in rooting depth [0..100 cm/d, R]\n  RDC = {{RDC}}              ! Maximum rooting depth of particular crop [0..1000 cm, R]\n\n* Switch for calculation rooting depth:\n  SWDMI2RD = {{SWDMI2RD}}    ! 0 = Rooting depth increase is related to availability assimilates for roots\n                             ! 1 = Rooting depth increase is related to relative dry matter increase\n\n{{/SWITCH_SWRD_OPTION_2}}\n{{#SWITCH_SWRD_OPTION_3}}\n* In case of dependency available root biomass (SWRD=3), specify:\n* List rooting depth [0..5000 cm, R] as function of root weight [0..5000 kg DM/ha, R]:\n*   RW     RD\n  RLWTB =\n{{#TABLE_RLWTB}}\n  {{RW}} {{RD}}\n{{/TABLE_RLWTB}}\n* End of table\n\n  WRTMAX = {{WRTMAX}}        ! Maximum root weight [0..1d5 kg DM/ha, R]\n{{/SWITCH_SWRD_OPTION_3}}\n\n* Always specify:\n* Switch for calculation of relative root density (default SWRDC = 1):\n  SWRDC = {{SWRDC}}          ! 0 = Root density is not modified\n                             ! 1 = Root density is modified based on root water extraction\n\n* List root density [0..100 cm/cm3, R] as function of relative rooting depth [0..1 -, R]:\n* In case of drought stress according to Feddes et al. (1978) (SWDROUGHT = 1), relative root density (-) is sufficient\n\n*   RRD    RDENS\n  RDCTB =\n{{#TABLE_RDCTB}}\n  {{RRD}} {{RDENS}}\n{{/TABLE_RDCTB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 11: Oxygen stress\n\n* Switch for oxygen stress:\n  SWOXYGEN = {{SWOXYGEN}}    ! 0 = No oxygen stress\n                             ! 1 = Oxygen stress according to Feddes et al. (1978)\n                             ! 2 = Oxygen stress according to Bartholomeus et al. (2008)\n\n* Switch for checking aerobic conditions in root zone to stop root(zone) development\n  SWWRTNONOX = {{SWWRTNONOX}} ! 0 = Do not check for aerobic conditions\n                             ! 1 = Check for aerobic conditions\n\n{{#SWITCH_SWWRTNONOX_OPTION_1}}\n  AERATECRIT = {{AERATECRIT}} ! Threshold to stop root extension in case of oxygenstress; 0.0 maximum oxygen stress [0.0001..1.0 -, R]\n\n{{/SWITCH_SWWRTNONOX_OPTION_1}}\n{{#SWITCH_SWOXYGEN_OPTION_1}}\n* If SWOXYGEN=1, specify:\n  HLIM1 = {{HLIM1}}          ! No water extraction at higher pressure heads [-100..100 cm, R]\n  HLIM2U = {{HLIM2U}}        ! H below which optimum water extr. starts for top layer [-1000..100 cm, R]\n  HLIM2L = {{HLIM2L}}        ! H below which optimum water extr. starts for sub layer [-1000..100 cm, R]\n{{/SWITCH_SWOXYGEN_OPTION_1}}\n{{#SWITCH_SWOXYGEN_OPTION_2}}\n* If SWOXYGEN=2, specify:\n  Q10_MICROBIAL = {{Q10_MICROBIAL}} ! Relative increase in microbial respiration at temperature increase of 10 C [1.0..4.0 -, R]\n  SPECIFIC_RESP_HUMUS = {{SPECIFIC_RESP_HUMUS}} ! Respiration rate of humus at 25 C [0.0..1.0 kg O2/kg C/d, R]\n  SRL = {{SRL}}              ! Specific root length [0.0..1.d10 m root/kg root, R]\n\n* Switch for calculation of root radius:\n  SWROOTRADIUS = {{SWROOTRADIUS}} ! 1 = Calculate root radius\n                             ! 2 = Root radius is given in input file\n\n{{#SWITCH_SWROOTRADIUS_OPTION_1}}\n* If SWROOTRADIUS=1, specify:\n  DRY_MAT_CONT_ROOTS = {{DRY_MAT_CONT_ROOTS}} ! Dry matter content of roots [0.0..1.0 -, R]\n  AIR_FILLED_ROOT_POR = {{AIR_FILLED_ROOT_POR}} ! Air filled root porosity [0.0..1.0 -, R]\n  SPEC_WEIGHT_ROOT_TISSUE = {{SPEC_WEIGHT_ROOT_TISSUE}} ! Specific weight of non-airfilled root tissue [0.0..1.d5 kg root/m3 root, R]\n  VAR_A = {{VAR_A}}          ! Variance of root radius [0.0..1.0 -, R]\n{{/SWITCH_SWROOTRADIUS_OPTION_1}}\n{{#SWITCH_SWROOTRADIUS_OPTION_2}}\n* If SWROOTRADIUS=2, specify:\n  ROOT_RADIUSO2 = {{ROOT_RADIUSO2}} ! Root radius for oxygen stress module [1d-6..0.1 m, R]\n{{/SWITCH_SWROOTRADIUS_OPTION_2}}\n* If CROPTYPE=1 and SWOXYGEN=2 growth, specify:\n  Q10_ROOT = {{Q10_ROOT}}    ! Relative increase in root respiration at temperature increase of 10 oC [1.0..4.0 -, R]\n  F_SENES  = {{F_SENES}}     ! Reduction factor for senescence, used for maintenance respiration [0..1.0 -, R]\n  C_MROOT  = {{C_MROOT}}     ! Maintenance coefficient of root [0.0..1.0 kg O2/kg/d, R]\n\n* Ratio root total respiration / maintenance respiration [1..5.0 -, R]\n*  DVS   MAX_RESP_FACTOR\n  MRFTB =\n{{#TABLE_MRFTB}}\n  {{DVS}} {{MAX_RESP_FACTOR}}\n{{/TABLE_MRFTB}}\n* End of table\n\n* List dry weight of roots at soil surface [0..10 kg/m3, R], as a function of development stage [0..2 -,R]:\n*  DVS   W_ROOT_SS\n  WRTB =\n{{#TABLE_WRTB}}\n  {{DVS}} {{W_ROOT_SS}}\n{{/TABLE_WRTB}}\n* End of table\n{{/SWITCH_SWOXYGEN_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 12: Drought stress\n\n* Switch for drought stress:\n  SWDROUGHT = {{SWDROUGHT}}  ! 1 = Drought stress according to Feddes et al. (1978)\n                             ! 2 = Drought stress according to De Jong van Lier et al. (2008)\n\n{{#SWITCH_SWDROUGHT_OPTION_1}}\n* If SWDROUGHT=1, or in case of irrigation scheduling (SCHEDULE = 1), specify:\n  HLIM3H = {{HLIM3H}}        ! Pressure head below which water uptake reduction starts at high Tpot [-1d4..100 cm, R]\n  HLIM3L = {{HLIM3L}}        ! Pressure head below which water uptake reduction starts at low Tpot  [-1d4..100 cm, R]\n  HLIM4 = {{HLIM4}}          ! No water extraction at lower soil water pressure heads [-1.6d4..100 cm, R]\n  ADCRH = {{ADCRH}}          ! Level of high atmospheric demand, corresponding to HLIM3H [0..5 cm/d, R]\n  ADCRL = {{ADCRL}}          ! Level of low atmospheric demand, corresponding to HLIM3L [0..5 cm/d, R]\n{{/SWITCH_SWDROUGHT_OPTION_1}}\n{{#SWITCH_SWDROUGHT_OPTION_2}}\n* If SWDROUGHT=2, specify:\n  WILTPOINT  = {{WILTPOINT}} ! Minimum pressure head in leaves [-1d8..-1d2 cm, R]\n  KSTEM = {{KSTEM}}          ! Hydraulic conductance between leaf and root xylem [1d-10..10 /d, R]\n  RXYLEM = {{RXYLEM}}        ! Xylem radius [1d-4..1 cm, R]\n  ROOTRADIUS = {{ROOTRADIUS}} ! Root radius [1d-4..1 cm, R]\n  KROOT = {{KROOT}}          ! Radial hydraulic conductivity of root tissue [1d-10..1d10 cm/d, R]\n  ROOTCOEFA  = {{ROOTCOEFA}} ! Defines relative distance between roots at which mean soil water content occurs [0..1 -, R]\n  SWHYDRLIFT = {{SWHYDRLIFT}} ! Switch for possibility hydraulic lift in root system [N=0, Y=1]\n  ROOTEFF = {{ROOTEFF}}      ! Root system efficiency factor [0..1 -, R]\n  STEPHR = {{STEPHR}}        ! Step between values of hroot and hxylem in iteration cycle [0..10 cm, R]\n  CRITERHR = {{CRITERHR}}    ! Maximum difference of Hroot between iterations; convergence criterium [0..10 cm, R]\n  TACCUR = {{TACCUR}}        ! Maximum absolute difference between simulated and calculated potential transpiration rate (1d-5..1d-2 cm/d, R)\n{{/SWITCH_SWDROUGHT_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 13: salt stress\n\n* Switch salinity stress\n  SWSALINITY = {{SWSALINITY}} ! 0 = No salinity stress\n                             ! 1 = Maas and Hoffman reduction function\n                             ! 2 = Use osmotic head\n\n{{#SWITCH_SWSALINITY_OPTION_1}}\n* If SWSALINITY = 1, specify threshold and slope of Maas and Hoffman\n  SALTMAX = {{SALTMAX}}      ! Threshold salt concentration in soil water  [0..100 mg/cm3, R]\n  SALTSLOPE = {{SALTSLOPE}}  ! Decline of root water uptake above threshold [0..1.0 cm3/mg, R]\n{{/SWITCH_SWSALINITY_OPTION_1}}\n{{#SWITCH_SWSALINITY_OPTION_2}}\n* If SWSALINITY = 2, specify:\n  SALTHEAD = {{SALTHEAD}}    ! Conversion factor salt concentration (mg/cm3) into osmotic head (cm) [0..1000 cm/(mg/cm3), R]\n{{/SWITCH_SWSALINITY_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part xx: compensation of root water uptake stress\n\n* Switch for compensation root water uptake stress\n  SWCOMPENSATE = {{SWCOMPENSATE}} ! 0 = No compensation\n                             ! 1 = Compensation according to Jarvis (1989)\n                             ! 2 = Compensation according to Walsum (2019)\n\n{{#SWITCH_SWCOMPENSATE_OPTION_1}}\n* Switch for selection of stressors to compensate\n  SWSTRESSOR = {{SWSTRESSOR}} ! 1 = Compensation of all stressors\n                             ! 2 = Compensation of drought stress\n                             ! 3 = Compensation of oxygen stress\n                             ! 4 = Compensation of salinity stress\n                             ! 5 = Compensation of frost stress\n\n* If SWCOMPENSATE = 1, specify:\n  ALPHACRIT = {{ALPHACRIT}}  ! Critical stress index for compensation of root water uptake [0.2..1 -, R]\n\n{{/SWITCH_SWCOMPENSATE_OPTION_1}}\n{{#SWITCH_SWCOMPENSATE_OPTION_2}}\n* Switch for selection of stressors to compensate\n  SWSTRESSOR = {{SWSTRESSOR}} ! 1 = Compensation of all stressors\n                             ! 2 = Compensation of drought stress\n                             ! 3 = Compensation of oxygen stress\n                             ! 4 = Compensation of salinity stress\n                             ! 5 = Compensation of frost stress\n\n* If SWCOMPENSATE = 2, specify:\n  DCRITRTZ = {{DCRITRTZ}}    ! Threshold of rootzone thickness after which compensation occurs [0.02..100 cm, R]\n\n{{/SWITCH_SWCOMPENSATE_OPTION_2}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 14: interception\n\n* For agricultural crops apply interception concept of Von Hoyningen-Hune and Braden\n* Switch for rainfall interception method:\n  SWINTER = {{SWINTER}}      ! 0 = No interception calculated\n                             ! 1 = Agricultural crops (Von Hoyningen-Hune and Braden)\n                             ! 2 = Trees and forests (Gash)\n\n{{#SWITCH_SWINTER_OPTION_1}}\n* In case of agricultural crops (SWINTER=1) specify:\n  COFAB = {{COFAB}}          ! Interception coefficient, corresponding to maximum interception amount [0..1 cm, R]\n{{/SWITCH_SWINTER_OPTION_1}}\n{{#SWITCH_SWINTER_OPTION_2}}\n* In case of closed forest canopies (SWINTER=2), specify as function of time T [0..366 d, R]:\n* PFREE = Free throughfall coefficient [0..1 -, R]\n* PSTEM = Stem flow coefficient [0..1 -, R]\n* SCANOPY = Storage capacity of canopy [0..10 cm, R]\n* AVPREC = Average rainfall intensity [0..100 cm/d, R]\n* AVEVAP = Average evaporation intensity during rainfall from a wet canopy [0..10 cm/d, R]\n\n{{#TABLE_INTERTB}}\n  {{T}} {{PFREE}} {{PSTEM}} {{SCANOPY}} {{AVPREC}} {{AVEVAP}}\n{{/TABLE_INTERTB}}\n* End of table\n{{/SWITCH_SWINTER_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** IRRIGATION SCHEDULING SECTION ***\n\n**********************************************************************************\n* Part 1: General\n\n  SCHEDULE = {{SCHEDULE}}    ! Switch for application irrigation scheduling [Y=1, N=0]\n\n{{#SWITCH_SCHEDULE_OPTION_1}}\n* If SCHEDULE = 1, specify:\n  STARTIRR = {{STARTIRR}}    ! Specify day and month at which irrigation scheduling starts [dd mm]\n  ENDIRR = {{ENDIRR}}        ! Specify day and month at which irrigation scheduling stops [dd mm]\n  CIRRS = {{CIRRS}}          ! Solute concentration of irrigation water [0..100 mg/cm3, R]\n\n* Switch for type of irrigation method:\n  ISUAS = {{ISUAS}}          ! 0 = Sprinkling irrigation\n                             ! 1 = Surface irrigation\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Irrigation time criteria\n\n* Choose one of the following timing criteria options [1..6 -, I]:\n  TCS = {{TCS}}              ! 1 = Ratio actual/potential transpiration\n                             ! 2 = Depletion of Readily Available Water\n                             ! 3 = Depletion of Totally Available Water\n                             ! 4 = Depletion of absolute Water Amount\n                             ! 6 = Fixed weekly irrigation\n                             ! 7 = Pressure head\n                             ! 8 = Moisture content\n\n{{#SWITCH_TCS_OPTION_1}}\n* Ratio actual/potential transpiration (TCS = 1)\n* Specify mimimum of ratio actual/potential transpiration TREL [0..1 -, R] as function of crop development stage\n{{#TABLE_TC1TB}}\n  {{DVS_TC1}} {{TREL}}\n{{/TABLE_TC1TB}}\n* End of table\n{{/SWITCH_TCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_2}}\n* Depletion of Readily Available Water (TCS = 2)\n* Specify minimum fraction of readily available water RAW [0..1 -, R] as function of crop development stage\n{{#TABLE_TC2TB}}\n  {{DVS_TC2}} {{RAW}}\n{{/TABLE_TC2TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_2}}\n{{#SWITCH_TCS_OPTION_3}}\n* Depletion of Totally Available Water (TCS = 3)\n* Specify minimal fraction of totally available water TAW [0..1 -, R] as function of crop development stage\n{{#TABLE_TC3TB}}\n  {{DVS_TC3}} {{TAW}}\n{{/TABLE_TC3TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_3}}\n{{#SWITCH_TCS_OPTION_4}}\n* Depletion of absolute Water Amount (TCS = 4)\n* Specify maximum amount of water depleted below field capacity DWA [0..500 mm, R] as function of crop development stage\n{{#TABLE_TC4TB}}\n  {{DVS_TC4}} {{DWA}}\n{{/TABLE_TC4TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_4}}\n{{#SWITCH_TCS_OPTION_6}}\n* Fixed weekly irrigation (TCS = 6)\n* Only irrigate when soil water deficit in root zone is larger than threshold\n  IRGTHRESHOLD = {{IRGTHRESHOLD}} ! Threshold value for weekly irrigation  [0..20 mm, R]\n{{/SWITCH_TCS_OPTION_6}}\n{{#SWITCH_TCS_OPTION_7}}\n* Pressure head (TCS = 7)\n* Specify critical pressure head [-1d6..-100 cm, R] as function of crop development stage:\n{{#TABLE_TC7TB}}\n  {{DVS_TC7}} {{HCRI}}\n{{/TABLE_TC7TB}}\n* End of table\n\n  DCRIT =  {{DCRIT}}         ! Depth of the sensor [-100..0 cm, R]\n\n* In case TCS = 7, over-irrigation can be applied if the salinity concentration exceeds a threshold salinity\n* Switch for over-irrigation:\n  SWCIRRTHRES = {{SWCIRRTHRES}} ! 0 = No over-irrigation\n                             ! 1 = Apply over-irrigation\n\n{{#SWITCH_SWCIRRTHRES_OPTION_1}}\n* If SWCIRRTHRES = 1, specify:\n  CIRRTHRES = {{CIRRTHRES}}  ! Threshold salinity concentration above which over-irrigation occurs [0..100 mg/cm3, R]\n  PERIRRSURP = {{PERIRRSURP}} ! Over-irrigation of the usually scheduled irrigation depth [0..100 %, R]\n{{/SWITCH_SWCIRRTHRES_OPTION_1}}\n{{/SWITCH_TCS_OPTION_7}}\n{{#SWITCH_TCS_OPTION_8}}\n* Moisture content (TCS = 8)\n* Specify critical moisture content [0..1 cm3/cm3, R] as function of crop development stage\n{{#TABLE_TC8TB}}\n  {{DVS_TC8}} {{TCRI}}\n{{/TABLE_TC8TB}}\n* End of table\n\n  DCRIT =  {{DCRIT}}         ! Depth of the sensor [-100..0 cm, R]\n\n* In case TCS = 8, over-irrigation can be applied if the salinity concentration exceeds a threshold salinity\n* Switch for over-irrigation:\n  SWCIRRTHRES = {{SWCIRRTHRES}} ! 0 = No over-irrigation\n                             ! 1 = Apply over-irrigation\n\n{{#SWITCH_SWCIRRTHRES_OPTION_1}}\n* If SWCIRRTHRES = 1, specify:\n  CIRRTHRES = {{CIRRTHRES}}  ! Threshold salinity concentration above which over-irrigation occurs [0..100 mg/cm3, R]\n  PERIRRSURP = {{PERIRRSURP}} ! Over-irrigation of the usually scheduled irrigation depth [0..100 %, R]\n{{/SWITCH_SWCIRRTHRES_OPTION_1}}\n{{/SWITCH_TCS_OPTION_8}}\n\n* Switch for minimum time interval between irrigation applications\n  TCSFIX = {{TCSFIX}}        ! 0 = No minimum time interval\n                             ! 1 = Define minimum time interval\n{{#SWITCH_TCSFIX_OPTION_1}}\n\n* If TCSFIX = 1, specify:\n  IRGDAYFIX = {{IRGDAYFIX}}  ! Minimum number of days between irrigation applications [1..366 d, I]\n{{/SWITCH_TCSFIX_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Irrigation depth criteria\n\n* Choose one of the following two options for irrigation depth:\n  DCS = {{DCS}}              ! 1 = Back to field capacity\n                             ! 2 = Fixed Irrigation Depth\n\n{{#SWITCH_DCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_1}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_6}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_6}}\n{{#SWITCH_TCS_OPTION_7}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_7}}\n{{#SWITCH_TCS_OPTION_8}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_8}}\n* Specify amount of under (-) or over (+) irrigation DI [-100..100 mm, R] as function of crop development stage [0..2, R]:\n{{#TABLE_DC1TB}}\n  {{DVS_DC1}} {{DI}}\n{{/TABLE_DC1TB}}\n* End of table\n\n  RAITHRESHOLD = {{RAITHRESHOLD}} ! When rainfall exceeds RAITHRESHOLD, DI is added to back to field capacity [0..1000 cm, R]\n  {{/SWITCH_DCS_OPTION_1}}\n{{#SWITCH_DCS_OPTION_2}}\n* Specify fixed irrigation depth FID [0..400 mm, R] as function of crop development stage [0..2, R]:\n{{#TABLE_DC2TB}}\n  {{DVS_DC2}} {{FID}}\n{{/TABLE_DC2TB}}\n* End of table\n{{/SWITCH_DCS_OPTION_2}}\n\n* Select minimum and maximum of irrigation depths:\n  DCSLIM = {{DCSLIM}}        ! Switch, limit range irrigation depth  [Y=1, N=0]\n\n{{#SWITCH_DCSLIM_OPTION_1}}\n* If DCSLIM = 1, specify:\n  IRGDEPMIN = {{IRGDEPMIN}}  ! Minimum irrigation depth [0..100 mm, I]\n  IRGDEPMAX = {{IRGDEPMAX}}  ! Maximum irrigation depth [IRGDEPMIN..1d7 mm, I]\n\n{{/SWITCH_DCSLIM_OPTION_1}}\n{{/SWITCH_SCHEDULE_OPTION_1}}\n**********************************************************************************\n\n* End of .crp file !\n</code></pre>", "boost": 0.5}, {"location": "wiki/input-files/crp-file/#wofost_crop", "title": "WOFOST crop", "text": "CROPFIL_WOFOST.template <pre><code>**********************************************************************************\n* Contents: SWAP 4 - Crop data (WOFOST)\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of crp-file\n*\n**********************************************************************************\n\n*** PLANT GROWTH SECTION ***\n\n**********************************************************************************\n* Part 0 : Preparation, Sowing, Germination and Harvest\n\n* Part 0a: Preparation before crop growth\n\n* Switch for preparation:\n  SWPREP = {{SWPREP}}         ! 0 = No preparation\n                              ! 1 = Preparation before start of crop growth\n\n{{#SWITCH_SWPREP_OPTION_1}}\n* If SWPREP = 1, specify:\n  ZPREP = {{ZPREP}}           ! Z-level for monitoring work-ability for the crop [-100..0 cm, R]\n  HPREP = {{HPREP}}           ! Maximum pressure head during preparation [-200..0 cm, R]\n  MAXPREPDELAY = {{MAXPREPDELAY}} ! Maximum delay of preparation from start of growing season [1..366 d, I]\n\n{{/SWITCH_SWPREP_OPTION_1}}\n* Part 0b: Sowing\n* Switch for sowing:\n  SWSOW = {{SWSOW}}           ! 0 = No sowing\n                              ! 1 = Sowing before start of crop growth\n\n{{#SWITCH_SWSOW_OPTION_1}}\n* If SWSOW = 1, specify:\n  ZSOW = {{ZSOW}}             ! Z-level for monitoring work-ability for the crop [-100..0 cm, R]\n  HSOW = {{HSOW}}             ! Maximum pressure head during sowing [-200..0 cm, R]\n  ZTEMPSOW = {{ZTEMPSOW}}     ! Z-level for monitoring temperature for sowing [-100..0 cm, R]\n  TEMPSOW = {{TEMPSOW}}       ! Soil temperature needed for sowing [0..30 oC, R]\n  MAXSOWDELAY = {{MAXSOWDELAY}} ! Maximum delay of sowing from start of growing season [1..366 d, I]\n\n{{/SWITCH_SWSOW_OPTION_1}}\n* Part 0c: Germination\n\n* Switch for germination:\n  SWGERM = {{SWGERM}}         ! 0 = No germination\n                              ! 1 = Simulate germination depending on temperature\n                              ! 2 = Simulate germination depending on temperature and hydrological conditions\n\n{{#SWITCH_SWGERM_OPTION_1}}\n* If SWGERM = 1, specify:\n  TSUMEMEOPT = {{TSUMEMEOPT}} ! Temperature sum needed for crop emergence [0..1000 oC, R]\n  TBASEM = {{TBASEM}}         ! Minimum temperature, used for germination trajectory [0..40 oC, R]\n  TEFFMX = {{TEFFMX}}         ! Maximum temperature, used for germination trajectory [0..40 oC, R]\n\n{{/SWITCH_SWGERM_OPTION_1}}\n{{#SWITCH_SWGERM_OPTION_2}}\n* If SWGERM = 2, specify:\n  TSUMEMEOPT = {{TSUMEMEOPT}} ! Temperature sum needed for crop emergence [0..1000 oC, R]\n  TBASEM = {{TBASEM}}         ! Minimum temperature, used for germination trajectory [0..40 oC, R]\n  TEFFMX = {{TEFFMX}}         ! Maximum temperature, used for germination trajectory [0..40 oC, R]\n  HDRYGERM = {{HDRYGERM}}     ! Pressure head rootzone for dry germination trajectory [-1000..-0.01 cm, R]\n  HWETGERM = {{HWETGERM}}     ! Pressure head rootzone for wet germination trajectory [-100..-0.01 cm, R]\n  ZGERM = {{ZGERM}}           ! Z-level for monitoring average pressure head [-100..0 cm, R]\n  AGERM = {{AGERM}}           ! A-coefficient Eq. 24/25 Feddes &amp; Van Wijk [1..1000, R]\n\n{{/SWITCH_SWGERM_OPTION_2}}\n\n* Part 0d: Harvest\n\n  DVSEND = {{DVSEND}}         ! Development stage at harvest [0..3 -, R]\n\n* Switch to check work-ability during harvest:\n  SWHARV = {{SWHARV}}         ! 0 = Timing of harvest depends on end of growing period (CROPEND)\n                              ! 1 = Timing of harvest depends on development stage (DVSEND)\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 1: crop factor or crop height\n\n* Choose between crop factor and crop height\n* Choose crop factor if ETref is used, either from meteo input file (SWETR = 1) or with Penman-Monteith\n* Choose crop height if Penman-Monteith should be used with actual crop height, albedo and canopy resistance\n  SWCF = {{SWCF}}             ! 1 = Crop factor\n                              ! 2 = Crop height\n\n{{#SWITCH_SWCF_OPTION_1}}\n* If SWCF = 1, list Crop Factor [0..2 -, R],   as function of dev. stage [0..2 -, R]:\n\n{{#TABLE_CFTB}}\n  {{DVS}} {{CF}}\n{{/TABLE_CFTB}}\n{{/SWITCH_SWCF_OPTION_1}}\n{{#SWITCH_SWCF_OPTION_2}}\n* If SWCF = 2, list Crop Height [0..1.d4 cm, R], as function of dev. stage [0..2 -, R]:\n\n{{#TABLE_CFTB}}\n  {{DVS}} {{CH}}\n{{/TABLE_CFTB}}\n* End of table\n\n* If SWCF = 2, in addition to crop height list crop specific values for:\n  ALBEDO = {{ALBEDO}}       ! Crop reflection coefficient [0..1.0 -, R]\n  RSC = {{RSC}}             ! Minimum canopy resistance [0..1d6 s/m, R]\n  RSW = {{RSW}}             ! Canopy resistance of intercepted water [0..1d6 s/m, R]\n{{/SWITCH_SWCF_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2 : Crop development\n\n* Switch for crop development:\n  IDSL = {{IDSL}}         ! 0 = Crop development before anthesis depends on temperature\n                          ! 1 = Crop development before anthesis depends on temparature and daylength\n                          ! 2 = Crop development before anthesis depends on temperature, daylength and vernalisation factor\n\n* Specify temperature dependency:\n  TSUMEA = {{TSUMEA}}     ! Temperature sum from emergence to anthesis [0..10000 oC, R]\n  TSUMAM = {{TSUMAM}}     ! Temperature sum from anthesis to maturity  [0..10000 oC, R]\n\n* List increase in temperature sum [0..60 oC, R] as function of daily average temperature [0..100 oC, R]\n*   TAV  DTSM    (maximum 15 records)\n  DTSMTB =\n{{#TABLE_DTSMTB}}\n  {{TAV}} {{DTSM}}\n{{/TABLE_DTSMTB}}\n* End of table\n\n{{#SWITCH_IDSL_OPTION_1}}\n* Specify daylength dependency:\n  DLO = {{DLO}}           ! Optimum day length for crop development [0..24 h, R]\n  DLC = {{DLC}}           ! Minimum day length [0..24 h, R]\n{{/SWITCH_IDSL_OPTION_1}}\n{{#SWITCH_IDSL_OPTION_2}}\n* Specify daylength dependency:\n  DLO = {{DLO}}           ! Optimum day length for crop development [0..24 h, R]\n  DLC = {{DLC}}           ! Minimum day length [0..24 h, R]\n\n* Specify vernalisation factor\n  VERNSAT = {{VERNSAT}}   ! saturated vernalisation requirement [0.0,100.0 d, R]\n  VERNBASE = {{VERNBASE}} ! base vernalisation requirement [0.0,100.0 d, R]\n  VERNDVS = {{VERNDVS}}   ! critical development stage after which the effect of vernalisation is halted [0.0,0.3 -, R]\n\n*  table with rate of vernalisation as function of average air temperature [d/oC]\n  VERNTB =\n{{#TABLE_VERNTB}}\n  {{TAV}} {{VERNRATE}}\n{{/TABLE_VERNTB}}\n* End of table\n{{/SWITCH_IDSL_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Initial values\n\n  TDWI = {{TDWI}}     ! Initial total crop dry weight [0..10000 kg/ha, R]\n  LAIEM = {{LAIEM}}   ! Leaf area index at emergence [0..10 m2/m2, R]\n  RGRLAI = {{RGRLAI}} ! Maximum relative increase in LAI [0..1 m2/m2/d, R]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 4: Green surface area\n\n  SPA = {{SPA}}     ! Specific pod area  [0..1 ha/kg, R]\n  SSA = {{SSA}}     ! Specific stem area [0..1 ha/kg, R]\n  SPAN = {{SPAN}}   ! Life span under leaves under optimum conditions  [0..366 d, R]\n  TBASE = {{TBASE}} ! Lower threshold temperature for ageing of leaves [-10..30 oC, R]\n\n* List specific leaf area [0..1 ha/kg, R] as function of crop development stage [0..2 -, R]\n*   DVS     SLA    (maximum 15 records)\n  SLATB =\n{{#TABLE_SLATB}}\n  {{DVS}} {{SLA}}\n{{/TABLE_SLATB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 5: Assimilation\n\n  KDIF = {{KDIF}} ! Extinction coefficient for diffuse visible light [0..2 -, R]\n  KDIR = {{KDIR}} ! Extinction coefficient for direct visible light  [0..2 -, R]\n  EFF = {{EFF}}   ! Light use efficiency for real leaf [0..10 kg/ha/hr/(Jm2s), R]\n\n* List maximum CO2 assimilation rate [0..100 kg/ha/hr, R] as function of development stage [0..2 -, R]\n*   DVS    AMAX   (maximum 15 records)\n  AMAXTB =\n{{#TABLE_AMAXTB}}\n  {{DVS}} {{AMAX}}\n{{/TABLE_AMAXTB}}\n* End of table\n\n* List reduction factor of AMAX [-, R] as function of average day temperature [-10..50 oC, R]\n*   TAVD   TMPF  (maximum 15 records)\n  TMPFTB =\n{{#TABLE_TMPFTB}}\n  {{TAVD}} {{TMPF}}\n{{/TABLE_TMPFTB}}\n* End of table\n\n* List reduction factor of AMAX [-, R] as function of minimum day temperature [-10..50 oC, R]\n*   TMNR    TMNF  (maximum 15 records)\n  TMNFTB =\n{{#TABLE_TMNFTB}}\n  {{TMNR}} {{TMNF}}\n{{/TABLE_TMNFTB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 6: Conversion of assimilates into biomass\n\n  CVL = {{CVL}} ! Efficiency of conversion into leaves [0..1 kg/kg, R]\n  CVO = {{CVO}} ! Efficiency of conversion into storage organs [0..1 kg/kg, R]\n  CVR = {{CVR}} ! Efficiency of conversion into roots [0..1 kg/kg, R]\n  CVS = {{CVS}} ! Efficiency of conversion into stems [0..1 kg/kg, R]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 7: Maintenance respiration\n\n  Q10 = {{Q10}} ! Increase in respiration rate with temperature  [0..5 /10 oC, R]\n  RML = {{RML}} ! Maintenance respiration rate of leaves [0..1 kgCH2O/kg/d, R]\n  RMO = {{RMO}} ! Maintenance respiration rate of storage organs [0..1 kgCH2O/kg/d, R]\n  RMR = {{RMR}} ! Maintenance respiration rate of roots [0..1 kgCH2O/kg/d, R]\n  RMS = {{RMS}} ! Maintenance respiration rate of stems [0..1 kgCH2O/kg/d, R]\n\n* List reduction factor of senescence [-, R] as function of development stage [0..2 -, R]\n*   DVS    RFSE  (maximum 15 records)\n  RFSETB =\n{{#TABLE_RFSETB}}\n  {{DVS}} {{RFSE}}\n{{/TABLE_RFSETB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 8: Partitioning\n\n* List fraction of total dry matter increase partitioned to the roots [kg/kg, R]\n* as function of development stage [0..2 -, R]\n*   DVS     FR    (maximum 15 records)\n  FRTB =\n{{#TABLE_FRTB}}\n  {{DVS}} {{FR}}\n{{/TABLE_FRTB}}\n* End of table\n\n* List fraction of total above ground dry matter increase partitioned to the leaves [kg/kg, R]\n* as function of development stage [0..2 -, R]\n*   DVS     FL   (maximum 15 records)\n  FLTB =\n{{#TABLE_FLTB}}\n  {{DVS}} {{FL}}\n{{/TABLE_FLTB}}\n* End of table\n\n* List fraction of total above ground dry matter increase partitioned to the stems [kg/kg, R]\n* as function of development stage [0..2 -, R]\n*   DVS    FS   (maximum 15 records)\n  FSTB =\n{{#TABLE_FSTB}}\n  {{DVS}} {{FS}}\n{{/TABLE_FSTB}}\n* End of table\n\n* List fraction of total above ground dry matter increase partitioned to the storage organs [kg/kg, R]\n* as function of development stage [0..2 -, R]\n*   DVS    FO    (maximum 15 records)\n  FOTB =\n{{#TABLE_FOTB}}\n  {{DVS}} {{FO}}\n{{/TABLE_FOTB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 9: Death rates\n\n  PERDL = {{PERDL}}          ! Maximum relative death rate of leaves due to water stress [0..3 /d, R]\n\n* List relative death rates of roots [kg/kg/d] as function of development stage [0..2 -, R]\n*   DVS    RDRR    (maximum 15 records)\n  RDRRTB =\n{{#TABLE_RDRRTB}}\n  {{DVS}} {{RDRR}}\n{{/TABLE_RDRRTB}}\n* End of table\n\n* List relative death rates of stems [kg/kg/d] as function of development stage [0..2 -, R]\n*   DVS     RDRS    (maximum 15 records)\n  RDRSTB =\n{{#TABLE_RDRSTB}}\n  {{DVS}} {{RDRS}}\n{{/TABLE_RDRSTB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 10: Root growth and root density profile\n\n* Switch development of root growth\n  SWRD = {{SWRD}}            ! 1 = Root growth depends on development stage\n                             ! 2 = Root growth depends on maximum daily increase\n                             ! 3 = Root growth depends on available root biomass\n\n{{#SWITCH_SWRD_OPTION_1}}\n* If case of dependency development stage (SWRD=1), specify:\n* List Rooting Depth [0..1000 cm, R], as a function of development stage [0..2 -, R]:\n\n*  DVS   RD\n  RDTB =\n{{#TABLE_RDTB}}\n  {{DVS}} {{RD}}\n{{/TABLE_RDTB}}\n* End of table\n{{/SWITCH_SWRD_OPTION_1}}\n{{#SWITCH_SWRD_OPTION_2}}\n* If case of dependency maximum daily increase (SWRD=2), specify:\n  RDI = {{RDI}}              ! Initial rooting depth [0..1000 cm, R]\n  RRI = {{RRI}}              ! Maximum daily increase in rooting depth [0..100 cm/d, R]\n  RDC = {{RDC}}              ! Maximum rooting depth of particular crop [0..1000 cm, R]\n\n* Switch for calculation rooting depth:\n  SWDMI2RD = {{SWDMI2RD}}    ! 0 = Rooting depth increase is related to availability assimilates for roots\n                             ! 1 = Rooting depth increase is related to relative dry matter increase\n\n{{/SWITCH_SWRD_OPTION_2}}\n{{#SWITCH_SWRD_OPTION_3}}\n* In case of dependency available root biomass (SWRD=3), specify:\n* List rooting depth [0..5000 cm, R] as function of root weight [0..5000 kg DM/ha, R]:\n*   RW     RD\n  RLWTB =\n{{#TABLE_RLWTB}}\n  {{RW}} {{RD}}\n{{/TABLE_RLWTB}}\n* End of table\n\n  WRTMAX = {{WRTMAX}}        ! Maximum root weight [0..1d5 kg DM/ha, R]\n{{/SWITCH_SWRD_OPTION_3}}\n\n* Always specify:\n* Switch for calculation of relative root density (default SWRDC = 1):\n  SWRDC = {{SWRDC}}          ! 0 = Root density is not modified\n                             ! 1 = Root density is modified based on root water extraction\n\n* List root density [0..100 cm/cm3, R] as function of relative rooting depth [0..1 -, R]:\n* In case of drought stress according to Feddes et al. (1978) (SWDROUGHT = 1), relative root density (-) is sufficient\n\n*   RRD    RDENS\n  RDCTB =\n{{#TABLE_RDCTB}}\n  {{RRD}} {{RDENS}}\n{{/TABLE_RDCTB}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 11: Oxygen stress\n\n* Switch for oxygen stress:\n  SWOXYGEN = {{SWOXYGEN}}    ! 0 = No oxygen stress\n                             ! 1 = Oxygen stress according to Feddes et al. (1978)\n                             ! 2 = Oxygen stress according to Bartholomeus et al. (2008)\n\n* Switch for checking aerobic conditions in root zone to stop root(zone) development\n  SWWRTNONOX = {{SWWRTNONOX}} ! 0 = Do not check for aerobic conditions\n                             ! 1 = Check for aerobic conditions\n\n{{#SWITCH_SWWRTNONOX_OPTION_1}}\n  AERATECRIT = {{AERATECRIT}} ! Threshold to stop root extension in case of oxygenstress; 0.0 maximum oxygen stress [0.0001..1.0 -, R]\n\n{{/SWITCH_SWWRTNONOX_OPTION_1}}\n{{#SWITCH_SWOXYGEN_OPTION_1}}\n* If SWOXYGEN=1, specify:\n  HLIM1 = {{HLIM1}}          ! No water extraction at higher pressure heads [-100..100 cm, R]\n  HLIM2U = {{HLIM2U}}        ! H below which optimum water extr. starts for top layer [-1000..100 cm, R]\n  HLIM2L = {{HLIM2L}}        ! H below which optimum water extr. starts for sub layer [-1000..100 cm, R]\n{{/SWITCH_SWOXYGEN_OPTION_1}}\n{{#SWITCH_SWOXYGEN_OPTION_2}}\n* If SWOXYGEN=2, specify:\n  Q10_MICROBIAL = {{Q10_MICROBIAL}} ! Relative increase in microbial respiration at temperature increase of 10 C [1.0..4.0 -, R]\n  SPECIFIC_RESP_HUMUS = {{SPECIFIC_RESP_HUMUS}} ! Respiration rate of humus at 25 C [0.0..1.0 kg O2/kg C/d, R]\n  SRL = {{SRL}}              ! Specific root length [0.0..1.d10 m root/kg root, R]\n\n* Switch for calculation of root radius:\n  SWROOTRADIUS = {{SWROOTRADIUS}} ! 1 = Calculate root radius\n                             ! 2 = Root radius is given in input file\n\n{{#SWITCH_SWROOTRADIUS_OPTION_1}}\n* If SWROOTRADIUS=1, specify:\n  DRY_MAT_CONT_ROOTS = {{DRY_MAT_CONT_ROOTS}} ! Dry matter content of roots [0.0..1.0 -, R]\n  AIR_FILLED_ROOT_POR = {{AIR_FILLED_ROOT_POR}} ! Air filled root porosity [0.0..1.0 -, R]\n  SPEC_WEIGHT_ROOT_TISSUE = {{SPEC_WEIGHT_ROOT_TISSUE}} ! Specific weight of non-airfilled root tissue [0.0..1.d5 kg root/m3 root, R]\n  VAR_A = {{VAR_A}}          ! Variance of root radius [0.0..1.0 -, R]\n{{/SWITCH_SWROOTRADIUS_OPTION_1}}\n{{#SWITCH_SWROOTRADIUS_OPTION_2}}\n* If SWROOTRADIUS=2, specify:\n  ROOT_RADIUSO2 = {{ROOT_RADIUSO2}} ! Root radius for oxygen stress module [1d-6..0.1 m, R]\n{{/SWITCH_SWROOTRADIUS_OPTION_2}}\n{{/SWITCH_SWOXYGEN_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 12: Drought stress\n\n* Switch for drought stress:\n  SWDROUGHT = {{SWDROUGHT}}  ! 1 = Drought stress according to Feddes et al. (1978)\n                             ! 2 = Drought stress according to De Jong van Lier et al. (2008)\n\n{{#SWITCH_SWDROUGHT_OPTION_1}}\n* If SWDROUGHT=1, or in case of irrigation scheduling (SCHEDULE = 1), specify:\n  HLIM3H = {{HLIM3H}}        ! Pressure head below which water uptake reduction starts at high Tpot [-1d4..100 cm, R]\n  HLIM3L = {{HLIM3L}}        ! Pressure head below which water uptake reduction starts at low Tpot  [-1d4..100 cm, R]\n  HLIM4 = {{HLIM4}}          ! No water extraction at lower soil water pressure heads [-1.6d4..100 cm, R]\n  ADCRH = {{ADCRH}}          ! Level of high atmospheric demand, corresponding to HLIM3H [0..5 cm/d, R]\n  ADCRL = {{ADCRL}}          ! Level of low atmospheric demand, corresponding to HLIM3L [0..5 cm/d, R]\n{{/SWITCH_SWDROUGHT_OPTION_1}}\n{{#SWITCH_SWDROUGHT_OPTION_2}}\n* If SWDROUGHT=2, specify:\n  WILTPOINT  = {{WILTPOINT}} ! Minimum pressure head in leaves [-1d8..-1d2 cm, R]\n  KSTEM = {{KSTEM}}          ! Hydraulic conductance between leaf and root xylem [1d-10..10 /d, R]\n  RXYLEM = {{RXYLEM}}        ! Xylem radius [1d-4..1 cm, R]\n  ROOTRADIUS = {{ROOTRADIUS}} ! Root radius [1d-4..1 cm, R]\n  KROOT = {{KROOT}}          ! Radial hydraulic conductivity of root tissue [1d-10..1d10 cm/d, R]\n  ROOTCOEFA  = {{ROOTCOEFA}} ! Defines relative distance between roots at which mean soil water content occurs [0..1 -, R]\n  SWHYDRLIFT = {{SWHYDRLIFT}} ! Switch for possibility hydraulic lift in root system [N=0, Y=1]\n  ROOTEFF = {{ROOTEFF}}      ! Root system efficiency factor [0..1 -, R]\n  STEPHR = {{STEPHR}}        ! Step between values of hroot and hxylem in iteration cycle [0..10 cm, R]\n  CRITERHR = {{CRITERHR}}    ! Maximum difference of Hroot between iterations; convergence criterium [0..10 cm, R]\n  TACCUR = {{TACCUR}}        ! Maximum absolute difference between simulated and calculated potential transpiration rate (1d-5..1d-2 cm/d, R)\n{{/SWITCH_SWDROUGHT_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 13: salt stress\n\n* Switch salinity stress\n  SWSALINITY = {{SWSALINITY}} ! 0 = No salinity stress\n                             ! 1 = Maas and Hoffman reduction function\n                             ! 2 = Use osmotic head\n\n{{#SWITCH_SWSALINITY_OPTION_1}}\n* If SWSALINITY = 1, specify threshold and slope of Maas and Hoffman\n  SALTMAX = {{SALTMAX}}      ! Threshold salt concentration in soil water  [0..100 mg/cm3, R]\n  SALTSLOPE = {{SALTSLOPE}}  ! Decline of root water uptake above threshold [0..1.0 cm3/mg, R]\n{{/SWITCH_SWSALINITY_OPTION_1}}\n{{#SWITCH_SWSALINITY_OPTION_2}}\n* If SWSALINITY = 2, specify:\n  SALTHEAD = {{SALTHEAD}}    ! Conversion factor salt concentration (mg/cm3) into osmotic head (cm) [0..1000 cm/(mg/cm3), R]\n{{/SWITCH_SWSALINITY_OPTION_2}}\n\n**********************************************************************************\n\n**********************************************************************************\n* Part xx: compensation of root water uptake stress\n\n* Switch for compensation root water uptake stress\n  SWCOMPENSATE = {{SWCOMPENSATE}} ! 0 = No compensation\n                             ! 1 = Compensation according to Jarvis (1989)\n                             ! 2 = Compensation according to Walsum (2019)\n\n{{#SWITCH_SWCOMPENSATE_OPTION_1}}\n* Switch for selection of stressors to compensate\n  SWSTRESSOR = {{SWSTRESSOR}} ! 1 = Compensation of all stressors\n                             ! 2 = Compensation of drought stress\n                             ! 3 = Compensation of oxygen stress\n                             ! 4 = Compensation of salinity stress\n                             ! 5 = Compensation of frost stress\n\n* If SWCOMPENSATE = 1, specify:\n  ALPHACRIT = {{ALPHACRIT}}  ! Critical stress index for compensation of root water uptake [0.2..1 -, R]\n\n{{/SWITCH_SWCOMPENSATE_OPTION_1}}\n{{#SWITCH_SWCOMPENSATE_OPTION_2}}\n* Switch for selection of stressors to compensate\n  SWSTRESSOR = {{SWSTRESSOR}} ! 1 = Compensation of all stressors\n                             ! 2 = Compensation of drought stress\n                             ! 3 = Compensation of oxygen stress\n                             ! 4 = Compensation of salinity stress\n                             ! 5 = Compensation of frost stress\n\n* If SWCOMPENSATE = 2, specify:\n  DCRITRTZ = {{DCRITRTZ}}    ! Threshold of rootzone thickness after which compensation occurs [0.02..100 cm, R]\n\n{{/SWITCH_SWCOMPENSATE_OPTION_2}}\n**********************************************************************************\n\n**********************************************************************************\n* Part 14: interception\n\n* For agricultural crops apply interception concept of Von Hoyningen-Hune and Braden\n* Switch for rainfall interception method:\n  SWINTER = {{SWINTER}}      ! 0 = No interception calculated\n                             ! 1 = Agricultural crops (Von Hoyningen-Hune and Braden)\n                             ! 2 = Trees and forests (Gash)\n\n{{#SWITCH_SWINTER_OPTION_1}}\n* In case of agricultural crops (SWINTER=1) specify:\n  COFAB = {{COFAB}}          ! Interception coefficient, corresponding to maximum interception amount [0..1 cm, R]\n{{/SWITCH_SWINTER_OPTION_1}}\n{{#SWITCH_SWINTER_OPTION_2}}\n* In case of closed forest canopies (SWINTER=2), specify as function of time T [0..366 d, R]:\n* PFREE = Free throughfall coefficient [0..1 -, R]\n* PSTEM = Stem flow coefficient [0..1 -, R]\n* SCANOPY = Storage capacity of canopy [0..10 cm, R]\n* AVPREC = Average rainfall intensity [0..100 cm/d, R]\n* AVEVAP = Average evaporation intensity during rainfall from a wet canopy [0..10 cm/d, R]\n\n{{#TABLE_INTERTB}}\n  {{T}} {{PFREE}} {{PSTEM}} {{SCANOPY}} {{AVPREC}} {{AVEVAP}}\n{{/TABLE_INTERTB}}\n* End of table\n{{/SWITCH_SWINTER_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 15: CO2-impact\n*\n* CO2-impact:\n*    correction of photosynthesis as a function of atmospheric CO2 concentration (-)\n*    correction of radiation use efficiency as a function of atmospheric CO2 concentration (-)\n*    correction of transpiration as a function of atmospheric CO2 concentration (-)\n*    values for C3 crops (potatoes, grassland, soybean)\n*    actual CO2 concentration in atmosphere [ppm] in separate file atmospheric.co2\n**********************************************************************************\n\n* Switch for assimilation correction due to CO2 impact\n  SWCO2 = {{SWCO2}}          ! 0 = No CO2 assimilation correction\n                             ! 1 = CO2 assimilation correction\n\n{{#SWITCH_SWCO2_OPTION_1}}\n* if SWCO2=1, specify:\n  ATMOFIL = {{ATMOFIL}}      ! alternative filename for atmosphere.co2\n\n* Correction of photosynthesis as a function of atmospheric CO2 concentration\n  CO2AMAXTB =\n{{#TABLE_CO2AMAXTB}}\n  {{CO2}} {{AMAX}}\n{{/TABLE_CO2AMAXTB}}\n* End of table\n\n* Correction of radiation use efficiency as a function of atmospheric CO2 concentration:\n  CO2EFFTB =\n{{#TABLE_CO2EFFTB}}\n  {{CO2}} {{EFF}}\n{{/TABLE_CO2EFFTB}}\n* End of table\n\n* Correction of transpiration as a function of atmospheric CO2 concentration:\n  CO2TRATB =\n{{#TABLE_CO2TRATB}}\n  {{CO2}} {{TRA}}\n{{/TABLE_CO2TRATB}}\n* End of table\n\n{{/SWITCH_SWCO2_OPTION_1}}\n**********************************************************************************\n\n*** MANAGEMENT SECTION ***\n\n**********************************************************************************\n* Part 1: Nitrogen use\n\n* Data from: Linutl4,  http://models.pps.wur.nl/models\n*                      param values from MAG202.DATo\n*      reference:    Wolf, J. (2012). Users guide for LINTUL4 and LINTUL4V:\n*                    Simple generic model for simulation of crop growth under\n*                    potential, water limited and nitrogen limited conditions.\n*                    WUR-PPS report (Vol. 4).\n RDRNS = {{RDRNS}}   ! Maximum relative death rate of leaves due to N stress [0.0..1.0 /d, R]\n DVSNLT = {{DVSNLT}} ! Development stage above which no crop nitrogen uptake does occur [0.0..2.0 -, R]\n DVSNT = {{DVSNT}}   ! Development stage above which nitrogen translocation to storage organs does occur [0.0..2.0 -, R]\n FNTRT = {{FNTRT}}   ! Nitrogen translocation from roots as a fraction of total N amount translocated from leaves and stems [0.0..1.0 -, R]\n FRNX = {{FRNX}}     ! Optimal N concentration as fraction of maximum N concentration [0.0..1.0 -, R]\n LRNR = {{LRNR}}     ! Maximum N concentration in roots as fraction of maximum N concentration in leaves [0.0..1.0 -, R]\n LSNR = {{LSNR}}     ! Maximum N concentration in stems as fraction of maximum N concentration in leaves [0.0..1.0 -, R]\n NLAI = {{NLAI}}     ! Coefficient for the reduction due to N stress of the LAI increase (during juvenile phase) [0.0..2.0 -, R]\n NLUE = {{NLUE}}     ! Coefficient for the reduction of RUE due to Nitrogen stress [0.0..2.0 -, R]\n NMAXSO = {{NMAXSO}} ! Maximum N concentration in storage organs [0.0..1.0 kg kg-1, R]\n NPART = {{NPART}}   ! Coefficient for the effect of N stress on leaf biomass reduction [0.0..2.0 -, R]\n NSLA = {{NSLA}}     ! Coefficient for the effect of N stress on SLA reduction [0.0..2.0 -, R]\n RNFLV = {{RNFLV}}   ! Residual N fraction in leaves [0.0..1.0 kg kg-1, R]\n RNFST = {{RNFST}}   ! Residual N fraction in stems [0.0..1.0 kg kg-1, R]\n RNFRT = {{RNFRT}}   ! Residual N fraction in roots [0.0..1.0 kg kg-1, R]\n TCNT = {{TCNT}}     ! Time coefficient for N translocation to storage organs [0.0..100.0 d, R]\n NFIXF = {{NFIXF}}   ! Fraction of crop nitrogen uptake by biological fixation [0.0..1.0 -, R]\n\n* Maximum N concentration in leaves as function of development stage [0.0..1.0 kg kg-1, R]\n  NMXLV =\n{{#TABLE_NMXLV}}\n  {{DVS}} {{NMXLV}}\n{{/TABLE_NMXLV}}\nEnd of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Losses of organic matter\n\n* Harvest losses of organic matter\n  FRAHARLOSORM_LV = {{FRAHARLOSORM_LV}} ! Fraction harvest losses of organic matter from leaves [0.0..1.0 kg kg-1, R]\n  FRAHARLOSORM_ST = {{FRAHARLOSORM_ST}} ! Fraction harvest losses of organic matter from stems [0.0..1.0 kg kg-1, R]\n  FRAHARLOSORM_SO = {{FRAHARLOSORM_SO}} ! Fraction harvest losses of organic matter from storage organs [0.0..1.0 kg kg-1, R]\n\n* Losses of organic matter\n  FRADECEASEDLVTOSOIL = {{FRADECEASEDLVTOSOIL}} ! Fraction of deceased leaves incorporated in soil  [0..1.0 kg kg-1, R]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Management, other than irrigation, for instance pests,diseases or nutrients\n\n* Switch for calculation of potential yield\n  SWPOTRELMF = {{SWPOTRELMF}} ! 1 = Theoretical potential yield\n                             ! 2 = Attainable yield\n\n* In case of pest, diseases or nutrients, specify:\n  RELMF = {{RELMF}}          ! Relative management factor to reduce theoretical potential yield to attainable yield [0..1 -, R]\n\n**********************************************************************************\n\n*** IRRIGATION SCHEDULING SECTION ***\n\n**********************************************************************************\n* Part 1: General\n\n  SCHEDULE = {{SCHEDULE}}    ! Switch for application irrigation scheduling [Y=1, N=0]\n\n{{#SWITCH_SCHEDULE_OPTION_1}}\n* If SCHEDULE = 1, specify:\n  STARTIRR = {{STARTIRR}}    ! Specify day and month at which irrigation scheduling starts [dd mm]\n  ENDIRR = {{ENDIRR}}        ! Specify day and month at which irrigation scheduling stops [dd mm]\n  CIRRS = {{CIRRS}}          ! Solute concentration of irrigation water [0..100 mg/cm3, R]\n\n* Switch for type of irrigation method:\n  ISUAS = {{ISUAS}}          ! 0 = Sprinkling irrigation\n                             ! 1 = Surface irrigation\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Irrigation time criteria\n\n* Choose one of the following timing criteria options [1..6 -, I]:\n  TCS = {{TCS}}              ! 1 = Ratio actual/potential transpiration\n                             ! 2 = Depletion of Readily Available Water\n                             ! 3 = Depletion of Totally Available Water\n                             ! 4 = Depletion of absolute Water Amount\n                             ! 6 = Fixed weekly irrigation\n                             ! 7 = Pressure head\n                             ! 8 = Moisture content\n\n{{#SWITCH_TCS_OPTION_1}}\n* Ratio actual/potential transpiration (TCS = 1)\n* Specify mimimum of ratio actual/potential transpiration TREL [0..1 -, R] as function of crop development stage\n{{#TABLE_TC1TB}}\n  {{DVS_TC1}} {{TREL}}\n{{/TABLE_TC1TB}}\n* End of table\n{{/SWITCH_TCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_2}}\n* Depletion of Readily Available Water (TCS = 2)\n* Specify minimum fraction of readily available water RAW [0..1 -, R] as function of crop development stage\n{{#TABLE_TC2TB}}\n  {{DVS_TC2}} {{RAW}}\n{{/TABLE_TC2TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_2}}\n{{#SWITCH_TCS_OPTION_3}}\n* Depletion of Totally Available Water (TCS = 3)\n* Specify minimal fraction of totally available water TAW [0..1 -, R] as function of crop development stage\n{{#TABLE_TC3TB}}\n  {{DVS_TC3}} {{TAW}}\n{{/TABLE_TC3TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_3}}\n{{#SWITCH_TCS_OPTION_4}}\n* Depletion of absolute Water Amount (TCS = 4)\n* Specify maximum amount of water depleted below field capacity DWA [0..500 mm, R] as function of crop development stage\n{{#TABLE_TC4TB}}\n  {{DVS_TC4}} {{DWA}}\n{{/TABLE_TC4TB}}\n* End of table\n\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n{{/SWITCH_TCS_OPTION_4}}\n{{#SWITCH_TCS_OPTION_6}}\n* Fixed weekly irrigation (TCS = 6)\n* Only irrigate when soil water deficit in root zone is larger than threshold\n  IRGTHRESHOLD = {{IRGTHRESHOLD}} ! Threshold value for weekly irrigation  [0..20 mm, R]\n{{/SWITCH_TCS_OPTION_6}}\n{{#SWITCH_TCS_OPTION_7}}\n* Pressure head (TCS = 7)\n* Specify critical pressure head [-1d6..-100 cm, R] as function of crop development stage:\n{{#TABLE_TC7TB}}\n  {{DVS_TC7}} {{HCRI}}\n{{/TABLE_TC7TB}}\n* End of table\n\n  DCRIT =  {{DCRIT}}         ! Depth of the sensor [-100..0 cm, R]\n\n* In case TCS = 7, over-irrigation can be applied if the salinity concentration exceeds a threshold salinity\n* Switch for over-irrigation:\n  SWCIRRTHRES = {{SWCIRRTHRES}} ! 0 = No over-irrigation\n                             ! 1 = Apply over-irrigation\n\n{{#SWITCH_SWCIRRTHRES_OPTION_1}}\n* If SWCIRRTHRES = 1, specify:\n  CIRRTHRES = {{CIRRTHRES}}  ! Threshold salinity concentration above which over-irrigation occurs [0..100 mg/cm3, R]\n  PERIRRSURP = {{PERIRRSURP}} ! Over-irrigation of the usually scheduled irrigation depth [0..100 %, R]\n{{/SWITCH_SWCIRRTHRES_OPTION_1}}\n{{/SWITCH_TCS_OPTION_7}}\n{{#SWITCH_TCS_OPTION_8}}\n* Moisture content (TCS = 8)\n* Specify critical moisture content [0..1 cm3/cm3, R] as function of crop development stage\n{{#TABLE_TC8TB}}\n  {{DVS_TC8}} {{TCRI}}\n{{/TABLE_TC8TB}}\n* End of table\n\n  DCRIT =  {{DCRIT}}         ! Depth of the sensor [-100..0 cm, R]\n\n* In case TCS = 8, over-irrigation can be applied if the salinity concentration exceeds a threshold salinity\n* Switch for over-irrigation:\n  SWCIRRTHRES = {{SWCIRRTHRES}} ! 0 = No over-irrigation\n                                  ! 1 = Apply over-irrigation\n\n{{#SWITCH_SWCIRRTHRES_OPTION_1}}\n* If SWCIRRTHRES = 1, specify:\n  CIRRTHRES = {{CIRRTHRES}}  ! Threshold salinity concentration above which over-irrigation occurs [0..100 mg/cm3, R]\n  PERIRRSURP = {{PERIRRSURP}} ! Over-irrigation of the usually scheduled irrigation depth [0..100 %, R]\n{{/SWITCH_SWCIRRTHRES_OPTION_1}}\n{{/SWITCH_TCS_OPTION_8}}\n\n* Switch for minimum time interval between irrigation applications\n  TCSFIX = {{TCSFIX}}        ! 0 = No minimum time interval\n                             ! 1 = Define minimum time interval\n{{#SWITCH_TCSFIX_OPTION_1}}\n\n* If TCSFIX = 1, specify:\n  IRGDAYFIX = {{IRGDAYFIX}}  ! Minimum number of days between irrigation applications [1..366 d, I]\n{{/SWITCH_TCSFIX_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Irrigation depth criteria\n\n* Choose one of the following two options for irrigation depth:\n  DCS = {{DCS}}              ! 1 = Back to field capacity\n                             ! 2 = Fixed Irrigation Depth\n\n{{#SWITCH_DCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_1}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_1}}\n{{#SWITCH_TCS_OPTION_6}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_6}}\n{{#SWITCH_TCS_OPTION_7}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_7}}\n{{#SWITCH_TCS_OPTION_8}}\n* Specify pressure head at field capacity\n  PHFIELDCAPACITY = {{PHFIELDCAPACITY}} ! Soil water pressure head at field capacity [-1000..0 cm, R]\n\n{{/SWITCH_TCS_OPTION_8}}\n* Specify amount of under (-) or over (+) irrigation DI [-100..100 mm, R] as function of crop development stage [0..2, R]:\n{{#TABLE_DC1TB}}\n  {{DVS_DC1}} {{DI}}\n{{/TABLE_DC1TB}}\n* End of table\n\n  RAITHRESHOLD = {{RAITHRESHOLD}} ! When rainfall exceeds RAITHRESHOLD, DI is added to back to field capacity [0..1000 cm, R]\n  {{/SWITCH_DCS_OPTION_1}}\n{{#SWITCH_DCS_OPTION_2}}\n* Specify fixed irrigation depth FID [0..400 mm, R] as function of crop development stage [0..2, R]:\n{{#TABLE_DC2TB}}\n  {{DVS_DC2}} {{FID}}\n{{/TABLE_DC2TB}}\n* End of table\n{{/SWITCH_DCS_OPTION_2}}\n\n* Select minimum and maximum of irrigation depths:\n  DCSLIM = {{DCSLIM}}        ! Switch, limit range irrigation depth  [Y=1, N=0]\n\n{{#SWITCH_DCSLIM_OPTION_1}}\n* If DCSLIM = 1, specify:\n  IRGDEPMIN = {{IRGDEPMIN}}  ! Minimum irrigation depth [0..100 mm, I]\n  IRGDEPMAX = {{IRGDEPMAX}}  ! Maximum irrigation depth [IRGDEPMIN..1d7 mm, I]\n\n{{/SWITCH_DCSLIM_OPTION_1}}\n{{/SWITCH_SCHEDULE_OPTION_1}}\n**********************************************************************************\n\n* End of .crp file !\n</code></pre>", "boost": 0.5}, {"location": "wiki/input-files/crp-file/#grass", "title": "Grass", "text": "<p>To be added soon.</p>", "boost": 0.5}, {"location": "wiki/input-files/dra-file/", "title": ".DRA", "text": "<p>There are two types of drainage files: simple and extended. The templates can be found below.</p>", "boost": 0.5}, {"location": "wiki/input-files/dra-file/#simple_drainage", "title": "Simple drainage", "text": "DRFIL_BASIC.template <pre><code>**********************************************************************************\n* Filename: swap.dra\n* Contents: SWAP 4 - Input data for basic and extended drainage\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of dra-file\n*\n**********************************************************************************\n\n*** BASIC DRAINAGE SECTION ***\n\n**********************************************************************************\n* Part 0: General\n\n* Switch, method of lateral drainage calculation:\n  DRAMET = {{DRAMET}}        ! 1 = Use table of drainage flux - groundwater level relation\n                             ! 2 = Use drainage formula of Hooghoudt or Ernst\n                             ! 3 = Use drainage/infiltration resistance, multi-level if needed\n\n  SWDIVD = {{SWDIVD}}        ! Calculate vertical distribution of drainage flux in groundwater [Y=1, N=0]\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1, specify anisotropy factor COFANI (horizontal/vertical saturated hydraulic\n* conductivity) for each soil layer (maximum MAHO), [0.0001..1000 -, R]:\n  COFANI = {{COFANI}}\n{{/SWITCH_SWDIVD_OPTION_1}}\n\n* Switch to adjust upper boundary of model discharge layer\n  SWDISLAY = 0               ! switch to adjust discharge layer  [0,1,2, -, I]\n\n**********************************************************************************\n\n\n{{#SWITCH_DRAMET_OPTION_1}}\n**********************************************************************************\n* Part 1: Table of drainage flux - groundwater level relation (DRAMET = 1)\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1, specify the drain spacing:\n  LM1 = {{LM1}}              ! Drain spacing, [1..1000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n* Specify drainage flux QDRAIN [-100..1000 cm/d, R] as function of groundwater level GWL [-1000.0..10.0 cm, R]\n* negative GWL is below soil surface; start with highest groundwater level; maximum of 25 records:\n\n{{#TABLE_QDRNTB}}\n  {{QDRAIN}} {{GWL}}\n{{/TABLE_QDRNTB}}\n* End of table\n{{/SWITCH_DRAMET_OPTION_1}}\n{{#SWITCH_DRAMET_OPTION_2}}\n**********************************************************************************\n* Part 2: Drainage formula of Hooghoudt or Ernst (DRAMET = 2)\n*\n* Drain characteristics:\n  LM2    = {{LM2}}           ! Drain spacing, [1..1000 m, R]\n  SHAPE  = {{SHAPE_DRA}}     ! Shape factor to account for actual location between drain and water divide [0.0..1.0 -, R]\n  WETPER = {{WETPER}}        ! Wet perimeter of the drain, [0..1000 cm, R]\n  ZBOTDR = {{ZBOTDR}}        ! Level of drain bottom, [-1000..0 cm, R, neg. below soil surface]\n  ENTRES = {{ENTRES}}        ! Drain entry resistance, [0..1000 d, R]\n\n* Soil profile characteristics:\n\n* Position of drain:\n  IPOS   = {{IPOS}}          ! 1 = On top of an impervious layer in a homogeneous profile\n                             ! 2 = Above an impervious layer in a homogeneous profile\n                             ! 3 = At the interface of a fine upper and a coarse lower soil layer\n                             ! 4 = In the lower, more coarse soil layer\n                             ! 5 = In the upper, more fine soil layer\n\n* For all positions specify:\n  BASEGW = {{BASEGW}}        ! Level of impervious layer, [-1d4..0 cm, R]\n  KHTOP  = {{KHTOP}}         ! Horizontal hydraulic conductivity top layer, [0..1000 cm/d, R]\n\n{{#SWITCH_IPOS_OPTION_3}}\n* In addition, in case IPOS = 3\n  KHBOT  = {{KHBOT}}         ! horizontal hydraulic conductivity bottom layer, [0..1000 cm/d, R]\n  ZINTF  = {{ZINTF}}         ! Level of interface of fine and coarse soil layer, [-1d4..0 cm, R]\n{{/SWITCH_IPOS_OPTION_3}}\n{{#SWITCH_IPOS_OPTION_4}}\n* In addition, in case IPOS = 4\n  KHBOT  = {{KHBOT}}         ! horizontal hydraulic conductivity bottom layer, [0..1000 cm/d, R]\n  ZINTF  = {{ZINTF}}         ! Level of interface of fine and coarse soil layer, [-1d4..0 cm, R]\n  KVTOP  = {{KVTOP}}         ! Vertical hydraulic conductivity top layer, [0..1000 cm/d, R]\n  KVBOT  = {{KVBOT}}         ! Vertical hydraulic conductivity bottom layer, [0..1000 cm/d, R]\n{{/SWITCH_IPOS_OPTION_4}}\n{{#SWITCH_IPOS_OPTION_5}}\n* In addition, in case IPOS = 5\n  KHBOT  = {{KHBOT}}         ! horizontal hydraulic conductivity bottom layer, [0..1000 cm/d, R]\n  ZINTF  = {{ZINTF}}         ! Level of interface of fine and coarse soil layer, [-1d4..0 cm, R]\n  KVTOP  = {{KVTOP}}         ! Vertical hydraulic conductivity top layer, [0..1000 cm/d, R]\n  KVBOT  = {{KVBOT}}         ! Vertical hydraulic conductivity bottom layer, [0..1000 cm/d, R]\n  GEOFAC = {{GEOFAC}}        ! Geometry factor of Ernst,  [0..100 -, R]\n{{/SWITCH_IPOS_OPTION_5}}\n{{/SWITCH_DRAMET_OPTION_2}}\n{{#SWITCH_DRAMET_OPTION_3}}\n**********************************************************************************\n* METHOD 3 - Part 3: Drainage and infiltration resistance (DRAMET = 3)\n\n  NRLEVS = {{NRLEVS}}        ! Number of drainage levels, [1..5, I]\n\n* Option for interflow in highest drainage level (shallow system with short residence time)\n  SWINTFL = {{SWINTFL}}      ! Switch for interflow [0,1, I]\n\n{{#SWITCH_SWINTFL_OPTION_1}}\n* If SWINTFL = 1, specify:\n  COFINTFLB = {{COFINTFLB}}  ! Coefficient for interflow relation  [0.01..10.0 d, R]\n  EXPINTFLB = {{EXPINTFLB}}  ! Exponent for interflow relation  [0.1..1.0 -, R]\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* Switch to adjust the bottom of the model discharge layer in case of lateral interflow (SWDIVD=1).\n* In case of SWTOPNRSRF=1) then the bottom of the highest order drainage system (ZBORDR(NUMDRAIN)) represents the max depth of the interflow.\n SWTOPNRSRF = {{SWTOPNRSRF}} ! Switch to enable adjustment of model discharge layer [0,1, I]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n{{/SWITCH_SWINTFL_OPTION_1}}\n**********************************************************************************\n\n{{#SWITCH_NRLEVS_OPTION_1}}\n**********************************************************************************\n* Part 3a: Drainage to level 1\n\n  DRARES1 = {{DRARES1}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES1 = {{INFRES1}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO1 = {{SWALLO1}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L1 = {{L1}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR1 = {{ZBOTDR1}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP1 = {{SWDTYP1}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL1 [date] and channel water level LEVEL1 [-10000..200, cm, R]\n* LEVEL1 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB1}}\n  {{DATOWL1}} {{LEVEL1}}\n{{/TABLE_DATOWLTB1}}\n* End of table\n{{/SWITCH_NRLEVS_OPTION_1}}\n{{#SWITCH_NRLEVS_OPTION_2}}\n**********************************************************************************\n* Part 3a: Drainage to level 1\n\n  DRARES1 = {{DRARES1}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES1 = {{INFRES1}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO1 = {{SWALLO1}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L1 = {{L1}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR1 = {{ZBOTDR1}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP1 = {{SWDTYP1}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL1 [date] and channel water level LEVEL1 [-10000..200, cm, R]\n* LEVEL1 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB1}}\n  {{DATOWL1}} {{LEVEL1}}\n{{/TABLE_DATOWLTB1}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3b: Drainage to level 2\n\n  DRARES2 = {{DRARES2}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES2 = {{INFRES2}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO2 = {{SWALLO2}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L2 = {{L2}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR2 = {{ZBOTDR2}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP2 = {{SWDTYP2}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL2 [date] and channel water level LEVEL2 [-10000..200, cm, R]\n* LEVEL2 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB2}}\n  {{DATOWL2}} {{LEVEL2}}\n{{/TABLE_DATOWLTB2}}\n* End of table\n{{/SWITCH_NRLEVS_OPTION_2}}\n{{#SWITCH_NRLEVS_OPTION_3}}\n**********************************************************************************\n* Part 3a: Drainage to level 1\n\n  DRARES1 = {{DRARES1}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES1 = {{INFRES1}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO1 = {{SWALLO1}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L1 = {{L1}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR1 = {{ZBOTDR1}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP1 = {{SWDTYP1}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL1 [date] and channel water level LEVEL1 [-10000..200, cm, R]\n* LEVEL1 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB1}}\n  {{DATOWL1}} {{LEVEL1}}\n{{/TABLE_DATOWLTB1}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3b: Drainage to level 2\n\n  DRARES2 = {{DRARES2}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES2 = {{INFRES2}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO2 = {{SWALLO2}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L2 = {{L2}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR2 = {{ZBOTDR2}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP2 = {{SWDTYP2}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL2 [date] and channel water level LEVEL2 [-10000..200, cm, R]\n* LEVEL2 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB2}}\n  {{DATOWL2}} {{LEVEL2}}\n{{/TABLE_DATOWLTB2}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3c: Drainage to level 3\n\n  DRARES3 = {{DRARES3}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES3 = {{INFRES3}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO3 = {{SWALLO3}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L3 = {{L3}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR3 = {{ZBOTDR3}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP3 = {{SWDTYP3}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL3 [date] and channel water level LEVEL3 [-10000..200, cm, R]\n* LEVEL3 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB3}}\n  {{DATOWL3}} {{LEVEL3}}\n{{/TABLE_DATOWLTB3}}\n* End of table\n{{/SWITCH_NRLEVS_OPTION_3}}\n{{#SWITCH_NRLEVS_OPTION_4}}\n**********************************************************************************\n* Part 3a: Drainage to level 1\n\n  DRARES1 = {{DRARES1}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES1 = {{INFRES1}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO1 = {{SWALLO1}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L1 = {{L1}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR1 = {{ZBOTDR1}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP1 = {{SWDTYP1}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL1 [date] and channel water level LEVEL1 [-10000..200, cm, R]\n* LEVEL1 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB1}}\n  {{DATOWL1}} {{LEVEL1}}\n{{/TABLE_DATOWLTB1}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3b: Drainage to level 2\n\n  DRARES2 = {{DRARES2}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES2 = {{INFRES2}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO2 = {{SWALLO2}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L2 = {{L2}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR2 = {{ZBOTDR2}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP2 = {{SWDTYP2}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL2 [date] and channel water level LEVEL2 [-10000..200, cm, R]\n* LEVEL2 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB2}}\n  {{DATOWL2}} {{LEVEL2}}\n{{/TABLE_DATOWLTB2}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3c: Drainage to level 3\n\n  DRARES3 = {{DRARES3}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES3 = {{INFRES3}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO3 = {{SWALLO3}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L3 = {{L3}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR3 = {{ZBOTDR3}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP3 = {{SWDTYP3}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL3 [date] and channel water level LEVEL3 [-10000..200, cm, R]\n* LEVEL3 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB3}}\n  {{DATOWL3}} {{LEVEL3}}\n{{/TABLE_DATOWLTB3}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3d: Drainage to level 4\n\n  DRARES4 = {{DRARES4}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES4 = {{INFRES4}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO4 = {{SWALLO4}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L4 = {{L4}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR4 = {{ZBOTDR4}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP4 = {{SWDTYP4}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL4 [date] and channel water level LEVEL4 [-10000..200, cm, R]\n* LEVEL4 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB4}}\n  {{DATOWL4}} {{LEVEL4}}\n{{/TABLE_DATOWLTB4}}\n* End of table\n{{/SWITCH_NRLEVS_OPTION_4}}\n{{#SWITCH_NRLEVS_OPTION_5}}\n**********************************************************************************\n* Part 3a: Drainage to level 1\n\n  DRARES1 = {{DRARES1}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES1 = {{INFRES1}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO1 = {{SWALLO1}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L1 = {{L1}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR1 = {{ZBOTDR1}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP1 = {{SWDTYP1}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL1 [date] and channel water level LEVEL1 [-10000..200, cm, R]\n* LEVEL1 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB1}}\n  {{DATOWL1}} {{LEVEL1}}\n{{/TABLE_DATOWLTB1}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3b: Drainage to level 2\n\n  DRARES2 = {{DRARES2}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES2 = {{INFRES2}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO2 = {{SWALLO2}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L2 = {{L2}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR2 = {{ZBOTDR2}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP2 = {{SWDTYP2}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL2 [date] and channel water level LEVEL2 [-10000..200, cm, R]\n* LEVEL2 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB2}}\n  {{DATOWL2}} {{LEVEL2}}\n{{/TABLE_DATOWLTB2}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3c: Drainage to level 3\n\n  DRARES3 = {{DRARES3}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES3 = {{INFRES3}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO3 = {{SWALLO3}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L3 = {{L3}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR3 = {{ZBOTDR3}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP3 = {{SWDTYP3}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL3 [date] and channel water level LEVEL3 [-10000..200, cm, R]\n* LEVEL3 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB3}}\n  {{DATOWL3}} {{LEVEL3}}\n{{/TABLE_DATOWLTB3}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3d: Drainage to level 4\n\n  DRARES4 = {{DRARES4}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES4 = {{INFRES4}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO4 = {{SWALLO4}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L4 = {{L4}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR4 = {{ZBOTDR4}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP4 = {{SWDTYP4}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL4 [date] and channel water level LEVEL4 [-10000..200, cm, R]\n* LEVEL4 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB4}}\n  {{DATOWL4}} {{LEVEL4}}\n{{/TABLE_DATOWLTB4}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3e: Drainage to level 5\n\n  DRARES5 = {{DRARES5}}      ! Drainage resistance, [10..1d5 d, R]\n  INFRES5 = {{INFRES5}}      ! Infiltration resistance, [0..1d5 d, R]\n\n* Switch, for allowance drainage/infiltration:\n  SWALLO5 = {{SWALLO5}}      ! 1 = Drainage and infiltration are both allowed\n                             ! 2 = Drainage is not allowed\n                             ! 3 = Infiltration is not allowed\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1 (drainage flux vertically distributed), specify the drain spacing:\n  L5 = {{L5}}                ! Drain spacing, [1..100000 m, R]\n\n{{/SWITCH_SWDIVD_OPTION_1}}\n  ZBOTDR5 = {{ZBOTDR5}}      ! Level of drainage medium bottom, [-10000..0 cm, R]\n  SWDTYP5 = {{SWDTYP5}}      ! Type of drainage medium: 1 = drain tube, 2 = open channel\n\n* Specify date DATOWL5 [date] and channel water level LEVEL5 [-10000..200, cm, R]\n* LEVEL5 is negative if below soil surface; maximum MAOWL records:\n\n{{#TABLE_DATOWLTB5}}\n  {{DATOWL5}} {{LEVEL5}}\n{{/TABLE_DATOWLTB5}}\n* End of table\n{{/SWITCH_NRLEVS_OPTION_5}}\n{{/SWITCH_DRAMET_OPTION_3}}\n\n**********************************************************************************\n\n* End of .dra file!\n</code></pre>", "boost": 0.5}, {"location": "wiki/input-files/dra-file/#extended_drainage", "title": "Extended drainage", "text": "DRFIL_EXTENDED.template <pre><code>**********************************************************************************\n* Filename: swap.dra\n* Contents: SWAP 4 - Input data for basic and extended drainage\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of dra-file\n*\n**********************************************************************************\n\n*** EXTENDED DRAINAGE SECTION ***\n\n**********************************************************************************\n* Part 0: General\n\n  SWDIVD = {{SWDIVD}}        ! Calculate vertical distribution of drainage flux in groundwater [Y=1, N=0]\n\n{{#SWITCH_SWDIVD_OPTION_1}}\n* If SWDIVD = 1, specify anisotropy factor COFANI (horizontal/vertical saturated hydraulic\n* conductivity) for each soil layer (maximum MAHO), [0.0001..1000 -, R]:\n  COFANI = {{COFANI}}\n{{/SWITCH_SWDIVD_OPTION_1}}\n\n* Switch to adjust upper boundary of model discharge layer\n  SWDISLAY = 0               ! switch to adjust discharge layer  [0,1,2, -, I]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 0: Reference level\n\n  ALTCU = 0.0                ! Altitude of the control unit relative to reference level [-300000..300000 cm, R]\n\n**********************************************************************************\n* Part 1: drainage characteristics\n\n  NRSRF  = {{NRSRF}}         ! number of subsurface drainage levels [1..5, I]\n\n* Table with physical characteristics of each subsurface drainage level:\n* Variables RENTRY, REXIT, WIDTHR and TALUDR must have realistic values when the type of drainage medium is open\n* LEVEL   = Drainage level number [1..NRSRF, I]\n* SWDTYP  = Type of drainage medium [open=0, closed=1]\n* L       = Spacing between channels/drains [1..100000 m, R]\n* ZBOTDRE = Altitude of bottom of channel or drain [ALTCU-1000..ALTCU-0.01 cm,R]\n* GWLINF  = Groundwater level for maximum infiltration [-1000..0 cm rel. to soil surf., R]\n* RDRAIN  = Drainage resistance [1..100000 d, R]\n* RINFI   = Infiltration resistance  [1..100000 d, R]\n* RENTRY  = Entry resistance  [0..100 d, R]\n* REXIT   = Exit resistance   [0..100 d, R]\n* WIDTHR  = Bottom width of channel [0..10000 cm, R]\n* TALUDR  = Side-slope (dh/dw) of channel [0.01..5, R]\n\n{{#TABLE_DRNTB}}\n  {{LEV}} {{SWDTYP}} {{L}} {{ZBOTDRE}} {{GWLINF}} {{RDRAIN}} {{RINFI}} {{RENTRY}} {{REXIT}} {{WIDTHR}} {{TALUDR}}\n{{/TABLE_DRNTB}}\n* End of table\n\n* Switch to introduce rapid subsurface drainage [0..2, I]\n  SWNRSRF = {{SWNRSRF}}      ! 0 = No rapid drainage\n                             ! 1 = Rapid drainage in the highest drainage system (implies adjustment of RDRAIN of highest drainage system)\n                             ! 2 = Rapid drainage as interflow according to a power relation (implies adjustment of RDRAIN of highest drainage system)\n\n{{#SWITCH_SWNRSRF_OPTION_1}}\n* In case of SWRNSRF=1, specify rapid drainage\n  RSURFDEEP    = {{RSURFDEEP}} ! Maximum resistance of rapid subsurface drainage [0.001..1000.0 d, R]\n  RSURFSHALLOW = {{RSURFSHALLOW}} ! Minimum resistance of rapid subsurface drainage [0.001..1000.0 d, R]\n{{/SWITCH_SWNRSRF_OPTION_1}}\n{{#SWITCH_SWNRSRF_OPTION_2}}\n* In case of SWRNSRF=2, specify coefficients of power function\n COFINTFL = {{COFINTFL}}     ! Coefficient of interflow relation [0.01..10.0 d-1, R]\n EXPINTFL = {{EXPINTFL}}     ! Exponent of interflow relation [0.1...1.0 -, R]\n{{/SWITCH_SWNRSRF_OPTION_2}}\n\n* Switch to adjust the bottom of the model discharge layer in case of lateral (SWDIVD=1) interflow or rapid drainage (SWNRSRF=1 or SWNRSRF=2).\n* In case of SWTOPNRSRF=1) then the bottom of the highest order drainage system (ZBORDR(NUMDRAIN)) represents the max depth of the interflow.\n SWTOPNRSRF = {{SWTOPNRSRF}} ! Switch to enable adjustment of model discharge layer [0,1, I]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Specification and control of surface water system\n\n* Switch for interaction with surface water system [1..3, I]\n  SWSRF = {{SWSRF}}          ! 1 = No interaction with surface water system\n                             ! 2 = Surface water system is simulated with no separate primary system\n                             ! 3 = Surface water system is simulated with separate primary system\n\n{{#SWITCH_SWSRF_OPTION_2}}\n* If SWSRF=2, specify option for surface water level of secondary system [1..2, I]\n  SWSEC = {{SWSEC}}          ! 1 = Surface water level is input\n                             ! 2 = Surface water level is simulated\n\n\n{{#SWITCH_SWSEC_OPTION_1}}\n* Water level in secondary water course [ALTCU-1000..ALTCU-0.01 cm, R] as function of DATE2 [dd-mmm-yyyy]\n{{#TABLE_SECWATLVL}}\n  {{DATE2}} {{WLS}}\n{{/TABLE_SECWATLVL}}\n* End of table\n{{/SWITCH_SWSEC_OPTION_1}}\n{{#SWITCH_SWSEC_OPTION_2}}\n* Miscellaneous parameters\n  WLACT  = {{WLACT}}         ! Initial surface water level [ALTCU-1000..ALTCU cm,R]\n  OSSWLM = {{OSSWLM}}        ! Criterium for warning about oscillation [0..10 cm, R]\n\n* Management of surface water levels\n  NMPER  =  {{NMPER}}        ! Number of management periods [1..3660, I]\n\n* For each management period specify:\n* IMPER  = Index of management period [1..NMPER, I]\n* IMPEND = Date that period ends [dd-mm-yyyy]\n* SWMAN  = Type of water management 1 = fixed weir crest (see part 4c and 4d) 2 = automatic weir (see part 4e) [1..2, I]\n* WSCAP  = Surface water supply capacity [0..100 cm/d, R]\n* WLDIP  = Allowed dip of surface water level before starting supply [0..100 cm, R]\n* INTWL  = Length of water-level adjustment period (SWMAN=2 only) [1..31 d, I]\n\n{{#TABLE_MANSECWATLVL}}\n  {{IMPER_4B}} {{IMPEND}} {{SWMAN}} {{WSCAP}} {{WLDIP}} {{INTWL}}\n{{/TABLE_MANSECWATLVL}}\n* End of table\n\n* Switch for type of discharge relationship [1..2, I]\n  SWQHR = {{SWQHR}}          ! 1 = Exponential relationship\n                             ! 2 = Table\n\n{{#SWITCH_SWQHR_OPTION_1}}\n* If SWQHR=1, specify:\n  SOFCU = {{SOFCU}}          ! Size of the control unit [0.1..100000.0 ha, R]\n\n* If SWQHR=1, specify exponential discharge relation for all periods:\n* IMPER  = Index of management period [1..NMPER, I]\n* HBWEIR = Weir crest; levels above soil surface are allowed, but simulated surface water levels should remain below 100 cm above soil surface;\n*          the crest must be higher than the deepest channel bottom of the secondary system (ZBOTDR(1 or 2), [ALTCU-ZBOTDR..ALTCU+100 cm,R].\n*          If SWMAN=2, HBWEIR represents the lowest possible weir position.\n* ALPHAW = Alpha-coefficient of discharge formula [0.1..50.0, R]\n* BETAW  = Beta-coefficient of discharge formula [0.5..3.0, R]\n\n{{#TABLE_QWEIR}}\n  {{IMPER_4C}} {{HBWEIR}} {{ALPHAW}} {{BETAW}}\n{{/TABLE_QWEIR}}\n* End of table\n{{/SWITCH_SWQHR_OPTION_1}}\n{{#SWITCH_SWQHR_OPTION_2}}\n* If SWQHR=2, specify table discharge relation:\n* IMPER  = Index of management period [1..NMPER, I]\n* IMPTAB = Index per management period [1..10, I]\n* HTAB   = Surface water level [ALTCU-1000..ALTCU+100 cm, R] (first value for each period = ALTCU + 100 cm)\n* QTAB   = Discharge [0..500 cm/d, R] (should go down to a value of zero at a level that is higher than the deepest channel bottom of secondary surface water system)\n\n{{#TABLE_QWEIRTB}}\n  {{IMPER_4D}} {{IMPTAB}} {{HTAB}} {{QTAB}}\n{{/TABLE_QWEIRTB}}\n* End of table\n{{/SWITCH_SWQHR_OPTION_2}}\n{{/SWITCH_SWSEC_OPTION_2}}\n{{/SWITCH_SWSRF_OPTION_2}}\n{{#SWITCH_SWSRF_OPTION_3}}\n* If SWSRF=3, specify water levels in the primary system [max. = 52]\n* No levels above soil surface for primary system\n\n* Water level in primary water course [ALTCU-1000..ALTCU-0.01 cm, R] as function of DATE1 [date]\n{{#TABLE_PRIWATLVL}}\n  {{DATE1}} {{WLP}}\n{{/TABLE_PRIWATLVL}}\n* End of table\n\n* If SWSRF=3, specify option for surface water level of secondary system [1..2, I]\n  SWSEC = {{SWSEC}}          ! 1 = Surface water level is input\n                             ! 2 = Surface water level is simulated\n\n{{#SWITCH_SWSEC_OPTION_1}}\n* Water level in secondary water course [ALTCU-1000..ALTCU-0.01 cm, R] as function of DATE2 [dd-mmm-yyyy]\n{{#TABLE_SECWATLVL}}\n  {{DATE2}} {{WLS}}\n{{/TABLE_SECWATLVL}}\n* End of table\n{{/SWITCH_SWSEC_OPTION_1}}\n{{#SWITCH_SWSEC_OPTION_2}}\n* Miscellaneous parameters\n  WLACT  = {{WLACT}}         ! Initial surface water level [ALTCU-1000..ALTCU cm,R]\n  OSSWLM = {{OSSWLM}}        ! Criterium for warning about oscillation [0..10 cm, R]\n\n* Management of surface water levels\n  NMPER  =  {{NMPER}}        ! Number of management periods [1..3660, I]\n\n* For each management period specify:\n* IMPER  = Index of management period [1..NMPER, I]\n* IMPEND = Date that period ends [dd-mm-yyyy]\n* SWMAN  = Type of water management 1 = fixed weir crest (see part 4c and 4d) 2 = automatic weir (see part 4e) [1..2, I]\n* WSCAP  = Surface water supply capacity [0..100 cm/d, R]\n* WLDIP  = Allowed dip of surface water level before starting supply [0..100 cm, R]\n* INTWL  = Length of water-level adjustment period (SWMAN=2 only) [1..31 d, I]\n\n{{#TABLE_MANSECWATLVL}}\n  {{IMPER_4B}} {{IMPEND}} {{SWMAN}} {{WSCAP}} {{WLDIP}} {{INTWL}}\n{{/TABLE_MANSECWATLVL}}\n* End of table\n\n* Switch for type of discharge relationship [1..2, I]\n  SWQHR = {{SWQHR}}          ! 1 = Exponential relationship\n                             ! 2 = Table\n\n{{#SWITCH_SWQHR_OPTION_1}}\n* If SWQHR=1, specify:\n  SOFCU = {{SOFCU}}          ! Size of the control unit [0.1..100000.0 ha, R]\n\n* If SWQHR=1, specify exponential discharge relation for all periods:\n* IMPER  = Index of management period [1..NMPER, I]\n* HBWEIR = Weir crest; levels above soil surface are allowed, but simulated surface water levels should remain below 100 cm above soil surface;\n*          the crest must be higher than the deepest channel bottom of the secondary system (ZBOTDR(1 or 2), [ALTCU-ZBOTDR..ALTCU+100 cm,R].\n*          If SWMAN=2, HBWEIR represents the lowest possible weir position.\n* ALPHAW = Alpha-coefficient of discharge formula [0.1..50.0, R]\n* BETAW  = Beta-coefficient of discharge formula [0.5..3.0, R]\n\n{{#TABLE_QWEIR}}\n  {{IMPER_4C}} {{HBWEIR}} {{ALPHAW}} {{BETAW}}\n{{/TABLE_QWEIR}}\n* End of table\n{{/SWITCH_SWQHR_OPTION_1}}\n{{#SWITCH_SWQHR_OPTION_2}}\n* If SWQHR=2, specify table discharge relation:\n* IMPER  = Index of management period [1..NMPER, I]\n* IMPTAB = Index per management period [1..10, I]\n* HTAB   = Surface water level [ALTCU-1000..ALTCU+100 cm, R] (first value for each period = ALTCU + 100 cm)\n* QTAB   = Discharge [0..500 cm/d, R] (should go down to a value of zero at a level that is higher than the deepest channel bottom of secondary surface water system)\n\n{{#TABLE_QWEIRTB}}\n  {{IMPER_4D}} {{IMPTAB}} {{HTAB}} {{QTAB}}\n{{/TABLE_QWEIRTB}}\n* End of table\n{{/SWITCH_SWQHR_OPTION_2}}\n{{/SWITCH_SWSEC_OPTION_2}}\n{{/SWITCH_SWSRF_OPTION_3}}\n{{/SWITCH_SWDRA_OPTION_2}}\n\n**********************************************************************************\n\n* End of .dra file!\n</code></pre>", "boost": 0.5}, {"location": "wiki/input-files/irg-file/", "title": ".IRG", "text": ""}, {"location": "wiki/input-files/met-file/", "title": ".MET", "text": "<p>Originally, the meteorological data was passed to SWAP in files that had extensions equal to the last three digits of the year. However, the option to use one file (csv-like) with .met extension seems to be the best choice for simplicity. Therefore, for now, pySWAP only allows to use the .met file.</p> <p>Depending on the selected option, the .met file will have a different set of headers.</p>", "boost": 0.5}, {"location": "wiki/input-files/swp-file/", "title": ".SWP", "text": "<p>The <code>.swp</code> file is the main configuration file for the SWAP model. It contains essential settings for the simulation and specifies which output information should be returned. In pySWAP, this file is managed by the <code>Model</code> class. When you call the <code>Model.run('./')</code> method, a <code>.swp</code> file is automatically created in a temporary directory along with all other input files, so you don't have to worry about handling it manually.</p> SWAP.template <pre><code>**********************************************************************************\n* Filename: swap.swp\n* Contents: SWAP 4 - Main input data\n**********************************************************************************\n* Comment area:\n* Testbank of SWAP: build with template of swp-file\n*\n**********************************************************************************\n\n*   The main input file .swp contains the following sections:\n*           - General section\n*           - Meteorology section\n*           - Crop section\n*           - Soil water section\n*           - Lateral drainage section\n*           - Bottom boundary section\n*           - Heat flow section\n*           - Solute transport section\n\n**********************************************************************************\n\n*** GENERAL SECTION ***\n\n**********************************************************************************\n* Part 1: Environment\n\n  PROJECT   = {{PROJECT}}    ! Project description [A80]\n  PATHWORK  = '.\\'           ! Path to work folder [A80]\n  PATHATM   = {{PATHATM}}    ! Path to folder with weather files [A80]\n  PATHCROP  = {{PATHCROP}}   ! Path to folder with crop files [A80]\n  PATHDRAIN = '.\\'           ! Path to folder with drainage files [A80]\n\n* Switch, display progression of simulation run to screen:\n  SWSCRE    = 0              ! 0 = no display to screen\n                             ! 1 = display water balance components\n                             ! 2 = display daynumber\n\n* Switch for printing errors to screen:\n  SWERROR   = 0              ! 0 = no display to screen\n                             ! 1 = display error to screen\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Simulation period\n\n  TSTART  = {{TSTART}}       ! Start date of simulation run, give day-month-year [date]\n  TEND    = {{TEND}}         ! End date of simulation run, give day-month-year [date]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Output dates\n\n* Number of output times during a day\n  NPRINTDAY = {{NPRINTDAY}}  ! Number of output times during a day [1..1440, I]\n\n* Specify dates for output of state variables and fluxes\n  SWMONTH = {{SWMONTH}}      ! Switch, output each month [Y=1, N=0]\n\n{{#SWITCH_SWMONTH_OPTION_0}}\n* If SWMONTH = 0, choose output interval and/or specific dates\n  PERIOD = {{PERIOD}}        ! Fixed output interval, ignore = 0 [0..366, I]\n  SWRES  = {{SWRES}}         ! Switch, reset output interval counter each year [Y=1, N=0]\n  SWODAT = {{SWODAT}}        ! Switch, extra output dates are given in table below [Y=1, N=0]\n\n{{#SWITCH_SWODAT_OPTION_1}}\n* If SWODAT = 1, list specific dates [date], maximum MAOUT dates:\n  OUTDATINT =\n  2002-01-31\n  2004-12-31\n* End of table\n\n{{/SWITCH_SWODAT_OPTION_1}}\n{{/SWITCH_SWMONTH_OPTION_0}}\n* Output times for overall water and solute balances in *.BAL and *.BLC file: choose output\n* at a fixed date each year or at different dates:\n  SWYRVAR = {{SWYRVAR}}      ! 0 = each year output at the same date\n                             ! 1 = output at different dates\n\n{{#SWITCH_SWYRVAR_OPTION_0}}\n* If SWYRVAR = 0 specify fixed date:\n  DATEFIX = 31 12            ! Specify day and month for output of yearly balances [dd mm]\n\n{{/SWITCH_SWYRVAR_OPTION_0}}\n{{#SWITCH_SWYRVAR_OPTION_1}}\n* If SWYRVAR = 1 specify all output dates [date], maximum MAOUT dates:\n  OUTDAT =\n  2003-12-31\n  2004-12-31\n* End of table\n\n{{/SWITCH_SWYRVAR_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 4: Output files\n\n* General information\n  OUTFIL   = {{OUTFIL}}      ! Generic file name of output files, [A16]\n  SWHEADER = 0               ! Print header at the start of each balance period [Y=1, N=0]\n\n* Optional files\n  SWWBA  = 0                 ! Switch, output daily water balance [Y=1, N=0]\n  SWEND  = 0                 ! Switch, output end-conditions [Y=1, N=0]\n  SWVAP  = 0                 ! Switch, output soil profiles of moisture, solute and temperature [Y=1, N=0]\n  SWBAL  = 0                 ! Switch, output file with yearly water balance [Y=1, N=0]\n  SWBLC  = 0                 ! Switch, output file with detailed yearly water balance [Y=1, N=0]\n  SWSBA  = 0                 ! Switch, output file of daily solute balance [Y=1, N=0]\n  SWATE  = 0                 ! Switch, output file with soil temperature profiles [Y=1, N=0]\n  SWBMA  = 0                 ! Switch, output file with water fluxes, only for macropore flow [Y=1, N=0]\n  SWDRF  = 0                 ! Switch, output of drainage fluxes, only for extended drainage [Y=1, N=0]\n  SWSWB  = 0                 ! Switch, output surface water reservoir, only for extended drainage [Y=1, N=0]\n  SWINI  = 0                 ! Switch, output of initial SoilPhysParam and HeatParam [Y=1, N=0]\n  SWINC  = 0                 ! Switch, output of water balance increments [Y=1, N=0]\n  SWCRP  = 0                 ! Switch, output of simple or detailed crop growth model [Y=1, N=0]\n  SWSTR  = 0                 ! Switch, output of stress values for wetness, drought, salinity and frost [Y=1, N=0]\n  SWIRG  = 0                 ! Switch, output of irrigation gifts [Y=1, N=0]\n\n* Specific CSV output file? (default: no)\n  SWCSV  = {{SWCSV}}         ! Switch, output of variables to be specified [Y=1, N=0]\n\n{{#SWITCH_SWCSV_OPTION_1}}\n  INLIST_CSV = {{INLIST_CSV}}\n\n{{/SWITCH_SWCSV_OPTION_1}}\n* Specific CSV output file? (default: no)\n  SWCSV_TZ  = {{SWCSV_TZ}}   ! Switch, output of variables to be specified [Y=1, N=0]\n\n{{#SWITCH_SWCSV_TZ_OPTION_1}}\n  INLIST_CSV_TZ = {{INLIST_CSV_TZ}}\n\n{{/SWITCH_SWCSV_TZ_OPTION_1}}\n* Optional output files for water quality models or other specific use\n\n* Switch, output file with formatted hydrological data:\n  SWAFO  = {{SWAFO}}         ! 0 = no output\n                             ! 1 = output to a file named *.AFO\n                             ! 2 = output to a file named *.BFO\n\n* Switch, output file with unformatted hydrological data:\n  SWAUN  = {{SWAUN}}         ! 0 = no output\n                             ! 1 = output to a file named *.AUN\n                             ! 2 = output to a file named *.BUN\n\n{{#SWITCH_SWAFO_OPTION_1}}\n* if SWAFO = 1 or 2 or if SWAUN = 1 or 2 then specify CRITDEVMASBAL and SWDISCRVERT\n* Maximum deviation in water balance; in case of larger deviation, an error file is created (*.DWB.CSV)\n  CRITDEVMASBAL = {{CRITDEVMASBAL}} ! Critical Deviation in water balance during PERIOD [0.0..1.0 cm, R]\n\n* Switch to convert vertical discretization\n  SWDISCRVERT = {{SWDISCRVERT}} ! 0: no conversion\n                             ! 1: convert vertical discretization\n\n{{#SWITCH_SWDISCRVERT_OPTION_1}}\n* Only If SWDISCRVERT = 1 then NUMNODNEW and DZNEW are required\n  NUMNODNEW = 22             ! New number of nodes [1...macp,I,-]\n*                            ! (boundaries of soil layers may not change, which implies\n*                            !  that the sum of thicknesses within a soil layer must be\n*                            !  equal to the thickness of the soil layer.\n*                            !  See also: SoilWaterSection, Part4: Vertical discretization of soil profile)\n\n* Thickness of compartments [1.0d-6...5.0d2, cm, R]\n DZNEW =\n   5.0   5.0   5.0   5.0   5.0   5.0  10.0  10.0  10.0  10.0  10.0  10.0  10.0  20.0  20.0  20.0  20.0  20.0  20.0  40.0  40.0  40.0\n\n{{/SWITCH_SWDISCRVERT_OPTION_1}}\n{{/SWITCH_SWAFO_OPTION_1}}\n{{#SWITCH_SWAFO_OPTION_2}}\n* if SWAFO = 1 or 2 or if SWAUN = 1 or 2 then specify CRITDEVMASBAL and SWDISCRVERT\n* Maximum deviation in water balance; in case of larger deviation, an error file is created (*.DWB.CSV)\n  CRITDEVMASBAL = {{CRITDEVMASBAL}} ! Critical Deviation in water balance during PERIOD [0.0..1.0 cm, R]\n\n* Switch to convert vertical discretization\n  SWDISCRVERT = {{SWDISCRVERT}} ! 0: no conversion\n                             ! 1: convert vertical discretization\n\n{{#SWITCH_SWDISCRVERT_OPTION_1}}\n* Only If SWDISCRVERT = 1 then NUMNODNEW and DZNEW are required\n  NUMNODNEW = 22             ! New number of nodes [1...macp,I,-]\n*                            ! (boundaries of soil layers may not change, which implies\n*                            !  that the sum of thicknesses within a soil layer must be\n*                            !  equal to the thickness of the soil layer.\n*                            !  See also: SoilWaterSection, Part4: Vertical discretization of soil profile)\n\n* Thickness of compartments [1.0d-6...5.0d2, cm, R]\n DZNEW =\n   5.0   5.0   5.0   5.0   5.0   5.0  10.0  10.0  10.0  10.0  10.0  10.0  10.0  20.0  20.0  20.0  20.0  20.0  20.0  40.0  40.0  40.0\n\n{{/SWITCH_SWDISCRVERT_OPTION_1}}\n{{/SWITCH_SWAFO_OPTION_2}}\n{{#SWITCH_SWAUN_OPTION_1}}\n* if SWAFO = 1 or 2 or if SWAUN = 1 or 2 then specify CRITDEVMASBAL and SWDISCRVERT\n* Maximum deviation in water balance; in case of larger deviation, an error file is created (*.DWB.CSV)\n  CRITDEVMASBAL = {{CRITDEVMASBAL}} ! Critical Deviation in water balance during PERIOD [0.0..1.0 cm, R]\n\n* Switch to convert vertical discretization\n  SWDISCRVERT = {{SWDISCRVERT}} ! 0: no conversion\n                             ! 1: convert vertical discretization\n\n{{#SWITCH_SWDISCRVERT_OPTION_1}}\n* Only If SWDISCRVERT = 1 then NUMNODNEW and DZNEW are required\n  NUMNODNEW = 22             ! New number of nodes [1...macp,I,-]\n*                            ! (boundaries of soil layers may not change, which implies\n*                            !  that the sum of thicknesses within a soil layer must be\n*                            !  equal to the thickness of the soil layer.\n*                            !  See also: SoilWaterSection, Part4: Vertical discretization of soil profile)\n\n* Thickness of compartments [1.0d-6...5.0d2, cm, R]\n DZNEW =\n   5.0   5.0   5.0   5.0   5.0   5.0  10.0  10.0  10.0  10.0  10.0  10.0  10.0  20.0  20.0  20.0  20.0  20.0  20.0  40.0  40.0  40.0\n\n{{/SWITCH_SWDISCRVERT_OPTION_1}}\n{{/SWITCH_SWAUN_OPTION_1}}\n{{#SWITCH_SWAUN_OPTION_2}}\n* if SWAFO = 1 or 2 or if SWAUN = 1 or 2 then specify CRITDEVMASBAL and SWDISCRVERT\n* Maximum deviation in water balance; in case of larger deviation, an error file is created (*.DWB.CSV)\n  CRITDEVMASBAL = {{CRITDEVMASBAL}} ! Critical Deviation in water balance during PERIOD [0.0..1.0 cm, R]\n\n* Switch to convert vertical discretization\n  SWDISCRVERT = {{SWDISCRVERT}} ! 0: no conversion\n                             ! 1: convert vertical discretization\n\n{{#SWITCH_SWDISCRVERT_OPTION_1}}\n* Only If SWDISCRVERT = 1 then NUMNODNEW and DZNEW are required\n  NUMNODNEW = 22             ! New number of nodes [1...macp,I,-]\n*                            ! (boundaries of soil layers may not change, which implies\n*                            !  that the sum of thicknesses within a soil layer must be\n*                            !  equal to the thickness of the soil layer.\n*                            !  See also: SoilWaterSection, Part4: Vertical discretization of soil profile)\n\n* Thickness of compartments [1.0d-6...5.0d2, cm, R]\n DZNEW =\n   5.0   5.0   5.0   5.0   5.0   5.0  10.0  10.0  10.0  10.0  10.0  10.0  10.0  20.0  20.0  20.0  20.0  20.0  20.0  40.0  40.0  40.0\n\n{{/SWITCH_SWDISCRVERT_OPTION_1}}\n{{/SWITCH_SWAUN_OPTION_2}}\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** METEOROLOGY SECTION ***\n\n**********************************************************************************\n* General data\n\n* File name\n  METFIL = {{METFIL}}        ! File name of meteorological data without extension .YYY, [A200]\n                             ! Extension is equal to last 3 digits of year, e.g. 003 denotes year 2003\n\n* Details of meteo station:\n  LAT = {{LAT}}              ! Latitude of meteo station [-90..90 degrees, R, North = +]\n\n* Type of weather data for potential evapotranspiration\n  SWETR = {{SWETR}}          ! 0 = Use basic weather data and apply Penman-Monteith equation\n                             ! 1 = Use reference evapotranspiration data in combination with crop factors\n\n{{#SWITCH_SWETR_OPTION_0}}\n* In case of Penman-Monteith (SWETR = 0), specify:\n  ALT       = {{ALT}}        ! Altitude of meteo station [-400..3000 m, R]\n  ALTW      = {{ALTW}}       ! Height of wind speed measurement above soil surface (10 m is default) [0..99 m, R]\n  ANGSTROMA = {{ANGSTROMA}}  ! Fraction of extraterrestrial radiation reaching the earth on overcast days [0..1 -, R]\n  ANGSTROMB = {{ANGSTROMB}}  ! Additional fraction of extraterrestrial radiation reaching the earth on clear days [0..1 -, R]\n\n* Switch for distribution of E and T:\n  SWDIVIDE  = {{SWDIVIDE}}   ! 0 = Based on crop and soil factors\n                             ! 1 = Based on direct application of Penman-Monteith\n\n* In case of SWETR = 0, specify time interval of evapotranspiration and rainfall weather data\n  SWMETDETAIL = {{SWMETDETAIL}} ! 0 = time interval is equal to one day\n                             ! 1 = time interval is less than one day\n\n{{#SWITCH_SWMETDETAIL_OPTION_0}}\n* In case of daily meteorological weather records (SWMETDETAIL = 0):\n  SWETSINE = {{SWETSINE}}    ! Switch, distribute daily Tp and Ep according to sinus wave [Y=1, N=0]\n\n* Switch for use of actual rainfall intensity (only if SWMETDETAIL = 0):\n  SWRAIN = {{SWRAIN}}        ! 0 = Use daily rainfall amounts\n                             ! 1 = Use daily rainfall amounts + mean intensity\n                             ! 2 = Use daily rainfall amounts + duration\n                             ! 3 = Use detailed rainfall records (dt &lt; 1 day), as supplied in separate file\n\n{{#SWITCH_SWRAIN_OPTION_1}}\n* If SWRAIN = 1, then specify mean rainfall intensity RAINFLUX [0.d0..1000.d0 mm/d, R]\n* as function of time TIME [0..366 d, R], maximum 30 records\n\n{{#TABLE_RAINFLUXTB}}\n  {{TIME}} {{RAINFLUX}}\n{{/TABLE_RAINFLUXTB}}\n* End of table\n{{/SWITCH_SWRAIN_OPTION_1}}\n{{#SWITCH_SWRAIN_OPTION_3}}\n* If SWRAIN = 3, then specify file name of file with detailed rainfall data\n  RAINFIL = {{RAINFIL}}      ! File name of detailed rainfall data without extension .YYY, [A200]\n                             ! Extension is equal to last 3 digits of year, e.g. 003 denotes year 2003\n{{/SWITCH_SWRAIN_OPTION_3}}\n{{/SWITCH_SWMETDETAIL_OPTION_0}}\n{{#SWITCH_SWMETDETAIL_OPTION_1}}\n* In case of detailed meteorological weather records (SWMETDETAIL = 1), specify:\n  NMETDETAIL = 24            ! Number of weather data records each day [1..96 -, I]\n{{/SWITCH_SWMETDETAIL_OPTION_1}}\n{{/SWITCH_SWETR_OPTION_0}}\n{{#SWITCH_SWETR_OPTION_1}}\n* In case of daily meteorological weather records (only if SWETR = 1):\n  SWETSINE = {{SWETSINE}}    ! Switch, distribute daily Tp and Ep according to sinus wave [Y=1, N=0]\n\n* Switch for use of actual rainfall intensity (only if SWETR = 1):\n  SWRAIN = {{SWRAIN}}        ! 0 = Use daily rainfall amounts\n                             ! 1 = Use daily rainfall amounts + mean intensity\n                             ! 2 = Use daily rainfall amounts + duration\n                             ! 3 = Use detailed rainfall records (dt &lt; 1 day), as supplied in separate file\n\n{{#SWITCH_SWRAIN_OPTION_1}}\n* If SWRAIN = 1, then specify mean rainfall intensity RAINFLUX [0.d0..1000.d0 mm/d, R]\n* as function of time TIME [0..366 d, R], maximum 30 records\n\n{{#TABLE_RAINFLUXTB}}\n  {{TIME}} {{RAINFLUX}}\n{{/TABLE_RAINFLUXTB}}\n* End of table\n{{/SWITCH_SWRAIN_OPTION_1}}\n{{#SWITCH_SWRAIN_OPTION_3}}\n* If SWRAIN = 3, then specify file name of file with detailed rainfall data\n  RAINFIL = {{RAINFIL}}      ! File name of detailed rainfall data without extension .YYY, [A200]\n                             ! Extension is equal to last 3 digits of year, e.g. 003 denotes year 2003\n{{/SWITCH_SWRAIN_OPTION_3}}\n{{/SWITCH_SWETR_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** CROP SECTION ***\n\n**********************************************************************************\n* Part 1: Crop rotation scheme\n\n* Switch for bare soil or cultivated soil:\n  SWCROP = {{SWCROP}}        ! 0 = Bare soil\n                             ! 1 = Cultivated soil\n\n{{#SWITCH_SWCROP_OPTION_1}}\n* Specify for each crop (maximum MACROP):\n* CROPSTART  = date of crop emergence [date]\n* CROPEND    = date of crop harvest [date]\n* CROPFIL    = name of file with crop input parameters without extension .CRP, [A40]\n* CROPTYPE   = growth module: 1 = simple; 2 = detailed, WOFOST general; 3 = detailed, WOFOST grass\n\n{{#TABLE_CROPROTATION}}\n  {{CROPSTART}} {{CROPEND}} {{CROPFIL}} {{CROPTYPE}}\n{{/TABLE_CROPROTATION}}\n* End of table\n\n  RDS  = {{RDS}}             ! Maximum rooting depth allowed by the soil profile, [1..5000 cm, R]\n\n{{/SWITCH_SWCROP_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Fixed irrigation applications\n\n* Switch for fixed irrigation applications\n  SWIRFIX = {{SWIRFIX}}      ! 0 = no irrigation applications are prescribed\n                             ! 1 = irrigation applications are prescribed\n\n{{#SWITCH_SWIRFIX_OPTION_1}}\n* If SWIRFIX = 1, specify:\n* Switch for separate file with fixed irrigation applications\n  SWIRGFIL  = {{SWIRGFIL}}   ! 0 = data are specified in the .swp file\n                             ! 1 = data are specified in a separate file\n\n{{#SWITCH_SWIRGFIL_OPTION_0}}\n* If SWIRGFIL  = 0 specify information for each fixed irrigation event (max. MAIRG):\n* IRDATE   = date of irrigation [date]\n* IRDEPTH  = amount of water [0..1000 mm, R]\n{{#SWITCH_SWSOLU_OPTION_1}}\n* IRCONC   = concentration of irrigation water [0..1000 mg/cm3, R]\n{{/SWITCH_SWSOLU_OPTION_1}}\n* IRTYPE   = type of irrigation: sprinkling = 0, surface = 1\n\n{{#SWITCH_SWSOLU_OPTION_0}}\n{{#TABLE_IRRIGATIONFIXED}}\n  {{IRDATE}} {{IRDEPTH}} {{IRTYPE}}\n{{/TABLE_IRRIGATIONFIXED}}\n{{/SWITCH_SWSOLU_OPTION_0}}\n{{#SWITCH_SWSOLU_OPTION_1}}\n{{#TABLE_IRRIGATIONFIXED}}\n  {{IRDATE}} {{IRDEPTH}} {{IRCONC}} {{IRTYPE}}\n{{/TABLE_IRRIGATIONFIXED}}\n{{/SWITCH_SWSOLU_OPTION_1}}\n* End of table\n{{/SWITCH_SWIRGFIL_OPTION_0}}\n{{#SWITCH_SWIRGFIL_OPTION_1}}\n* If SWIRGFIL  = 1, specify name of file with irrigation data:\n  IRGFIL = {{IRGFIL}}        ! File name with irrigation input data without extension .IRG [A32]\n{{/SWITCH_SWIRGFIL_OPTION_1}}\n{{/SWITCH_SWIRFIX_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** SOIL WATER SECTION ***\n\n**********************************************************************************\n* Part 1: Initial soil moisture condition\n\n* Switch, type of initial soil moisture condition:\n  SWINCO = {{SWINCO}}        ! 1 = pressure head as function of soil depth\n                             ! 2 = pressure head of each compartment is in hydrostatic equilibrium with initial groundwater level\n                             ! 3 = read final pressure heads from output file of previous Swap simulation\n\n{{#SWITCH_SWINCO_OPTION_1}}\n* If SWINCO = 1, specify soil depth ZI [-1.d5..0 cm, R] and initial\n* soil water pressure head H [-1.d10..1.d4 cm, R] (maximum MACP):\n\n{{#TABLE_INIPRESSUREHEAD}}\n  {{ZI}} {{H}}\n{{/TABLE_INIPRESSUREHEAD}}\n* End of table\n{{/SWITCH_SWINCO_OPTION_1}}\n{{#SWITCH_SWINCO_OPTION_2}}\n* If SWINCO = 2, specify initial groundwater level:\n  GWLI   = {{GWLI}}          ! Initial groundwater level, [-10000..100 cm, R]\n{{/SWITCH_SWINCO_OPTION_2}}\n{{#SWITCH_SWINCO_OPTION_3}}\n* If SWINCO = 3, specify output file with initial values for current run:\n  INIFIL = {{INIFIL}}        ! name of output file *.END which contains initial values [A200]\n{{/SWITCH_SWINCO_OPTION_3}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Ponding, runoff and runon\n\n* Ponding\n* Switch for variation ponding threshold for runoff\n  SWPONDMX = {{SWPONDMX}}    ! 0 = Ponding threshold for runoff is constant\n                             ! 1 = Ponding threshold for runoff varies in time\n\n{{#SWITCH_SWPONDMX_OPTION_0}}\n* If SWPONDMX = 0, specify\n  PONDMX  = {{PONDMX}}       ! In case of ponding, minimum thickness for runoff [0..1000 cm, R]\n{{/SWITCH_SWPONDMX_OPTION_0}}\n{{#SWITCH_SWPONDMX_OPTION_1}}\n* If SWPONDMX = 1, specify minimum thickness for runoff PONDMXTB [0..1000 cm, R] as function of time\n\n{{#TABLE_MXPONDTB}}\n  {{DATEPMX}} {{PONDMXTB}}\n{{/TABLE_MXPONDTB}}\n* End of table\n{{/SWITCH_SWPONDMX_OPTION_1}}\n\n* Runoff\n  RSRO    = {{RSRO}}         ! Drainage resistance for surface runoff [0.001..1.0 d, R]\n  RSROEXP = {{RSROEXP}}      ! Exponent in drainage equation of surface runoff [0.01..10.0 -, R]\n\n* Runon\n  SWRUNON = {{SWRUNON}}      ! Switch, use of runon data [Y=1, N=0]\n\n{{#SWITCH_SWRUNON_OPTION_1}}\n* If SWRUNON = 1, specify name of file with runon input data\n* This file may be an output file *.inc (with only 1 header line) of a previous Swap-simulation\n  RUFIL = 'swap.inc'         ! File name with extension [A80]\n\n{{/SWITCH_SWRUNON_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Soil evaporation\n\n  CFEVAPPOND = 1.25          ! When ETref is used, evaporation coefficient in case of ponding  [0..3 -, R]\n\n* Switch for use of soil factor CFBS to calculate Epot from ETref:\n  SWCFBS = {{SWCFBS}}        ! 0 = soil factor is not used\n                             ! 1 = soil factor is used\n\n{{#SWITCH_SWCFBS_OPTION_1}}\n* If SWCFBS = 1, specify coefficient CFBS:\n  CFBS = {{CFBS}}            ! Coefficient for potential soil evaporation, [0.5..1.5 -, R]\n\n{{/SWITCH_SWCFBS_OPTION_1}}\n{{#SWITCH_SWETR_OPTION_0}}\n{{#SWITCH_SWDIVIDE_OPTION_1}}\n* If SWDIVIDE = 1 (partitoning according to PMdirect) specify minimum soil resistance\n  RSOIL  =  {{RSOIL}}        ! Soil resistance of wet soil [0..1000.0 s/m, R]\n\n{{/SWITCH_SWDIVIDE_OPTION_1}}\n{{/SWITCH_SWETR_OPTION_0}}\n* Switch, method for reduction of potential soil evaporation:\n  SWREDU = {{SWREDU}}        ! 0 = reduction to maximum Darcy flux\n                             ! 1 = reduction to maximum Darcy flux and to maximum Black (1969)\n                             ! 2 = reduction to maximum Darcy flux and to maximum Boesten/Stroosnijder (1986)\n\n{{#SWITCH_SWREDU_OPTION_1}}\n* If SWREDU = 1, specify:\n COFREDBL = {{COFREDBL}}     ! Soil evaporation coefficient of Black [0..1 cm/d1/2, R]\n RSIGNI = {{RSIGNI}}         ! Minimum rainfall to reset method of Black [0..1 cm/d, R]\n\n{{/SWITCH_SWREDU_OPTION_1}}\n{{#SWITCH_SWREDU_OPTION_2}}\n* If SWREDU = 2, specify:\n COFREDBO = {{COFREDBO}}     ! Soil evaporation coefficient of Boesten/Stroosnijder [0..1 cm1/2, R]\n\n{{/SWITCH_SWREDU_OPTION_2}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 4: Vertical discretization of soil profile\n\n* Specify the following data (maximum MACP lines):\n* ISUBLAY  = number of sub layer, start with 1 at soil surface [1..MACP, I]\n* ISOILLAY = number of soil physical layer, start with 1 at soil surface [1..MAHO, I]\n* HSUBLAY  = height of sub layer [0..1.d4 cm, R]\n* HCOMP    = height of compartments in the sub layer [0.0..1000.0 cm, R]\n* NCOMP    = number of compartments in the sub layer (Mind NCOMP = HSUBLAY/HCOMP) [1..MACP, I]\n\n{{#TABLE_SOILPROFILE}}\n  {{ISUBLAY}} {{ISOILLAY}} {{HSUBLAY}} {{HCOMP}} {{NCOMP}}\n{{/TABLE_SOILPROFILE}}\n* End of table\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 5: Soil hydraulic functions\n\n* Switch for analytical functions or tabular input:\n  SWSOPHY = {{SWSOPHY}}      ! 0 = Analytical functions with input of Mualem - van Genuchten parameters\n                             ! 1 = Soil physical tables\n\n{{#SWITCH_SWSOPHY_OPTION_0}}\n* If SWSOPHY = 0, specify MvG parameters for each soil physical layer (maximum MAHO):\n* ORES    = Residual water content [0..1 cm3/cm3, R]\n* OSAT    = Saturated water content [0..1 cm3/cm3, R]\n* ALFA    = Parameter alfa of main drying curve [0.0001..100 /cm, R]\n* NPAR    = Parameter n [1.001..9 -, R]\n* KSATFIT = Fitting parameter Ksat of hydraulic conductivity function [1.d-5..1d5 cm/d, R]\n* LEXP    = Exponent in hydraulic conductivity function [-25..25 -, R]\n{{#SWITCH_SWHYST_OPTION_1}}\n* ALFAW   = Alfa parameter of main wetting curve in case of hysteresis [0.0001..100 /cm, R]\n{{/SWITCH_SWHYST_OPTION_1}}\n{{#SWITCH_SWHYST_OPTION_2}}\n* ALFAW   = Alfa parameter of main wetting curve in case of hysteresis [0.0001..100 /cm, R]\n{{/SWITCH_SWHYST_OPTION_2}}\n* H_ENPR  = Air entry pressure head [-40.0..0.0 cm, R]\n* KSATEXM = Measured hydraulic conductivity at saturated conditions [1.d-5..1d5 cm/d, R]\n* BDENS   = Dry soil bulk density [100..1d4 mg/cm3, R]\n\n{{#SWITCH_SWHYST_OPTION_0}}\n{{#TABLE_SOILHYDRFUNC}}\n  {{ORES}} {{OSAT}} {{ALFA}} {{NPAR}} {{KSATFIT}} {{LEXP}} {{H_ENPR}} {{KSATEXM}} {{BDENS}}\n{{/TABLE_SOILHYDRFUNC}}\n{{/SWITCH_SWHYST_OPTION_0}}\n{{#SWITCH_SWHYST_OPTION_1}}\n{{#TABLE_SOILHYDRFUNC}}\n  {{ORES}} {{OSAT}} {{ALFA}} {{NPAR}} {{KSATFIT}} {{LEXP}} {{ALFAW}} {{H_ENPR}} {{KSATEXM}} {{BDENS}}\n{{/TABLE_SOILHYDRFUNC}}\n{{/SWITCH_SWHYST_OPTION_1}}\n{{#SWITCH_SWHYST_OPTION_2}}\n{{#TABLE_SOILHYDRFUNC}}\n  {{ORES}} {{OSAT}} {{ALFA}} {{NPAR}} {{KSATFIT}} {{LEXP}} {{ALFAW}} {{H_ENPR}} {{KSATEXM}} {{BDENS}}\n{{/TABLE_SOILHYDRFUNC}}\n{{/SWITCH_SWHYST_OPTION_2}}\n* End of table\n{{/SWITCH_SWSOPHY_OPTION_0}}\n{{#SWITCH_SWSOPHY_OPTION_1}}\n* If SWSOPHY = 1, specify names of input files [A80] with soil hydraulic tables for each soil layer:\n  FILENAMESOPHY = {{FILENAMESOPHY}}\n{{/SWITCH_SWSOPHY_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 6: Hysteresis of soil water retention function\n\n* Switch for hysteresis:\n  SWHYST = {{SWHYST}}        ! 0 = no hysteresis\n                             ! 1 = hysteresis, initial condition wetting\n                             ! 2 = hysteresis, initial condition drying\n\n{{#SWITCH_SWHYST_OPTION_1}}\n* If SWHYST = 1 or 2, specify:\n  TAU = {{TAU}}              ! Minimum pressure head difference to change wetting-drying, [0..1 cm, R]\n\n{{/SWITCH_SWHYST_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 7: Preferential flow due to macropores\n\n* Switch for macropore flow [0..2, I]:\n  SWMACRO = 0                ! 0 = no macropore flow\n                             ! 1 = macropore flow\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 8: Snow and frost\n\n* Switch, calculate snow accumulation and melt:\n  SWSNOW = {{SWSNOW}}        ! 0 = no simulation of snow\n                             ! 1 = simulation of snow accumulation and melt\n\n{{#SWITCH_SWSNOW_OPTION_1}}\n* If SWSNOW = 1, specify:\n  SNOWINCO = {{SNOWINCO}}    ! Initial snow water equivalent [0..1000 cm, R]\n  TEPRRAIN = {{TEPRRAIN}}    ! Temperature above which all precipitation is rain[ 0..10 oC, R]\n  TEPRSNOW = {{TEPRSNOW}}    ! Temperature below which all precipitation is snow[-10..0 oC, R]\n  SNOWCOEF = {{SNOWCOEF}}    ! Snowmelt calibration factor [0...10 -, R]\n\n{{/SWITCH_SWSNOW_OPTION_1}}\n* Switch, in case of frost reduce soil water flow:\n  SWFROST = {{SWFROST}}      ! 0 = no simulation of frost\n                             ! 1 = simulation of frost reduce soil water flow\n\n{{#SWITCH_SWFROST_OPTION_1}}\n* If SWFROST = 1, then specify soil temperature to start end end flux-reduction\n  TFROSTSTA = {{TFROSTSTA}}  ! Soil temperature (oC) where reduction of water fluxes starts [-10.0,5.0, oC, R]\n  TFROSTEND = {{TFROSTEND}}  ! Soil temperature (oC) where reduction of water fluxes ends [-10.0,5.0, oC, R]\n\n{{/SWITCH_SWFROST_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 9: Numerical solution of Richards' equation for soil water flow\n\n  DTMIN         = {{DTMIN}}  ! Minimum timestep [1.d-7..0.1 d, R]\n  DTMAX         = {{DTMAX}}  ! Maximum timestep [dtmin..1 d, R]\n  GWLCONV       = {{GWLCONV}} ! Maximum difference of groundwater level between time steps [1.d-5..1000 cm, R]\n  CRITDEVH1CP   = {{CRITDEVH1CP}} ! Maximum relative difference in pressure heads per compartment [1.0d-10..1.d3 -, R]\n  CRITDEVH2CP   = {{CRITDEVH2CP}} ! Maximum absolute difference in pressure heads per compartment [1.0d-10..1.d3 cm, R]\n  CRITDEVPONDDT = {{CRITDEVPONDDT}} ! Maximum water balance error of ponding layer [1.0d-6..0.1 cm, R]\n  MAXIT         = {{MAXIT}}  ! Maximum number of iteration cycles [5..100 -, I]\n  MAXBACKTR     = {{MAXBACKTR}} ! Maximum number of back track cycles within an iteration cycle [1..10 -,I]\n\n* Switch for averaging method of hydraulic conductivity [1..4 -, I]:\n  SWKMEAN = {{SWKMEAN}}      ! 1 = unweighted arithmic mean\n                             ! 2 = weighted arithmic mean\n                             ! 3 = unweighted geometric mean\n                             ! 4 = weighted geometric mean\n                             ! 5 = unweighted harmonic mean\n                             ! 6 = weighted harmonic mean\n\n* Switch for updating hydraulic conductivity during iteration [0..1 -, I]:\n  SWKIMPL = {{SWKIMPL}}      ! 0 = no update\n                             ! 1 = update\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** LATERAL DRAINAGE SECTION ***\n\n**********************************************************************************\n* Specify whether lateral drainage to surface water should be included\n\n* Switch, simulation of lateral drainage:\n  SWDRA = {{SWDRA}}          ! 0 = no simulation of drainage\n                             ! 1 = simulation with basic drainage routine\n                             ! 2 = simulation of drainage with surface water management\n\n{{#SWITCH_SWDRA_OPTION_1}}\n* If SWDRA = 1 specify name of file with drainage input data:\n  DRFIL = {{DRFIL}}          ! File name with drainage input data without extension .DRA [A16]\n{{/SWITCH_SWDRA_OPTION_1}}\n{{#SWITCH_SWDRA_OPTION_2}}\n* If SWDRA = 2 specify name of file with drainage input data:\n  DRFIL = {{DRFIL}}          ! File name with drainage input data without extension .DRA [A16]\n{{/SWITCH_SWDRA_OPTION_2}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** BOTTOM BOUNDARY SECTION ***\n\n**********************************************************************************\n* Bottom boundary condition\n\n* Switch for file with bottom boundary data:\n  SWBBCFILE  = {{SWBBCFILE}} ! 0 = data are specified in current file\n                             ! 1 = data are specified in a separate file\n\n{{#SWITCH_SWBBCFILE_OPTION_0}}\n* Select one of the following options:\n  SWBOTB = {{SWBOTB}}        ! 1  Prescribe groundwater level\n                             ! 2  Prescribe bottom flux\n                             ! 3  Calculate bottom flux from hydraulic head of deep aquifer\n                             ! 4  Calculate bottom flux as function of groundwater level\n                             ! 5  Prescribe soil water pressure head of bottom compartment\n                             ! 6  Bottom flux equals zero\n                             ! 7  Free drainage of soil profile\n                             ! 8  Free outflow at soil-air interface\n\n* Options 1-5 require additional bottom boundary data below\n\n**********************************************************************************\n\n\n**********************************************************************************\n{{#SWITCH_SWBOTB_OPTION_1}}\n* In case of SWBOTB = 1, prescribe groundwater level\n\n* specify DATE1 [date] and GWLEVEL [cm, -10000..1000, R]:\n{{#TABLE_SWBOTBTB1}}\n  {{DATE1}} {{GWLEVEL}}\n{{/TABLE_SWBOTBTB1}}\n* End of table\n\n{{/SWITCH_SWBOTB_OPTION_1}}\n{{#SWITCH_SWBOTB_OPTION_2}}\n* In case of SWBOTB = 2, prescribe bottom flux\n\n* Specify whether a sinus function or a table are used for the bottom flux:\n  SW2    = {{SW2}}           ! 1 = sinus function\n                             ! 2 = table\n\n{{#SWITCH_SW2_OPTION_1}}\n* In case of sinus function (SW2 = 1), specify:\n  SINAVE = {{SINAVE}}        ! Average value of bottom flux [-10..10 cm/d, R, + = upwards]\n  SINAMP = {{SINAMP}}        ! Amplitude of bottom flux sine function [-10..10 cm/d, R]\n  SINMAX = {{SINMAX}}        ! Time of the year with maximum bottom flux [0..366 d, R]\n{{/SWITCH_SW2_OPTION_1}}\n{{#SWITCH_SW2_OPTION_2}}\n* In case of table (SW2 = 2), specify date DATE2 [date] and bottom flux QBOT2 [-100..100 cm/d, R, positive = upwards]:\n\n{{#TABLE_SWBOTBTB2}}\n  {{DATE2}} {{QBOT2}}\n{{/TABLE_SWBOTBTB2}}\n* End of table\n{{/SWITCH_SW2_OPTION_2}}\n\n{{/SWITCH_SWBOTB_OPTION_2}}\n{{#SWITCH_SWBOTB_OPTION_3}}\n* In case of SWBOTB = 3, calculate bottom flux from hydraulic head in deep aquifer\n\n* Switch for vertical hydraulic resistance between bottom boundary and groundwater level\n  SWBOTB3RESVERT = {{SWBOTB3RESVERT}} ! 0 = Include vertical hydraulic resistance\n                             ! 1 = Suppress vertical hydraulic resistance\n\n* Switch for numerical solution of bottom flux: 0 = explicit, 1 = implicit\n  SWBOTB3IMPL = {{SWBOTB3IMPL}} ! 0 = explicit solution (choose always when SHAPE &lt; 1.0)\n                             ! 1 = implicit solution\n\n* Specify:\n  SHAPE  = {{SHAPE}}         ! Shape factor to derive average groundwater level [0..1 -, R]\n  HDRAIN = {{HDRAIN}}        ! Mean drain base to correct for average groundwater level [-10000..0 cm, R]\n  RIMLAY = {{RIMLAY}}        ! Vertical resistance of aquitard [0..100000 d, R]\n\n* Specify whether a sinus function or a table are used for the hydraulic head in the deep aquifer:\n  SW3    = {{SW3}}           ! 1 = sinus function\n                             ! 2 = table\n\n{{#SWITCH_SW3_OPTION_1}}\n* In case of sinus function (SW3  = 1), specify:\n  AQAVE  = {{AQAVE}}         ! Average hydraulic head in underlaying aquifer [-10000..1000 cm, R]\n  AQAMP  = {{AQAMP}}         ! Amplitude hydraulic head sinus wave [0..1000 cm, R]\n  AQTMAX = {{AQTMAX}}        ! First time of the year with maximum hydraulic head [0..366 d, R]\n  AQPER  = {{AQPER}}         ! Period hydraulic head sinus wave [0..366 d, I]\n{{/SWITCH_SW3_OPTION_1}}\n{{#SWITCH_SW3_OPTION_2}}\n* In case of table (SW3  = 2), specify date DATE3 [date] and average pressure head in underlaying aquifer HAQUIF [-10000..1000 cm, R]:\n\n{{#TABLE_SWBOTBTB3A}}\n  {{DATE3}} {{HAQUIF}}\n{{/TABLE_SWBOTBTB3A}}\n* End of table\n{{/SWITCH_SW3_OPTION_2}}\n\n* An extra groundwater flux can be specified which is added to above specified flux\n  SW4   = {{SW4}}            ! 0 = no extra flux\n                             ! 1 = include extra flux\n\n{{#SWITCH_SW4_OPTION_1}}\n* If SW4 = 1, specify date DATE4 [date] and bottom flux QBOT4 [-100..100 cm/d, R]\n* QTAB is positive when flux is upward:\n\n{{#TABLE_SWBOTBTB3B}}\n  {{DATE4}} {{QBOT4}}\n{{/TABLE_SWBOTBTB3B}}\n* End of table\n\n{{/SWITCH_SW4_OPTION_1}}\n\n{{/SWITCH_SWBOTB_OPTION_3}}\n{{#SWITCH_SWBOTB_OPTION_4}}\n* In case of SWBOTB = 4, calculate bottom flux as function of groundwater level\n\n* Specify whether an exponential relation or a table is used [1..2 -,I]:\n  SWQHBOT = {{SWQHBOT}}      ! 1 = bottom flux is calculated with an exponential relation\n                             ! 2 = bottom flux is derived from a table\n\n{{#SWITCH_SWQHBOT_OPTION_1}}\n* In case of an exponential relation (SWQHBOT = 1),\n* specify coefficients of relation qbot = A exp (B*abs(groundwater level))\n  COFQHA = {{COFQHA}}        ! Coefficient A, [-100..100 cm/d, R]\n  COFQHB = {{COFQHB}}        ! Coefficient B  [-1..1 /cm, R]\n\n* If SWQHBOT = 1, an extra flux can be added to the exponential relation\n  COFQHC = {{COFQHC}}        ! Water flux (positive upward) in addition to flux from exponential relation [-10..10 cm/d, R]\n{{/SWITCH_SWQHBOT_OPTION_1}}\n{{#SWITCH_SWQHBOT_OPTION_2}}\n* In case of a table (SWQHBOT  = 2),\n* specify groundwaterlevel HTAB [-10000..1000, cm, R] and bottom flux QTAB [-100..100 cm/d, R]\n* HTAB is negative below the soil surface, QTAB is positive when flux is upward:\n\n{{#TABLE_SWBOTBTB4}}\n  {{HTAB}} {{QTAB}}\n{{/TABLE_SWBOTBTB4}}\n* End of table\n{{/SWITCH_SWQHBOT_OPTION_2}}\n\n{{/SWITCH_SWBOTB_OPTION_4}}\n{{#SWITCH_SWBOTB_OPTION_5}}\n* In case of SWBOTB = 5, prescribe soil water pressure head of bottom compartment\n\n* Specify date DATE5 [date] and bottom compartment pressure head HBOT5 [-1.d10..1000 cm, R]:\n\n{{#TABLE_SWBOTBTB5}}\n  {{DATE5}} {{HBOT5}}\n{{/TABLE_SWBOTBTB5}}\n* End of table\n\n{{/SWITCH_SWBOTB_OPTION_5}}\n{{/SWITCH_SWBBCFILE_OPTION_0}}\n{{#SWITCH_SWBBCFILE_OPTION_1}}\n* If SWBBCFILE = 1 specify name of file with bottom boundary data:\n  BBCFIL = {{BBCFIL}}        ! File name without extension .BBC [A32]\n\n{{/SWITCH_SWBBCFILE_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** HEAT FLOW SECTION ***\n\n**********************************************************************************\n* Switch for simulation of heat transport:\n  SWHEA  = {{SWHEA}}         ! 0 = no simulation of heat transport\n                             ! 1 = simulation of heat transport\n\n{{#SWITCH_SWHEA_OPTION_1}}\n* Switch for calculation method:\n  SWCALT = {{SWCALT}}        ! 1 = analytical method\n                             ! 2 = numerical method\n\n{{#SWITCH_SWCALT_OPTION_1}}\n* In case of the Analytical method (SWCALT = 1) specify:\n* If SWCALT = 1 specify the following heat parameters:\n  TAMPLI = {{TAMPLI}}        ! Amplitude of annual temperature wave at soil surface [0..50 oC, R]\n  TMEAN  = {{TMEAN}}         ! Mean annual temperature at soil surface [-10..30 oC, R]\n  TIMREF = {{TIMREF}}        ! Time at which the sinus temperature wave reaches it's top [0..366.0 d, R]\n  DDAMP  = {{DDAMP}}         ! Damping depth of soil temperature wave [1..500 cm, R]\n\n{{/SWITCH_SWCALT_OPTION_1}}\n{{#SWITCH_SWCALT_OPTION_2}}\n* In case of the numerical method (SWCALT = 2) specify:\n* Specify for each physical soil layer the soil texture (g/g mineral parts) and the organic matter content (g/g dry soil):\n\n{{#TABLE_SOILTEXTURES}}\n  {{PSAND}} {{PSILT}} {{PCLAY}} {{ORGMAT}}\n{{/TABLE_SOILTEXTURES}}\n* End of table\n\n{{#SWITCH_SWINCO_OPTION_1}}\n* If SWINCO = 1 or 2, list initial temperature TSOIL [-50..50 oC, R] as function of soil depth ZH [-100000..0 cm, R]:\n\n{{#TABLE_INITSOIL}}\n  {{ZH}} {{TSOIL}}\n{{/TABLE_INITSOIL}}\n* End of table\n{{/SWITCH_SWINCO_OPTION_1}}\n{{#SWITCH_SWINCO_OPTION_2}}\n* If SWINCO = 1 or 2, list initial temperature TSOIL [-50..50 oC, R] as function of soil depth ZH [-100000..0 cm, R]:\n\n{{#TABLE_INITSOIL}}\n  {{ZH}} {{TSOIL}}\n{{/TABLE_INITSOIL}}\n* End of table\n{{/SWITCH_SWINCO_OPTION_2}}\n\n* Define top boundary condition:\n  SWTOPBHEA = {{SWTOPBHEA}}  ! 1 = use air temperature of meteo input file as top boundary\n                             ! 2 = use measured top soil temperature as top boundary\n\n{{#SWITCH_SWTOPBHEA_OPTION_2}}\n* If SWTOPBHEA = 2, specify name of input file with soil surface temperatures\n  TSOILFILE = 'swap'         ! File name without extension .TSS [A16]\n\n{{/SWITCH_SWTOPBHEA_OPTION_2}}\n* Define bottom boundary condition:\n  SWBOTBHEA = {{SWBOTBHEA}}  ! 1 = no heat flux\n                             ! 2 = prescribe bottom temperature\n\n{{#SWITCH_SWBOTBHEA_OPTION_2}}\n* If SWBOTBHEA = 2, specify bottom boundary temperature TBOT [-50..50 oC, R] as function of date DATET [date]:\n\n{{#TABLE_BBCTSOIL}}\n  {{DATET}} {{TBOT}}\n{{/TABLE_BBCTSOIL}}\n* End of table\n\n{{/SWITCH_SWBOTBHEA_OPTION_2}}\n{{/SWITCH_SWCALT_OPTION_2}}\n{{/SWITCH_SWHEA_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n\n*** SOLUTE SECTION ***\n\n**********************************************************************************\n* Part 0: Specify whether simulation includes solute transport\n\n* Switch for simulation of solute transport\n  SWSOLU = {{SWSOLU}}        ! 0 = no simulation of solute transport\n                             ! 1 = simulation of solute transport\n\n{{#SWITCH_SWSOLU_OPTION_1}}\n**********************************************************************************\n* Part 1: Boundary and initial conditions\n\n  CPRE = {{CPRE}}            ! Solute concentration in precipitation, [0..100 mg/cm3 R]\n  CDRAIN = {{CDRAIN}}        ! Solute concentration in surface water [0..100 mg/cm3 R]\n\n* Switch for groundwater concentration in case of upward flow (seepage):\n  SWBOTBC = {{SWBOTBC}}      ! 0 = Equal to surface water concentration CDRAIN\n                             ! 1 = Constant concentration CSEEP\n                             ! 2 = Concentration as function of time\n\n{{#SWITCH_SWBOTBC_OPTION_1}}\n* In case of constant concentration (SWBOTBC = 1), specify:\n  CSEEP = {{CSEEP}}          ! Solute concentration in surface water [0..100 mg/cm3, R]\n\n{{/SWITCH_SWBOTBC_OPTION_1}}\n{{#SWITCH_SWBOTBC_OPTION_2}}\n* In case of SWBOTBC = 2, specify groundwater conc. CSEEPARR [0..100 mg/cm3, R] as function of date DATEC [date]:\n\n{{#TABLE_CSEEPARRTB}}\n  {{DATEC}} {{CSEEPARR}}\n{{/TABLE_CSEEPARRTB}}\n* End of table\n\n{{/SWITCH_SWBOTBC_OPTION_2}}\n\n{{#SWITCH_SWINCO_OPTION_1}}\n* If SWINCO = 1, list initial solute concentration CML [0..1000 mg/cm3, R] as function of soil depth ZC [-100000..0 cm, R]:\n\n{{#TABLE_INISSOIL}}\n  {{ZC}} {{CML}}\n{{/TABLE_INISSOIL}}\n* End of table\n\n{{/SWITCH_SWINCO_OPTION_1}}\n{{#SWITCH_SWINCO_OPTION_2}}\n* If SWINCO = 2, list initial solute concentration CML [0..1000 mg/cm3, R] as function of soil depth ZC [-100000..0 cm, R]:\n\n{{#TABLE_INISSOIL}}\n  {{ZC}} {{CML}}\n{{/TABLE_INISSOIL}}\n* End of table\n\n{{/SWITCH_SWINCO_OPTION_2}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 2: Miscellaneous parameters as function of soil depth\n\n* Specify for each soil layer:\n* LDIS   = Dispersion length [0..100 cm, R]\n{{#SWITCH_SWSP_OPTION_1}}\n* KF     = Freundlich adsorption coefficient [0..1d4 cm3/mg, R]\n{{/SWITCH_SWSP_OPTION_1}}\n{{#SWITCH_SWDC_OPTION_1}}\n* DECPOT = Potential decomposition rate [0..10 /d, R]\n* FDEPTH = Reduction factor for decomposition [0..1 -, R]\n{{/SWITCH_SWDC_OPTION_1}}\n\n{{#SWITCH_SWSP_OPTION_0}}\n{{#SWITCH_SWDC_OPTION_0}}\n{{#TABLE_MISCELLANEOUS}}\n  {{LDIS}}\n{{/TABLE_MISCELLANEOUS}}\n* End of Table\n{{/SWITCH_SWDC_OPTION_0}}\n{{#SWITCH_SWDC_OPTION_1}}\n{{#TABLE_MISCELLANEOUS}}\n  {{LDIS}} {{DECPOT}} {{FDEPTH}}\n{{/TABLE_MISCELLANEOUS}}\n* End of Table\n{{/SWITCH_SWDC_OPTION_1}}\n{{/SWITCH_SWSP_OPTION_0}}\n\n{{#SWITCH_SWSP_OPTION_1}}\n{{#SWITCH_SWDC_OPTION_0}}\n{{#TABLE_MISCELLANEOUS}}\n  {{LDIS}} {{KF}}\n{{/TABLE_MISCELLANEOUS}}\n* End of Table\n{{/SWITCH_SWDC_OPTION_0}}\n{{#SWITCH_SWDC_OPTION_1}}\n{{#TABLE_MISCELLANEOUS}}\n  {{LDIS}} {{KF}} {{DECPOT}} {{FDEPTH}}\n{{/TABLE_MISCELLANEOUS}}\n* End of Table\n{{/SWITCH_SWDC_OPTION_1}}\n{{/SWITCH_SWSP_OPTION_1}}\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 3: Diffusion constant and solute uptake by roots\n\n  DDIF = {{DDIF}}            ! Molecular diffusion coefficient [0..10 cm2/d, R]\n  TSCF = {{TSCF}}            ! Relative uptake of solutes by roots [0..10 -, R]\n\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 4: Adsorption\n\n* Switch, consider solute adsorption\n  SWSP = {{SWSP}}            ! 0 = no solute adsorption\n                             ! 1 = simulation of solute adsorption\n\n{{#SWITCH_SWSP_OPTION_1}}\n* In case of adsorption (SWSP = 1), specify:\n  FREXP = {{FREXP}}          ! Freundlich exponent [0..10 -, R]\n  CREF  = {{CREF}}           ! Reference solute concentration for adsorption [0..1000 mg/cm3, R]\n\n{{/SWITCH_SWSP_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 5: Decomposition\n\n* Switch, consider solute decomposition\n  SWDC = {{SWDC}}            ! 0 = no solute decomposition\n                             ! 1 = simulation of solute decomposition\n\n{{#SWITCH_SWDC_OPTION_1}}\n* In case of solute decomposition (SWDC = 1), specify:\n  GAMPAR = {{GAMPAR}}        ! Factor reduction decomposition due to temperature [0..0.5 /C, R]\n  RTHETA = {{RTHETA}}        ! Minimum water content for potential decomposition [0..0.4 cm3/cm3, R]\n  BEXP   = {{BEXP}}          ! Exponent in reduction decomposition due to dryness [0..2 -, R]\n\n{{/SWITCH_SWDC_OPTION_1}}\n**********************************************************************************\n\n\n**********************************************************************************\n* Part 6: Solute residence time in the saturated zone\n\n  SWBR = {{SWBR}}            ! Switch, consider mixed reservoir of saturated zone [Y=1, N=0]\n\n{{#SWITCH_SWBR_OPTION_1}}\n* In case of mixed reservoir (SWBR = 1), specify:\n  DAQUIF  = {{DAQUIF}}       ! Thickness saturated part of aquifer [0..10000 cm, R]\n  POROS   = {{POROS}}        ! Porosity of aquifer [0..0.6 -, R]\n  KFSAT   = {{KFSAT}}        ! Linear adsorption coefficient in aquifer [0..100 cm3/mg, R]\n  DECSAT  = {{DECSAT}}       ! Decomposition rate in aquifer [0..10 /d, R]\n  CDRAINI = {{CDRAINI}}      ! Initial solute concentration in groundwater [0..100 mg/cm3, R]\n\n{{/SWITCH_SWBR_OPTION_1}}\n{{/SWITCH_SWSOLU_OPTION_1}}\n**********************************************************************************\n\n* End of the main input file .SWP!\n</code></pre>", "boost": 0.5}]}